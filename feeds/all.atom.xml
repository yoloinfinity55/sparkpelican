<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>sparkpelican</title><link href="https://yoloinfinity55.github.io/sparkpelican/" rel="alternate"/><link href="https://yoloinfinity55.github.io/sparkpelican/feeds/all.atom.xml" rel="self"/><id>https://yoloinfinity55.github.io/sparkpelican/</id><updated>2025-10-17T10:20:38.855829-04:00</updated><entry><title>出发韩国 世界最年轻的发达国家 保姆级攻略</title><link href="https://yoloinfinity55.github.io/sparkpelican/chu-fa-han-guo-shi-jie-zui-nian-qing-de-fa-da-guo-jia-bao-mu-ji-gong-lue.html" rel="alternate"/><published>2025-10-17T10:20:38.855829-04:00</published><updated>2025-10-17T10:20:38.855829-04:00</updated><author><name>AI Generated</name></author><id>tag:yoloinfinity55.github.io,2025-10-17:/sparkpelican/chu-fa-han-guo-shi-jie-zui-nian-qing-de-fa-da-guo-jia-bao-mu-ji-gong-lue.html</id><summary type="html">&lt;p&gt;Unlock a stress-free first trip to South Korea with this "nanny-level" guide, packed with practical tips that debunk common rumors and prepare you for independent exploration. You'll learn how to handle currency exchange, activate transportation cards, choose between individual and group visas, and overcome language barriers, ensuring a smooth and authentic travel experience. If you're planning your first independent adventure to South Korea, save this essential guide for a truly informed and enjoyable journey.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Unlock a stress-free first trip to South Korea with this "nanny-level" guide, packed with practical tips that debunk common rumors and prepare you for independent exploration. You'll learn how to handle currency exchange, activate transportation cards, choose between individual and group visas, and overcome language barriers, ensuring a smooth and authentic travel experience. If you're planning your first independent adventure to South Korea, save this essential guide for a truly informed and enjoyable journey.&lt;/p&gt;
&lt;p&gt;Embarking on a journey to South Korea for the first time requires careful preparation to ensure a smooth and enjoyable experience. This guide provides essential, actionable insights for navigating everything from visa requirements and connectivity to transportation and accommodation. By understanding these critical aspects, travelers can optimize their trip, save money, and immerse themselves fully in the vibrant culture of South Korea.&lt;/p&gt;
&lt;h2&gt;Key Takeaways&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prioritize an Individual Visa:&lt;/strong&gt; Opt for an individual visa over a group visa for unparalleled freedom and flexibility to explore diverse destinations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secure Cost-Effective Connectivity:&lt;/strong&gt; Purchase a local South Korean SIM card online before your departure for significantly cheaper data and call rates.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strategize Currency Exchange:&lt;/strong&gt; Exchange only a minimal amount of currency at the airport; urban areas offer much more favorable exchange rates.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Master the Tmoney Card:&lt;/strong&gt; Acquire a Tmoney transportation card immediately upon arrival at Incheon Airport for seamless travel on subways and buses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explore Affordable Accommodation:&lt;/strong&gt; Consider staying in Seoul's Gangbuk area for clean, convenient, and significantly more affordable private accommodation options.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Navigating Connectivity and Currency&lt;/h2&gt;
&lt;p&gt;Upon arrival in South Korea, establishing reliable mobile network access and managing currency exchange are immediate priorities. For connectivity, several options exist, each with distinct advantages and disadvantages. While activating international roaming on your domestic phone card offers immediate use, it typically provides limited data and prevents normal use of many local applications due to IP restrictions. Purchasing a local 7-day unlimited data and calling card at the airport is convenient but costly, averaging around 35,000 won (approximately 170 yuan), and requires a lengthy registration process with your passport.&lt;/p&gt;
&lt;p&gt;The most economical and efficient solution involves pre-purchasing a South Korean local calling card online before your trip. These cards often provide unlimited 4G data and talk time for about 50 yuan, saving you approximately 120 yuan compared to airport purchases. However, this option requires providing personal information to the seller and activating the card during specific working hours after entering South Korea. Weigh the cost savings against the activation schedule to determine if this suits your travel plans.&lt;/p&gt;
&lt;p&gt;Regarding currency exchange, the airport presents the least favorable rates. Whether using ATMs, money-changing machines, or manned counters, the exchange rate at Incheon Airport is typically around 177 won per 1 Chinese Yuan (CNY). It is advisable to exchange only a small amount, such as 300 CNY, sufficient for initial expenses. Urban areas, in contrast, offer significantly better rates, often around 197 won per CNY. Plan to handle the majority of your currency exchange in the city to maximize your won.&lt;/p&gt;
&lt;h2&gt;Mastering South Korea's Public Transportation&lt;/h2&gt;
&lt;p&gt;Efficient navigation of South Korea's extensive public transportation system begins with acquiring a Tmoney transportation card. Avoid wasting time searching convenience stores; the most direct method at Incheon Airport is to locate the dedicated Tmoney card machine. From Door 5 in the arrival hall, proceed to the information desk on the left. Directly opposite the information desk, find three vertical elevators. Take any elevator down, and opposite the restroom, look for an "AD" letter indicating a horizontal elevator leading to the Airport Railway.&lt;/p&gt;
&lt;p&gt;Follow the prompts along this path until you reach the Airport Railway entrance. On the left, numerous machines are available for one-way tickets and recharges. Look for a white machine with a prominent "T" letter, quietly situated on the right pillar of the subway entrance. This machine supports Chinese, allows you to purchase the card for 5,000 won (non-refundable), and recharge it with your desired amount, typically 20,000 won for initial use. This streamlined process allows immediate entry to the subway system.&lt;/p&gt;
&lt;p&gt;The Airport Railway offers both all-stop ordinary trains and direct trains to downtown Seoul Station. An ordinary train costs approximately 4,000 won and makes multiple stops, while the direct link doubles the price to over 8,000 won for a slightly faster journey. For budget-conscious travelers, the ordinary train provides excellent value. Seoul's subway system is remarkably user-friendly, with seamless in-station transfers and a logical numbering system for lines and stations. For example, "415" denotes Line 4, 15th station, making navigation straightforward even without knowing station names. Additionally, red seats are designated for pregnant women and the elderly, a widely respected etiquette worth noting.&lt;/p&gt;
&lt;h2&gt;Visa, Accommodation, and Local Insights&lt;/h2&gt;
&lt;p&gt;Choosing the right visa type significantly impacts your travel experience in South Korea. While South Korea recently announced visa exemptions for Chinese group tourists, opting for an individual visa offers far greater flexibility and freedom. Group visas often require a minimum of three people, mandate constant accompaniment by a tour guide, and restrict exploration to popular, pre-determined tourist spots. An individual visa, typically allowing a 90-day stay, enables independent travel, allowing you to explore niche areas and shop off the beaten path, which is often impossible with group tours.&lt;/p&gt;
&lt;p&gt;When considering accommodation, South Korea generally offers slightly lower prices than Japan, though prime locations can still be expensive. Prosperous areas Gangnam often see single rooms exceeding 1,000 yuan. For budget-friendly, clean, and convenient private rooms, consider staying in Seoul's &lt;strong&gt;Gangbuk&lt;/strong&gt; area. This northern part of Seoul is economically less developed than Gangnam but boasts excellent subway connectivity, ensuring easy access to all attractions. Here, you can find private rooms with amenities a 1.5m bed, air conditioning, and a separate bathroom for around 270 yuan, a stark contrast to the dormitory beds typically found in Gangnam at a similar price point.&lt;/p&gt;
&lt;p&gt;Regarding local interactions, many travelers find Koreans generally polite and helpful. English proficiency among Koreans is notably higher than in some neighboring countries. According to the EF EPI 2023 report, South Korea ranks 49th globally for non-native English speakers, significantly higher than Japan's 92nd position. This suggests fewer communication barriers for English-speaking tourists. Furthermore, South Korean streets are generally clean, reflecting a high emphasis on hygiene. The relaxed atmosphere, especially during extended holidays, contributes to a safe and welcoming environment for solo travelers exploring late into the evening.&lt;/p&gt;
&lt;h2&gt;Practical Applications&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Apply for an Individual Visa:&lt;/strong&gt; Secure an individual visa well in advance of your trip to maximize your travel autonomy and avoid the restrictions of group tours.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Order a Korean SIM Card Online:&lt;/strong&gt; Purchase a local unlimited data SIM card from a reputable online vendor before departure to ensure cost-effective connectivity upon arrival.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Limit Airport Currency Exchange:&lt;/strong&gt; Exchange only 300-500 CNY at Incheon Airport for immediate needs; plan to exchange larger amounts at better rates in urban centers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Locate the Tmoney Card Machine:&lt;/strong&gt; Head to Door 5 at Incheon Airport, find the information desk, take the elevator down, and follow signs to the Airport Railway entrance to easily purchase your Tmoney card.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Utilize Seoul's Numbered Subway Stations:&lt;/strong&gt; Leverage the logical numbering system (e.g., Line 4, Station 15) for effortless navigation throughout Seoul's extensive subway network.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explore Gangbuk for Accommodation:&lt;/strong&gt; Research and book accommodation in Seoul's Gangbuk area to find affordable, private, and well-connected lodging options.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thorough preparation is the cornerstone of an unforgettable journey to South Korea. By strategically planning your visa, connectivity, currency exchange, and transportation, you empower yourself to navigate the country with confidence and ease. Embrace these practical insights to unlock a richer, more authentic travel experience, allowing you to fully appreciate the unique charm and efficiency of South Korea. Start planning your adventure today and discover all that this dynamic nation has to offer.&lt;/p&gt;</content><category term="General"/><category term="youtube"/><category term="video"/><category term="content"/></entry><entry><title>Why Individual Korea Visa Matters for Your Ultimate Trip</title><link href="https://yoloinfinity55.github.io/sparkpelican/why-individual-korea-visa-matters-for-your-ultimate-trip.html" rel="alternate"/><published>2025-10-17T10:12:15.133315-04:00</published><updated>2025-10-17T10:12:15.133315-04:00</updated><author><name>AI Generated</name></author><id>tag:yoloinfinity55.github.io,2025-10-17:/sparkpelican/why-individual-korea-visa-matters-for-your-ultimate-trip.html</id><summary type="html">&lt;p&gt;Navigate your first trip to South Korea with insider tips that debunk common rumors and cover every essential detail. Discover how to exchange money, activate transportation cards, understand visa options, find affordable accommodation, and streamline your airport experience with crucial pre-departure checks. This nanny-level guide ensures a hassle-free, independent adventure, making it a must-read for any first-time visitor.---&lt;/p&gt;</summary><content type="html">&lt;p&gt;Navigate your first trip to South Korea with insider tips that debunk common rumors and cover every essential detail. Discover how to exchange money, activate transportation cards, understand visa options, find affordable accommodation, and streamline your airport experience with crucial pre-departure checks. This nanny-level guide ensures a hassle-free, independent adventure, making it a must-read for any first-time visitor.&lt;/p&gt;
&lt;h2&gt;Navigating South Korea: An Essential Guide for First-Time Travelers&lt;/h2&gt;
&lt;p&gt;Embarking on a journey to South Korea promises a blend of vibrant culture and modern efficiency. This guide equips you with critical insights and actionable advice, ensuring a seamless and enjoyable travel experience from arrival to accommodation. Master currency exchange, transportation, and communication to confidently explore this dynamic nation.&lt;/p&gt;
&lt;h2&gt;Key Takeaways&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Opt for an Individual Visa:&lt;/strong&gt; Gain unparalleled flexibility to explore beyond typical tourist routes and avoid group restrictions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pre-Purchase a Local SIM Card:&lt;/strong&gt; Secure cost-effective, unlimited 4G data and call time by buying a SIM online before your trip, saving significantly over airport options.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exchange Currency Strategically:&lt;/strong&gt; Perform minimal exchange at the airport due to unfavorable rates; seek better exchange rates in urban areas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Acquire a Tmoney Card Efficiently:&lt;/strong&gt; Purchase your essential transportation card directly from designated machines near the Airport Railway entrance at Incheon Airport, avoiding unnecessary queues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Utilize Seoul's Numbered Subway System:&lt;/strong&gt; Navigate the extensive subway network with ease by focusing on station numbers, simplifying transfers and destination tracking.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consider Gangbuk for Accommodation:&lt;/strong&gt; Discover clean, quiet, and affordable private rooms in Seoul's Gangbuk area, offering excellent value compared to pricier Gangnam options.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Entry and Connectivity Essentials&lt;/h2&gt;
&lt;p&gt;Planning your entry into South Korea involves strategic visa selection and essential pre-departure preparations. An &lt;strong&gt;individual visa&lt;/strong&gt; offers significant advantages over a group visa, providing the freedom to explore independently without the constraints of a tour guide or fixed itinerary. This flexibility allows travelers to visit niche attractions and shop at local spots, enriching the overall experience.&lt;/p&gt;
&lt;p&gt;Before departure, complete South Korea's electronic entry declaration. This crucial step is necessary for utilizing self-service immigration channels upon arrival. Travelers should also confirm luggage allowances with their airline, as some carriers, Asiana Airlines, may restrict checked baggage to a single 10kg item. Upon arrival, immigration processes are efficient, with staff promptly processing individual visas, typically granting a 90-day stay.&lt;/p&gt;
&lt;p&gt;Securing reliable mobile connectivity is paramount for a smooth trip. While international roaming offers immediate access, it often comes with limited data and prevents normal use of many local applications. Purchasing a local South Korean SIM card in advance online provides the best value, offering unlimited 4G data and talk time for around 50 yuan for seven days. This option is significantly cheaper than buying an airport SIM, which costs approximately 35,000 won (170 yuan) and requires a lengthy registration process with passport verification.&lt;/p&gt;
&lt;h2&gt;Mastering Local Currency and Transportation&lt;/h2&gt;
&lt;p&gt;Efficiently managing your finances and navigating public transport are key to a stress-free South Korean adventure. When exchanging currency, avoid the unfavorable rates at Incheon Airport. Exchange only a minimal amount, such as 300 yuan (approximately 53,100 won), to cover immediate expenses. Urban money exchange counters typically offer significantly better rates, often around 197 won per yuan compared to the airport's 177.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Tmoney transportation card&lt;/strong&gt; is indispensable for public transport throughout South Korea. To purchase one efficiently at Incheon Airport, locate the information desk near Gate 5. Directly opposite, find three vertical elevators. Take any elevator down to the next level. Upon exiting, turn left to find a horizontal elevator leading towards the Airport Railway. Follow the signs to the Airport Railway entrance, where multiple machines are available for single-journey tickets and recharges. Look for a white machine marked with a 'T' near the pillar on the right side of the subway entrance; this is where you can buy a Tmoney card. The card costs 5,000 won (non-refundable) and should be recharged with an initial amount, such as 20,000 won, for immediate use.&lt;/p&gt;
&lt;p&gt;From Incheon Airport, the &lt;strong&gt;Airport Railway (AREX)&lt;/strong&gt; provides two options to Seoul Station: the ordinary train and the direct train. The ordinary train costs approximately 4,000 won and stops at every station, taking about an hour. The direct train, while faster, costs over 8,000 won. For budget-conscious travelers, the ordinary train offers excellent value, especially given the affordability of subsequent subway transfers. Seoul's subway system is highly efficient, featuring numbered lines and stations (e.g., Mia station 415 indicates Line 4, 15th station), simplifying navigation and making it easy to track your journey.&lt;/p&gt;
&lt;h2&gt;Smart Accommodation and Cultural Insights&lt;/h2&gt;
&lt;p&gt;Choosing the right accommodation significantly impacts your travel budget and experience. While prosperous areas Gangnam feature single rooms exceeding 1,000 yuan, Seoul's &lt;strong&gt;Gangbuk area&lt;/strong&gt; offers a more affordable alternative without compromising convenience. In Gangbuk, travelers can find clean, quiet, and private rooms for around 270 yuan, often located in well-connected neighborhoods with easy access to the subway and 24-hour convenience stores. These accommodations provide personal space and comfort, a stark contrast to dormitory beds often found at similar prices in more upscale districts.&lt;/p&gt;
&lt;p&gt;Exploring Seoul's streets, even late at night, generally feels safe. Koreans are known for their politeness and tend to be respectful of passersby. The city maintains a high standard of cleanliness, reflecting a cultural emphasis on hygiene. Subway etiquette further highlights this respect; special red seats designated for pregnant women and the elderly consistently remain vacant, even during peak hours, until needed. This widespread adherence to social norms underscores a collective consideration that enhances the public experience.&lt;/p&gt;
&lt;p&gt;Language barriers are less pronounced in South Korea compared to some other Asian nations. According to the EF EPI 2023 report, Koreans rank 49th globally for English proficiency among non-native speakers, significantly higher than some regional counterparts. This improved English ability facilitates smoother communication with locals, making interactions and asking for directions considerably easier for international travelers.&lt;/p&gt;
&lt;h2&gt;Practical Applications&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Secure an Individual Visa:&lt;/strong&gt; Prioritize applying for an individual visa to maximize travel freedom and explore South Korea at your own pace.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pre-Order a Local SIM Card:&lt;/strong&gt; Purchase a Korean SIM card online before your trip to ensure immediate, cost-effective connectivity upon arrival.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optimize Currency Exchange:&lt;/strong&gt; Exchange a minimal amount of currency at Incheon Airport for immediate needs, then seek better rates at dedicated exchange counters in urban areas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Master Tmoney Card Acquisition:&lt;/strong&gt; Follow the specific directions to purchase your Tmoney card from the designated machine near the Airport Railway entrance at Incheon Airport to save time and hassle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Navigate the Subway by Numbers:&lt;/strong&gt; Utilize Seoul's numbered subway lines and stations for efficient and straightforward travel, making transfers and identifying your stop effortless.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explore Gangbuk for Value Accommodation:&lt;/strong&gt; Research and book accommodation in Seoul's Gangbuk area to find affordable, clean, and private rooms with excellent access to public transport.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A well-planned trip to South Korea can be both enriching and cost-effective with these essential guidelines. By strategically managing visas, connectivity, currency, and transportation, you ensure a smooth journey from the moment you land. Embrace these insights to unlock a truly immersive and hassle-free Korean adventure.&lt;/p&gt;</content><category term="General"/><category term="youtube"/><category term="video"/><category term="content"/></entry><entry><title>Complete Guide - How to Deploy SparkPelican to GitHub Pages</title><link href="https://yoloinfinity55.github.io/sparkpelican/complete-guide-how-to-deploy-sparkpelican-to-github-pages.html" rel="alternate"/><published>2025-10-17T11:00:00+00:00</published><updated>2025-10-17T11:00:00+00:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-17:/sparkpelican/complete-guide-how-to-deploy-sparkpelican-to-github-pages.html</id><summary type="html">&lt;p&gt;Learn how to deploy your SparkPelican blog to GitHub Pages with this comprehensive step-by-step guide. Covers initial setup, configuration, deployment process, and troubleshooting.
author: "Infinity Spark"
readingTime: "10 min read"
tags: ["Deployment", "GitHub Pages", "Pelican", "Tutorial", "DevOps"]&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Complete Guide: How to Deploy SparkPelican to GitHub Pages&lt;/h1&gt;
&lt;p&gt;Deploying your SparkPelican blog …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Learn how to deploy your SparkPelican blog to GitHub Pages with this comprehensive step-by-step guide. Covers initial setup, configuration, deployment process, and troubleshooting.
author: "Infinity Spark"
readingTime: "10 min read"
tags: ["Deployment", "GitHub Pages", "Pelican", "Tutorial", "DevOps"]&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Complete Guide: How to Deploy SparkPelican to GitHub Pages&lt;/h1&gt;
&lt;p&gt;Deploying your SparkPelican blog to GitHub Pages is straightforward and automated. This guide covers everything from initial repository setup to ongoing deployment workflows, ensuring your AI-powered blog is live and accessible to the world.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before deploying to GitHub Pages, ensure you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GitHub account&lt;/strong&gt; with a repository for your blog&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt; installed and configured on your system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub CLI&lt;/strong&gt; (&lt;code&gt;gh&lt;/code&gt;) installed for seamless deployment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SparkPelican project&lt;/strong&gt; set up and working locally&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All dependencies installed&lt;/strong&gt; (&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Method 1: Initial Repository Setup&lt;/h2&gt;
&lt;h3&gt;Step 1: Create a GitHub Repository&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Go to GitHub.com&lt;/strong&gt; and sign in to your account&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Click "New repository"&lt;/strong&gt; or use the "+" icon in the top right&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Choose a repository name&lt;/strong&gt; (e.g., &lt;code&gt;yourusername.github.io&lt;/code&gt; for personal pages)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make it public&lt;/strong&gt; (required for free GitHub Pages)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don't initialize&lt;/strong&gt; with README, .gitignore, or license (you already have these)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Click "Create repository"&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 2: Connect Local Repository to GitHub&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Navigate to your SparkPelican project&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/path/to/your/sparkpelican

&lt;span class="c1"&gt;# Add GitHub repository as remote (replace with your actual repo URL)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;https://github.com/yourusername/your-repo-name.git

&lt;span class="c1"&gt;# Verify remote was added&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;-v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Push Your Code to GitHub&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Add all files to git (if not already done)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.

&lt;span class="c1"&gt;# Commit your changes&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Initial commit: Add SparkPelican blog&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Push to GitHub&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Method 2: Deploy to GitHub Pages&lt;/h2&gt;
&lt;h3&gt;Step 1: Install GitHub CLI (if not installed)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# On macOS&lt;/span&gt;
brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;gh

&lt;span class="c1"&gt;# On Ubuntu/Debian&lt;/span&gt;
curl&lt;span class="w"&gt; &lt;/span&gt;-fsSL&lt;span class="w"&gt; &lt;/span&gt;https://cli.github.com/packages/githubcli-archive-keyring.gpg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;dd&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/share/keyrings/githubcli-archive-keyring.gpg
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;deb [arch=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dpme&lt;span class="w"&gt; &lt;/span&gt;-print-architecture&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;tee&lt;span class="w"&gt; &lt;/span&gt;/etc/apt/sources.list.d/githubcli.list&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;update
sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;gh

&lt;span class="c1"&gt;# On Windows (using winget)&lt;/span&gt;
winget&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--id&lt;span class="w"&gt; &lt;/span&gt;GitHub.cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2: Authenticate GitHub CLI&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Authenticate with GitHub&lt;/span&gt;
gh&lt;span class="w"&gt; &lt;/span&gt;auth&lt;span class="w"&gt; &lt;/span&gt;login

&lt;span class="c1"&gt;# Follow the prompts:&lt;/span&gt;
&lt;span class="c1"&gt;# - Choose &amp;quot;GitHub.com&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# - Choose &amp;quot;HTTPS&amp;quot; as your preferred protocol&lt;/span&gt;
&lt;span class="c1"&gt;# - Sign in with your GitHub credentials&lt;/span&gt;
&lt;span class="c1"&gt;# - Authorize the GitHub CLI when prompted&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Deploy Using Invoke Task&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Deploy to GitHub Pages (single command!)&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;What this command does:&lt;/strong&gt;
1. &lt;strong&gt;Builds production version&lt;/strong&gt; using &lt;code&gt;publishconf.py&lt;/code&gt; settings
2. &lt;strong&gt;Validates all titles&lt;/strong&gt; to ensure compatibility
3. &lt;strong&gt;Generates static site&lt;/strong&gt; in the output directory
4. &lt;strong&gt;Imports to gh-pages branch&lt;/strong&gt; using ghp-import
5. &lt;strong&gt;Pushes to GitHub&lt;/strong&gt; automatically&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;🔍&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Validating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;titles&lt;/span&gt;...
✅&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;All&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;titles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;properly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;formatted&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
✅&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;All&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;validations&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;passed&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
🚀&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Pelican&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Validation&lt;/span&gt;
&lt;span class="o"&gt;========================================&lt;/span&gt;
✅&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;All&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;titles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;properly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;formatted&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
⠋&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Generating&lt;/span&gt;...
&lt;span class="nv"&gt;Done&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Processed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;articles&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;drafts&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;hidden&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;articles&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pages&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;hidden&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;seconds&lt;/span&gt;.
✅&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Site&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;built&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;successfully&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;production&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
🚀&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Deploying&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GitHub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Pages&lt;/span&gt;...
✅&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Deployment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;completed&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;site&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;live&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;at&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;https&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;yourusername&lt;/span&gt;.&lt;span class="nv"&gt;github&lt;/span&gt;.&lt;span class="nv"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Method 3: Manual Deployment (Alternative)&lt;/h2&gt;
&lt;p&gt;If you prefer more control over the deployment process:&lt;/p&gt;
&lt;h3&gt;Step 1: Build Production Version&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Build using production settings&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;preview
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2: Install ghp-import (if not installed)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ghp-import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Import and Push to GitHub Pages&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import output directory to gh-pages branch&lt;/span&gt;
ghp-import&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;gh-pages&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Publish site on &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="w"&gt; &lt;/span&gt;+%Y-%m-%d&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;--no-jekyll&lt;span class="w"&gt; &lt;/span&gt;-p

&lt;span class="c1"&gt;# Alternative manual method:&lt;/span&gt;
&lt;span class="c1"&gt;# ghp-import -b gh-pages -m &amp;quot;Update site&amp;quot; output --no-jekyll&lt;/span&gt;
&lt;span class="c1"&gt;# git push origin gh-pages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Method 4: Automated Deployment Workflow&lt;/h2&gt;
&lt;h3&gt;Step 1: Create GitHub Actions Workflow&lt;/h3&gt;
&lt;p&gt;Create &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy to GitHub Pages&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="nt"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;read&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;write&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;id-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;write&lt;/span&gt;

&lt;span class="nt"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;cancel-in-progress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v4&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup Python&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v4&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;3.9&amp;#39;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependencies&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;python -m pip install --upgrade pip&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;pip install -r requirements.txt&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build site&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;invoke preview&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup Pages&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/configure-pages@v4&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Upload artifact&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/upload-pages-artifact@v3&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;./output&amp;#39;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;github-pages&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.deployment.outputs.page_url }}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;needs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;build&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy to GitHub Pages&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;deployment&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/deploy-pages@v4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2: Enable GitHub Pages&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Go to your repository settings&lt;/strong&gt; on GitHub&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Navigate to "Pages"&lt;/strong&gt; in the left sidebar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Under "Source"&lt;/strong&gt;, select "GitHub Actions"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Save&lt;/strong&gt; the settings&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 3: Trigger Deployment&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Push any changes to trigger deployment&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Trigger GitHub Pages deployment&amp;quot;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Configuration Settings&lt;/h2&gt;
&lt;h3&gt;Production Configuration (&lt;code&gt;publishconf.py&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Ensure your &lt;code&gt;publishconf.py&lt;/code&gt; has the correct settings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Site URL for production&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://yourusername.github.io&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Disable feeds for GitHub Pages (optional)&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

&lt;span class="c1"&gt;# Enable relative URLs (important for GitHub Pages)&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Repository Settings&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;For User/Organization Pages:&lt;/strong&gt;
- Repository name: &lt;code&gt;username.github.io&lt;/code&gt;
- Site URL: &lt;code&gt;https://username.github.io&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For Project Pages:&lt;/strong&gt;
- Repository name: &lt;code&gt;any-name&lt;/code&gt;
- Site URL: &lt;code&gt;https://username.github.io/repository-name&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Troubleshooting Common Issues&lt;/h2&gt;
&lt;h3&gt;Problem: "gh command not found"&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Install GitHub CLI&lt;/span&gt;
&lt;span class="c1"&gt;# macOS&lt;/span&gt;
brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;gh

&lt;span class="c1"&gt;# Ubuntu/Debian&lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;gh

&lt;span class="c1"&gt;# Then authenticate&lt;/span&gt;
gh&lt;span class="w"&gt; &lt;/span&gt;auth&lt;span class="w"&gt; &lt;/span&gt;login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Problem: "Permission denied" or "Could not read from remote repository"&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Check if you&amp;#39;re authenticated&lt;/span&gt;
gh&lt;span class="w"&gt; &lt;/span&gt;auth&lt;span class="w"&gt; &lt;/span&gt;status

&lt;span class="c1"&gt;# Re-authenticate if needed&lt;/span&gt;
gh&lt;span class="w"&gt; &lt;/span&gt;auth&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;logout&lt;/span&gt;
gh&lt;span class="w"&gt; &lt;/span&gt;auth&lt;span class="w"&gt; &lt;/span&gt;login

&lt;span class="c1"&gt;# Check remote URL&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;-v

&lt;span class="c1"&gt;# Fix remote URL if incorrect&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;set-url&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;https://github.com/username/repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Problem: Site not loading after deployment&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Common causes:&lt;/strong&gt;
1. &lt;strong&gt;Build errors&lt;/strong&gt; - Check the build output for errors
2. &lt;strong&gt;Wrong branch&lt;/strong&gt; - Ensure you're deploying to &lt;code&gt;gh-pages&lt;/code&gt;
3. &lt;strong&gt;Site URL mismatch&lt;/strong&gt; - Verify &lt;code&gt;SITEURL&lt;/code&gt; in &lt;code&gt;publishconf.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debugging steps:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Check build output&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;preview

&lt;span class="c1"&gt;# Verify generated files&lt;/span&gt;
ls&lt;span class="w"&gt; &lt;/span&gt;-la&lt;span class="w"&gt; &lt;/span&gt;output/

&lt;span class="c1"&gt;# Check if index.html exists&lt;/span&gt;
ls&lt;span class="w"&gt; &lt;/span&gt;output/index.html

&lt;span class="c1"&gt;# Validate HTML (optional)&lt;/span&gt;
curl&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://yourusername.github.io&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;head&lt;span class="w"&gt; &lt;/span&gt;-20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Problem: "Repository not found" or "Access denied"&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Verify repository exists and is accessible&lt;/span&gt;
gh&lt;span class="w"&gt; &lt;/span&gt;repo&lt;span class="w"&gt; &lt;/span&gt;view&lt;span class="w"&gt; &lt;/span&gt;yourusername/your-repo-name

&lt;span class="c1"&gt;# Check if repository is public&lt;/span&gt;
gh&lt;span class="w"&gt; &lt;/span&gt;repo&lt;span class="w"&gt; &lt;/span&gt;edit&lt;span class="w"&gt; &lt;/span&gt;yourusername/your-repo-name&lt;span class="w"&gt; &lt;/span&gt;--visibility&lt;span class="w"&gt; &lt;/span&gt;public

&lt;span class="c1"&gt;# Verify you have admin access to the repository&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Problem: CSS/JavaScript not loading&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Ensure RELATIVE_URLS is set in publishconf.py&lt;/span&gt;
&lt;span class="nv"&gt;RELATIVE_URLS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;True

&lt;span class="c1"&gt;# Rebuild and redeploy&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;preview
invoke&lt;span class="w"&gt; &lt;/span&gt;gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;h3&gt;Deployment Workflow&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Always test locally&lt;/strong&gt; before deploying&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use production settings&lt;/strong&gt; (&lt;code&gt;invoke preview&lt;/code&gt;) for deployment builds&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Validate titles&lt;/strong&gt; before each deployment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Check file sizes&lt;/strong&gt; - GitHub Pages has a 1GB limit&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitor deployment status&lt;/strong&gt; in repository settings&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Repository Organization&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sparkpelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Utility&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;workflows&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Generated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pelicanconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publishconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Security Considerations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Keep API keys&lt;/strong&gt; out of version control&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use environment variables&lt;/strong&gt; for sensitive data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regularly update dependencies&lt;/strong&gt; for security patches&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitor access logs&lt;/strong&gt; if needed&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Advanced Deployment Options&lt;/h2&gt;
&lt;h3&gt;Custom Domain Setup&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Buy a domain&lt;/strong&gt; from a registrar&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: Add CNAME file&lt;/strong&gt; to your repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourdomain.com&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;content/pages/CNAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Configure DNS:&lt;/strong&gt;
- &lt;strong&gt;A Record:&lt;/strong&gt; &lt;code&gt;185.199.108.153&lt;/code&gt;
- &lt;strong&gt;A Record:&lt;/strong&gt; &lt;code&gt;185.199.109.153&lt;/code&gt;
- &lt;strong&gt;A Record:&lt;/strong&gt; &lt;code&gt;185.199.110.153&lt;/code&gt;
- &lt;strong&gt;A Record:&lt;/strong&gt; &lt;code&gt;185.199.111.153&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4: Enable custom domain in GitHub:&lt;/strong&gt;
1. Go to repository Settings → Pages
2. Under "Custom domain", enter &lt;code&gt;yourdomain.com&lt;/code&gt;
3. Click "Save"&lt;/p&gt;
&lt;h3&gt;Automated Deployment with GitHub Actions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Benefits:&lt;/strong&gt;
- &lt;strong&gt;Automatic deployment&lt;/strong&gt; on every push to main
- &lt;strong&gt;No local dependencies&lt;/strong&gt; required
- &lt;strong&gt;Consistent environment&lt;/strong&gt; for builds
- &lt;strong&gt;Easy rollback&lt;/strong&gt; capabilities&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Setup:&lt;/strong&gt;
1. Create &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt; (see Method 4 above)
2. Push to main branch to trigger deployment
3. Monitor progress in Actions tab&lt;/p&gt;
&lt;h2&gt;Monitoring and Maintenance&lt;/h2&gt;
&lt;h3&gt;Check Deployment Status&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Check GitHub Pages status&lt;/span&gt;
gh&lt;span class="w"&gt; &lt;/span&gt;repo&lt;span class="w"&gt; &lt;/span&gt;view&lt;span class="w"&gt; &lt;/span&gt;yourusername/your-repo-name&lt;span class="w"&gt; &lt;/span&gt;--web

&lt;span class="c1"&gt;# Or visit repository Settings → Pages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;View Site Analytics&lt;/h3&gt;
&lt;p&gt;GitHub Pages doesn't provide built-in analytics, but you can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Add Google Analytics&lt;/strong&gt; to your Pelican theme&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use GitHub's traffic insights&lt;/strong&gt; (for public repositories)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitor with external services&lt;/strong&gt; like Cloudflare Analytics&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Regular Maintenance Tasks&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Update dependencies&lt;/strong&gt; monthly:
   &lt;code&gt;bash
   pip install -r requirements.txt --upgrade
   npm update&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Check for broken links&lt;/strong&gt; periodically:
   ```bash
   # Install link checker
   pip install linkchecker&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;# Check your live site
   linkchecker https://yourusername.github.io
   ```&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Monitor site performance&lt;/strong&gt; using tools like:&lt;/li&gt;
&lt;li&gt;Google PageSpeed Insights&lt;/li&gt;
&lt;li&gt;GTmetrix&lt;/li&gt;
&lt;li&gt;WebPageTest&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Quick Reference Commands&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# One-command deployment&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;gh-pages

&lt;span class="c1"&gt;# Build only (for testing)&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;preview

&lt;span class="c1"&gt;# Check deployment status&lt;/span&gt;
gh&lt;span class="w"&gt; &lt;/span&gt;repo&lt;span class="w"&gt; &lt;/span&gt;view&lt;span class="w"&gt; &lt;/span&gt;yourusername/repo&lt;span class="w"&gt; &lt;/span&gt;--web

&lt;span class="c1"&gt;# View site in browser&lt;/span&gt;
gh&lt;span class="w"&gt; &lt;/span&gt;repo&lt;span class="w"&gt; &lt;/span&gt;view&lt;span class="w"&gt; &lt;/span&gt;yourusername/repo&lt;span class="w"&gt; &lt;/span&gt;--web

&lt;span class="c1"&gt;# Manual deployment (alternative)&lt;/span&gt;
ghp-import&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;gh-pages&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Update site&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;--no-jekyll&lt;span class="w"&gt; &lt;/span&gt;-p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Getting Help&lt;/h2&gt;
&lt;h3&gt;Common Issues and Solutions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Build errors:&lt;/strong&gt; Check Pelican output for specific error messages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Theme issues:&lt;/strong&gt; Verify theme files are properly configured&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Asset loading:&lt;/strong&gt; Ensure &lt;code&gt;RELATIVE_URLS = True&lt;/code&gt; in production config&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom domain:&lt;/strong&gt; Check DNS settings and GitHub configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Documentation Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GitHub Pages Documentation:&lt;/strong&gt; &lt;a href="https://docs.github.com/en/pages"&gt;Official Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pelican Deployment:&lt;/strong&gt; &lt;a href="https://docs.getpelican.com/en/stable/deploy.html"&gt;Deployment Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ghp-import:&lt;/strong&gt; &lt;a href="https://github.com/cwjohan/ghp-import"&gt;GitHub Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Community Support&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GitHub Community:&lt;/strong&gt; &lt;a href="https://github.community"&gt;Discussions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pelican Community:&lt;/strong&gt; &lt;a href="https://groups.google.com/forum/#!forum/pelican-users"&gt;Pelican Forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stack Overflow:&lt;/strong&gt; Tag &lt;code&gt;github-pages&lt;/code&gt; and &lt;code&gt;pelican&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Deploying SparkPelican to GitHub Pages is a seamless process that takes your AI-powered blog from local development to live production in minutes. The &lt;code&gt;invoke gh-pages&lt;/code&gt; command handles everything automatically, from building your site to pushing it live.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key advantages of this setup:&lt;/strong&gt;
- &lt;strong&gt;Free hosting&lt;/strong&gt; on GitHub Pages
- &lt;strong&gt;Automatic deployments&lt;/strong&gt; with one command
- &lt;strong&gt;Custom domains&lt;/strong&gt; supported
- &lt;strong&gt;SSL certificate&lt;/strong&gt; included automatically
- &lt;strong&gt;Global CDN&lt;/strong&gt; for fast loading worldwide&lt;/p&gt;
&lt;p&gt;Start with the simple &lt;code&gt;invoke gh-pages&lt;/code&gt; command, and your SparkPelican blog will be live and accessible to the world!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;This deployment guide was created using SparkPelican's AI-powered content generation system. For more information about SparkPelican, visit the &lt;a href="https://github.com/yoloinfinity55/sparkpelican"&gt;GitHub repository&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Complete Guide - How to Create New Blog Posts in SparkPelican</title><link href="https://yoloinfinity55.github.io/sparkpelican/complete-guide-how-to-create-new-blog-posts-in-sparkpelican.html" rel="alternate"/><published>2025-10-17T10:00:00+00:00</published><updated>2025-10-17T10:00:00+00:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-17:/sparkpelican/complete-guide-how-to-create-new-blog-posts-in-sparkpelican.html</id><summary type="html">&lt;p&gt;Learn all the methods for creating blog posts in SparkPelican, from simple command-line scripts to API integration and manual creation. This comprehensive guide covers every approach.
author: "Infinity Spark"
readingTime: "8 min read"
tags: ["Tutorial", "Blogging", "Pelican", "Content Creation", "Guide"]&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Complete Guide: How to Create New Blog Posts in SparkPelican …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;Learn all the methods for creating blog posts in SparkPelican, from simple command-line scripts to API integration and manual creation. This comprehensive guide covers every approach.
author: "Infinity Spark"
readingTime: "8 min read"
tags: ["Tutorial", "Blogging", "Pelican", "Content Creation", "Guide"]&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Complete Guide: How to Create New Blog Posts in SparkPelican&lt;/h1&gt;
&lt;p&gt;Creating blog posts in SparkPelican is straightforward and flexible, with multiple methods to suit different workflows. Whether you prefer simple command-line scripts, powerful task automation, API integration, or manual control, SparkPelican has you covered.&lt;/p&gt;
&lt;h2&gt;Method 1: Command Line Script (Easiest)&lt;/h2&gt;
&lt;h3&gt;Step 1: Basic Usage&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python&lt;span class="w"&gt; &lt;/span&gt;process_youtube_video.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.youtube.com/watch?v=VIDEO_ID&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2: Verify the post was created&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Check &lt;code&gt;content/posts/&lt;/code&gt; directory for the new &lt;code&gt;.md&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;The file will have front matter with title, date, author, and tags&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;🔄 Processing YouTube video: https://www.youtube.com/watch?v=dQw4w9WgXcQ
📹 Video ID: dQw4w9WgXcQ
📝 Extracting transcript...
✅ Transcript extracted (2847 characters)
🤖 Generating blog post...
✅ Blog post generated
💾 Post saved to: 2025-10-17-never-gonna-give-you-up.md
🎉 Video processing completed successfully!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Method 2: Invoke Tasks (Recommended)&lt;/h2&gt;
&lt;h3&gt;Step 1: Generate post with custom options&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;api-generate&lt;span class="w"&gt; &lt;/span&gt;--youtube-url&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.youtube.com/watch?v=VIDEO_ID&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Custom Title&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--category&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Technology&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--tags&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AI,Tutorial&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Available parameters:&lt;/strong&gt;
- &lt;code&gt;--youtube-url&lt;/code&gt;: The YouTube video URL (required)
- &lt;code&gt;--title&lt;/code&gt;: Custom title for the post (optional)
- &lt;code&gt;--category&lt;/code&gt;: Post category (default: "General")
- &lt;code&gt;--tags&lt;/code&gt;: Comma-separated list of tags (optional)&lt;/p&gt;
&lt;h3&gt;Step 2: Build the site to include your new post&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Preview your changes locally&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example with custom options:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;api-generate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--youtube-url&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.youtube.com/watch?v=VIDEO_ID&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Advanced AI Tutorial&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--category&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Technology&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;--tags&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AI,Machine Learning,Python&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Method 3: Manual Creation (Full Control)&lt;/h2&gt;
&lt;h3&gt;Step 1: Create a new markdown file&lt;/h3&gt;
&lt;p&gt;Create a file in &lt;code&gt;content/posts/&lt;/code&gt; with the naming convention: &lt;code&gt;YYYY-MM-DD-post-title.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example filename:&lt;/strong&gt; &lt;code&gt;2025-10-17-my-awesome-post.md&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Step 2: Add front matter metadata&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
title: Your Post Title Here
date: 2025-10-17T10:00:00.000Z
layout: post.njk
description: Brief description of your post content
author: &amp;quot;Your Name&amp;quot;
readingTime: &amp;quot;5 min read&amp;quot;
&lt;span class="gu"&gt;tags: [&amp;quot;Tag1&amp;quot;, &amp;quot;Tag2&amp;quot;, &amp;quot;Tag3&amp;quot;]&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Write your content&lt;/h3&gt;
&lt;p&gt;Add your blog post content in markdown format below the front matter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Required front matter fields:&lt;/strong&gt;
- &lt;code&gt;title&lt;/code&gt;: The post title
- &lt;code&gt;date&lt;/code&gt;: Publication date in ISO format
- &lt;code&gt;layout&lt;/code&gt;: Always &lt;code&gt;post.njk&lt;/code&gt; for blog posts
- &lt;code&gt;description&lt;/code&gt;: Brief summary for SEO
- &lt;code&gt;author&lt;/code&gt;: Author name
- &lt;code&gt;readingTime&lt;/code&gt;: Estimated reading time
- &lt;code&gt;tags&lt;/code&gt;: Array of relevant tags&lt;/p&gt;
&lt;h2&gt;Method 4: FastAPI Server (For Integration)&lt;/h2&gt;
&lt;h3&gt;Step 1: Start the API server&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;api-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Server endpoints:&lt;/strong&gt;
- Health check: &lt;code&gt;http://localhost:8001/health&lt;/code&gt;
- Generate post: &lt;code&gt;http://localhost:8001/generate&lt;/code&gt;
- Validate posts: &lt;code&gt;http://localhost:8001/validate&lt;/code&gt;
- API documentation: &lt;code&gt;http://localhost:8001/docs&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Step 2: Generate post via API&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-X&lt;span class="w"&gt; &lt;/span&gt;POST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://localhost:8001/generate&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;youtube_url&amp;quot;: &amp;quot;https://www.youtube.com/watch?v=VIDEO_ID&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;custom_title&amp;quot;: &amp;quot;Optional custom title&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;category&amp;quot;: &amp;quot;Technology&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;tags&amp;quot;: [&amp;quot;AI&amp;quot;, &amp;quot;Tutorial&amp;quot;]&lt;/span&gt;
&lt;span class="s1"&gt;  }&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;API response:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Post generated successfully&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2025-10-17-post-title.md&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Generated Post Title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;category&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Technology&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tutorial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Quality Assurance Steps&lt;/h2&gt;
&lt;h3&gt;Step 1: Validate titles&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;validate-titles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;What it checks:&lt;/strong&gt;
- No quotes in titles
- Proper formatting
- Consistency across all posts&lt;/p&gt;
&lt;h3&gt;Step 2: Fix any title issues (if needed)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;api-validate-posts&lt;span class="w"&gt; &lt;/span&gt;--fix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Validate API compatibility&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;api-validate-posts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Environment Setup&lt;/h2&gt;
&lt;h3&gt;Step 1: Install dependencies&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
npm&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2: Set your Gemini API key&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GEMINI_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;your_google_gemini_api_key_here&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Verify API key is set:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$GEMINI_API_KEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Development Workflow&lt;/h2&gt;
&lt;h3&gt;Step 1: Generate your post&lt;/h3&gt;
&lt;p&gt;Choose any method above to create your blog post.&lt;/p&gt;
&lt;h3&gt;Step 2: Build and serve locally&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;build
invoke&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Preview at http://localhost:8001&lt;/h3&gt;
&lt;p&gt;Open your browser and navigate to &lt;code&gt;http://localhost:8001&lt;/code&gt; to see your site with the new post.&lt;/p&gt;
&lt;h3&gt;Step 4: Make edits to your post file if needed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Edit the markdown file directly in &lt;code&gt;content/posts/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Update front matter or content as needed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step 5: Rebuild to see changes&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;rebuild
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Troubleshooting Common Issues&lt;/h2&gt;
&lt;h3&gt;Problem: "GEMINI_API_KEY not set"&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GEMINI_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;your_api_key_here&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Verify it's set:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$GEMINI_API_KEY&lt;/span&gt;
&lt;span class="c1"&gt;# Should show your API key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Problem: Title validation errors&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;api-validate-posts&lt;span class="w"&gt; &lt;/span&gt;--fix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Manual fix process:&lt;/strong&gt;
1. Check the error message for specific issues
2. Edit the problematic post files
3. Run validation again&lt;/p&gt;
&lt;h3&gt;Problem: Port conflicts&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Kill process using port 8001&lt;/span&gt;
lsof&lt;span class="w"&gt; &lt;/span&gt;-ti:8001&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-9

&lt;span class="c1"&gt;# Or use different port&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;api-server&lt;span class="w"&gt; &lt;/span&gt;--port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8002&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Problem: YouTube transcript not available&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Common causes:&lt;/strong&gt;
- Video doesn't have captions/subtitles
- Video is private or restricted
- Video ID is incorrect&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solutions:&lt;/strong&gt;
- Choose videos with captions enabled
- Verify the video URL is correct
- Try a different video&lt;/p&gt;
&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;h3&gt;Content Quality&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Choose videos with clear audio&lt;/strong&gt; and good captions for better AI generation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review generated content&lt;/strong&gt; before publishing - AI isn't perfect&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use descriptive titles&lt;/strong&gt; that clearly indicate the post content&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add relevant tags&lt;/strong&gt; to help with organization and SEO&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Use background processing&lt;/strong&gt; for large batches of videos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitor API rate limits&lt;/strong&gt; for Gemini API (usually 60 requests per minute)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache transcripts&lt;/strong&gt; when possible to avoid re-processing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batch similar operations&lt;/strong&gt; together&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Workflow Efficiency&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Validate titles&lt;/strong&gt; before building to catch issues early&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test locally&lt;/strong&gt; before deploying to production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use consistent naming&lt;/strong&gt; for post files&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep front matter&lt;/strong&gt; updated and accurate&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Advanced Usage&lt;/h2&gt;
&lt;h3&gt;Batch Processing Multiple Videos&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;process_youtube_video&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;process_youtube_video&lt;/span&gt;

&lt;span class="n"&gt;videos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://youtube.com/watch?v=video1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://youtube.com/watch?v=video2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://youtube.com/watch?v=video3&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;batch_process&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;video_url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;process_youtube_video&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;✅ Processed: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;❌ Failed: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batch_process&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Custom Post Templates&lt;/h3&gt;
&lt;p&gt;You can modify the AI generation prompts in &lt;code&gt;myapp/ai_generator.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Customize the generation prompt&lt;/span&gt;
&lt;span class="n"&gt;custom_prompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;Generate a blog post based on this transcript: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;transcript&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;Style: Technical tutorial&lt;/span&gt;
&lt;span class="s2"&gt;Length: 800-1200 words&lt;/span&gt;
&lt;span class="s2"&gt;Include code examples and practical steps&lt;/span&gt;
&lt;span class="s2"&gt;Focus on: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;File Structure Reference&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;sparkpelican&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;live&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;here&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;YYYY&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;MM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;DD&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Individual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pelicanconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Site&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configuration&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Available&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;process_youtube_video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Simple&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;generation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;FastAPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dependencies&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Quick Reference Commands&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Generate post from YouTube&lt;/span&gt;
python&lt;span class="w"&gt; &lt;/span&gt;process_youtube_video.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;YOUTUBE_URL&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Generate with custom options&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;api-generate&lt;span class="w"&gt; &lt;/span&gt;--youtube-url&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--tags&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tag1,tag2&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Build site&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;build

&lt;span class="c1"&gt;# Serve locally&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;serve

&lt;span class="c1"&gt;# Validate posts&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;validate-titles

&lt;span class="c1"&gt;# Fix validation issues&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;api-validate-posts&lt;span class="w"&gt; &lt;/span&gt;--fix

&lt;span class="c1"&gt;# Start API server&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;api-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Getting Help&lt;/h2&gt;
&lt;h3&gt;Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;API Documentation:&lt;/strong&gt; &lt;code&gt;http://localhost:8001/docs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Repository:&lt;/strong&gt; &lt;a href="https://github.com/yoloinfinity55/sparkpelican"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pelican Documentation:&lt;/strong&gt; &lt;a href="https://docs.getpelican.com/"&gt;Official Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Common Next Steps&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Review generated posts&lt;/strong&gt; in &lt;code&gt;content/posts/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customize content&lt;/strong&gt; as needed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build and preview&lt;/strong&gt; your site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deploy to production&lt;/strong&gt; when ready&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This comprehensive guide covers every method for creating blog posts in SparkPelican, from the simplest approaches for beginners to advanced integration options for developers. Choose the method that best fits your workflow and start creating content efficiently!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;This guide was created using SparkPelican's AI-powered content generation system. For more information about SparkPelican, visit the &lt;a href="https://github.com/yoloinfinity55/sparkpelican"&gt;GitHub repository&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Complete Guide to Using SparkPelican: AI-Powered Blog Post Generation</title><link href="https://yoloinfinity55.github.io/sparkpelican/complete-guide-to-using-sparkpelican-ai-powered-blog-post-generation.html" rel="alternate"/><published>2025-10-15T06:37:00+00:00</published><updated>2025-10-15T06:37:00+00:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-15:/sparkpelican/complete-guide-to-using-sparkpelican-ai-powered-blog-post-generation.html</id><summary type="html">&lt;p&gt;Learn how to use SparkPelican to automatically generate blog posts from YouTube videos using AI. This comprehensive guide covers installation, configuration, and all usage methods.
author: "Infinity Spark"
readingTime: "15 min read"
tags: ["AI", "Pelican", "YouTube", "Automation", "Tutorial"]&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Complete Guide to Using SparkPelican: AI-Powered Blog Post Generation&lt;/h1&gt;
&lt;p&gt;SparkPelican is an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Learn how to use SparkPelican to automatically generate blog posts from YouTube videos using AI. This comprehensive guide covers installation, configuration, and all usage methods.
author: "Infinity Spark"
readingTime: "15 min read"
tags: ["AI", "Pelican", "YouTube", "Automation", "Tutorial"]&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Complete Guide to Using SparkPelican: AI-Powered Blog Post Generation&lt;/h1&gt;
&lt;p&gt;SparkPelican is an innovative AI-powered blog post generation system that automatically creates blog posts from YouTube videos. It combines YouTube transcript extraction, AI content generation, and Pelican static site generation to create a seamless content creation workflow.&lt;/p&gt;
&lt;h2&gt;What Makes SparkPelican Special?&lt;/h2&gt;
&lt;p&gt;SparkPelican revolutionizes content creation by:
- &lt;strong&gt;Automatically extracting transcripts&lt;/strong&gt; from YouTube videos
- &lt;strong&gt;Using Google Gemini AI&lt;/strong&gt; to generate high-quality blog posts
- &lt;strong&gt;Seamlessly integrating&lt;/strong&gt; with Pelican static site generator
- &lt;strong&gt;Providing multiple usage methods&lt;/strong&gt; for different workflows
- &lt;strong&gt;Including built-in validation&lt;/strong&gt; and quality checks&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before getting started with SparkPelican, ensure you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Python 3.8+&lt;/strong&gt; installed on your system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Node.js and npm&lt;/strong&gt; for CSS building (Tailwind CSS)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt; for version control&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Gemini API Key&lt;/strong&gt; for AI content generation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;h3&gt;Step 1: Clone the Repository&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/yoloinfinity55/sparkpelican.git
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sparkpelican
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 2: Install Python Dependencies&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Install Node.js Dependencies&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 4: Set Environment Variables&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GEMINI_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;your_google_gemini_api_key_here&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Quick Start&lt;/h2&gt;
&lt;h3&gt;Method 1: Command Line Script (Easiest)&lt;/h3&gt;
&lt;p&gt;Generate a blog post from any YouTube video with a single command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python&lt;span class="w"&gt; &lt;/span&gt;process_youtube_video.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.youtube.com/watch?v=VIDEO_ID&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This script will:
1. Extract the transcript from the YouTube video
2. Generate AI content using Gemini
3. Save a properly formatted markdown file to &lt;code&gt;content/posts/&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Method 2: Using Invoke Tasks (Recommended)&lt;/h3&gt;
&lt;p&gt;For more control and additional features:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Generate a post with custom options&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;api-generate&lt;span class="w"&gt; &lt;/span&gt;--youtube-url&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.youtube.com/watch?v=VIDEO_ID&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Custom Title&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--category&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Technology&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--tags&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AI,Tutorial&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Build the site&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;build

&lt;span class="c1"&gt;# Serve locally&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Method 3: FastAPI Server (For Integration)&lt;/h3&gt;
&lt;p&gt;Start the API server for web-based usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;api-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then make POST requests to &lt;code&gt;http://localhost:8001/generate&lt;/code&gt; with your YouTube URL.&lt;/p&gt;
&lt;h2&gt;Understanding the Architecture&lt;/h2&gt;
&lt;p&gt;SparkPelican consists of several key components:&lt;/p&gt;
&lt;h3&gt;Core Components&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;FastAPI Backend&lt;/strong&gt; (&lt;code&gt;myapp/main.py&lt;/code&gt;)
- REST API server with endpoints for post generation and validation
- Background processing for video content
- CORS middleware for web integration&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pelican Integration&lt;/strong&gt; (&lt;code&gt;pelicanconf.py&lt;/code&gt;)
- Static site generator configuration
- Custom theme integration
- Feed and pagination settings&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Task Automation&lt;/strong&gt; (&lt;code&gt;tasks.py&lt;/code&gt;)
- Invoke-based command system
- Build, serve, and deployment tasks
- Title validation and fixing&lt;/p&gt;
&lt;h2&gt;Usage Methods in Detail&lt;/h2&gt;
&lt;h3&gt;Command Line Script&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;process_youtube_video.py&lt;/code&gt; script provides the simplest entry point:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python&lt;span class="w"&gt; &lt;/span&gt;process_youtube_video.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;YOUTUBE_URL&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;
- Automatic transcript extraction
- AI content generation with Gemini
- Markdown file creation in &lt;code&gt;content/posts/&lt;/code&gt;
- Automatic title and slug generation
- Error handling and logging&lt;/p&gt;
&lt;h3&gt;Invoke Tasks&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;tasks.py&lt;/code&gt; file provides a comprehensive task system:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Post Generation:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;api-generate&lt;span class="w"&gt; &lt;/span&gt;--youtube-url&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Custom Title&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--category&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Tech&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--tags&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AI,Machine Learning&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Site Management:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Build the site&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;serve&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Serve locally on port 8001&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;preview&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# Build for production&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;clean&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Remove generated files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Quality Assurance:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;validate-titles&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="c1"&gt;# Check title formatting&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;api-validate-posts&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="c1"&gt;# Validate API compatibility&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;api-validate-posts&lt;span class="w"&gt; &lt;/span&gt;--fix&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="c1"&gt;# Auto-fix title issues&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;FastAPI Server&lt;/h3&gt;
&lt;p&gt;For programmatic access or web integration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;api-server&lt;span class="w"&gt; &lt;/span&gt;--host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0&lt;span class="w"&gt; &lt;/span&gt;--port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8001&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Available endpoints:&lt;/strong&gt;
- &lt;code&gt;GET /health&lt;/code&gt; - Health check
- &lt;code&gt;POST /generate&lt;/code&gt; - Generate post from YouTube URL
- &lt;code&gt;POST /validate&lt;/code&gt; - Validate front matter
- &lt;code&gt;GET /docs&lt;/code&gt; - Interactive API documentation&lt;/p&gt;
&lt;h2&gt;API Integration Examples&lt;/h2&gt;
&lt;h3&gt;Generate Post via API&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-X&lt;span class="w"&gt; &lt;/span&gt;POST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://localhost:8001/generate&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;youtube_url&amp;quot;: &amp;quot;https://www.youtube.com/watch?v=VIDEO_ID&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;custom_title&amp;quot;: &amp;quot;Optional custom title&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;category&amp;quot;: &amp;quot;Technology&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;tags&amp;quot;: [&amp;quot;AI&amp;quot;, &amp;quot;Tutorial&amp;quot;]&lt;/span&gt;
&lt;span class="s1"&gt;  }&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Validate Front Matter&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-X&lt;span class="w"&gt; &lt;/span&gt;POST&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://localhost:8001/validate&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;front_matter&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;title&amp;quot;: &amp;quot;Post Title&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;date&amp;quot;: &amp;quot;2024-01-01T00:00:00&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;      &amp;quot;author&amp;quot;: &amp;quot;Author Name&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;    }&lt;/span&gt;
&lt;span class="s1"&gt;  }&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Development Workflow&lt;/h2&gt;
&lt;h3&gt;Project Structure&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sparkpelican/
├── content/                 # Pelican content directory
│   ├── pages/              # Static pages
│   └── posts/              # Blog posts (markdown files)
├── myapp/                  # FastAPI application
│   ├── main.py            # API server
│   ├── ai_generator.py    # AI content generation
│   ├── youtube_transcript.py  # YouTube integration
│   └── pelican_integrator.py  # Pelican integration
├── themes/                 # Pelican themes
│   └── sparkpelican-theme/    # Custom theme with Tailwind CSS
├── scripts/                # Utility scripts
├── output/                 # Generated site (after build)
└── tasks.py               # Invoke tasks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;CSS Development&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Build CSS:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build:css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Watch for changes:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;watch:css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Customizing AI Generation&lt;/h3&gt;
&lt;p&gt;You can modify the AI prompts in &lt;code&gt;myapp/ai_generator.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Customize the generation prompt&lt;/span&gt;
&lt;span class="n"&gt;custom_prompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;Generate a blog post based on this transcript: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;transcript&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;Style: Technical tutorial&lt;/span&gt;
&lt;span class="s2"&gt;Length: 800-1200 words&lt;/span&gt;
&lt;span class="s2"&gt;Include code examples and practical steps&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Deployment Options&lt;/h2&gt;
&lt;h3&gt;Development Server&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Live reload development&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;livereload

&lt;span class="c1"&gt;# Basic development serving&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;reserve&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Builds and serves&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Production Deployment&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Build for production&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;preview

&lt;span class="c1"&gt;# Deploy to GitHub Pages&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;gh-pages

&lt;span class="c1"&gt;# Custom deployment (modify tasks.py for your needs)&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Troubleshooting Common Issues&lt;/h2&gt;
&lt;h3&gt;1. Missing API Key&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt; "GEMINI_API_KEY not set"
&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GEMINI_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;your_api_key_here&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2. Title Validation Errors&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt; "Title validation failed"
&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;api-validate-posts&lt;span class="w"&gt; &lt;/span&gt;--fix&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Auto-fix title formatting&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3. YouTube Transcript Issues&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt; "YouTube transcript not available"
&lt;strong&gt;Solutions:&lt;/strong&gt;
- Ensure the video has captions/subtitles enabled
- Check if the video is publicly accessible
- Try a different video URL
- Verify the video ID is correct&lt;/p&gt;
&lt;h3&gt;4. Port Conflicts&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt; "Port already in use"
&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Kill process using port 8001&lt;/span&gt;
lsof&lt;span class="w"&gt; &lt;/span&gt;-ti:8001&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-9

&lt;span class="c1"&gt;# Or use different port&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;api-server&lt;span class="w"&gt; &lt;/span&gt;--port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8002&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Advanced Usage&lt;/h2&gt;
&lt;h3&gt;Batch Processing Multiple Videos&lt;/h3&gt;
&lt;p&gt;Create a script to process multiple videos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;process_youtube_video&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;process_youtube_video&lt;/span&gt;

&lt;span class="n"&gt;videos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://youtube.com/watch?v=video1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://youtube.com/watch?v=video2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://youtube.com/watch?v=video3&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;batch_process&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;video_url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;process_youtube_video&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;✅ Processed: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;❌ Failed: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;batch_process&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Custom Post Processing&lt;/h3&gt;
&lt;p&gt;Add custom logic in &lt;code&gt;myapp/pelican_integrator.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;custom_post_processing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Add SEO metadata&lt;/span&gt;
    &lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seo_description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_seo_description&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="c1"&gt;# Add reading time calculation&lt;/span&gt;
    &lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reading_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_reading_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;post_data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Integration with External Tools&lt;/h3&gt;
&lt;p&gt;SparkPelican's API can be integrated with:
- &lt;strong&gt;Content management systems&lt;/strong&gt;
- &lt;strong&gt;Social media automation tools&lt;/strong&gt;
- &lt;strong&gt;Custom web applications&lt;/strong&gt;
- &lt;strong&gt;CI/CD pipelines&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;h3&gt;Content Quality&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Choose videos with clear audio&lt;/strong&gt; and good captions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review generated content&lt;/strong&gt; before publishing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customize AI prompts&lt;/strong&gt; for your specific use case&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use descriptive titles&lt;/strong&gt; and proper tagging&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Use background processing&lt;/strong&gt; for large batches&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitor API rate limits&lt;/strong&gt; for Gemini API&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache transcripts&lt;/strong&gt; when possible&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batch similar operations&lt;/strong&gt; together&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Maintenance&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Regularly update dependencies&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitor for API changes&lt;/strong&gt; in YouTube and Gemini&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Backup your content&lt;/strong&gt; regularly&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep your API keys secure&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Getting Help&lt;/h2&gt;
&lt;h3&gt;Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;API Documentation:&lt;/strong&gt; &lt;code&gt;http://localhost:8001/docs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Repository:&lt;/strong&gt; &lt;a href="https://github.com/yoloinfinity55/sparkpelican"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pelican Documentation:&lt;/strong&gt; &lt;a href="https://docs.getpelican.com/"&gt;Official Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Community Support&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Check existing blog posts in &lt;code&gt;content/posts/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Review configuration files for examples&lt;/li&gt;
&lt;li&gt;Test with sample videos first&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;p&gt;SparkPelican is an open-source project. Contributions are welcome:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fork the repository&lt;/li&gt;
&lt;li&gt;Create a feature branch&lt;/li&gt;
&lt;li&gt;Make your improvements&lt;/li&gt;
&lt;li&gt;Test thoroughly&lt;/li&gt;
&lt;li&gt;Submit a pull request&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;SparkPelican provides a powerful yet easy-to-use solution for AI-powered content generation. Whether you're a developer looking to automate your blog workflow or a content creator wanting to leverage AI for post generation, SparkPelican offers the flexibility and features you need.&lt;/p&gt;
&lt;p&gt;Start with the simple command-line script for immediate results, then explore the API and task system for more advanced workflows. The combination of YouTube transcript extraction, AI content generation, and Pelican integration makes SparkPelican a unique and valuable tool in the modern content creation landscape.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;This guide was automatically generated using SparkPelican's AI-powered content generation system. For more information about SparkPelican, visit the &lt;a href="https://github.com/yoloinfinity55/sparkpelican"&gt;GitHub repository&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Title 1: How to Use Claude for Effective Ai Coding &amp;...</title><link href="https://yoloinfinity55.github.io/sparkpelican/title-1-how-to-use-claude-for-effective-ai-coding.html" rel="alternate"/><published>2025-10-10T16:03:23.479863-04:00</published><updated>2025-10-10T16:03:23.479863-04:00</updated><author><name>AI Generated</name></author><id>tag:yoloinfinity55.github.io,2025-10-10:/sparkpelican/title-1-how-to-use-claude-for-effective-ai-coding.html</id><summary type="html">&lt;p&gt;Discover why the rapid evolution of AI models is reshaping the job market, and which platforms are leading the charge in this new era. Learn how Claude dominates AI coding, see the top contenders in chat, and understand Google's strategic push into enterprise AI with its comprehensive Gemini Enterprise suite. Equip yourself with the latest insights on model performance and enterprise solutions to make informed decisions for your projects and business.---&lt;/p&gt;</summary><content type="html">&lt;p&gt;Discover why the rapid evolution of AI models is reshaping the job market, and which platforms are leading the charge in this new era. Learn how Claude dominates AI coding, see the top contenders in chat, and understand Google's strategic push into enterprise AI with its comprehensive Gemini Enterprise suite. Equip yourself with the latest insights on model performance and enterprise solutions to make informed decisions for your projects and business.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This content is based on a YouTube video exploring important concepts and insights.&lt;/p&gt;
&lt;h2&gt;Key Points&lt;/h2&gt;
&lt;p&gt;Okay, artificial intelligence updates every Friday. Today, Friday, October 10th and uh the epigraph for today is there are no laws against outsourcing jobs to AI. That's why it happens so fast and as you see uh usually not many updates. So, LM arena leaderboard. So, what we see on this leaderboard first GLM 4.6 six. Uh it is here on the leaderboard but not as high as was predicted. Now there are two tables here. One is for chat and another is for coding. So for chat we have uh Gemini Claude and a lot of open AI yellow right and a lot of China open source models as you see on the bottom. Now for coding claude absolutely dominates. You see uh cloth set 4.5 and 4.1. Um that's what I'm using now. I'm using cloth set 4.5 and the pricing is the same as the previous uh set. So it's not very high. Uh you see Quen 3 is pretty high but this is quen 3 max which is not open source. Uh then we have claude again Gemini red 2.5 Pro. There are a lot of rumors about Gemini 3.0 zero maybe next week and then you see again a lot of uh China open source models open source is green. Okay. Uh next uh we had a event from Google Gemini and uh they basically made a new label called Gemini Enterprise which includes everything all their models all their tooling it's available globally for enterprise and it gives uh necessary security privacy uh and and and so on. their numbers, their growth uh is very very impressive. Uh so well generally that's what Google does. They used to have for example Google Adwords the small advertisement on the side of Google search but then they concentrated only on big businesses and it looks like this is their strategy to work with businesses right so uh they have models they have uh no code tools they have pre-built agents and tools to create new agents they integrate with uh Google workspace which is docs and Gmail and so on with Microsoft, SharePoint, Sub Oracle, Slack everything and you see governance and security and a lot of partners working with them. So yes, they're focusing on uh businesses as as they created workspace before uh so now they creating this Gemini enterprise for AI for businesses. uh OpenAI similar they had a dev day which is the annual conference where they introduced a lot of their tooling and again it's kind of you go to the chat and you have everything and you can do everything right and you can call external uh things like Spotify Zilo Canva whatever so you can edit or create documents uh you can record audio or video or generate something all in one place. Uh for example, Sora 2 now is available via API which is video generation. Uh you can edit code. Uh you can create um this agent&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;For the complete discussion, watch the &lt;a href="https://www.youtube.com/watch?v=QrGaeRMdfIc"&gt;original video&lt;/a&gt;.&lt;/p&gt;</content><category term="General"/><category term="youtube"/><category term="video"/><category term="content"/></entry><entry><title>Title 1: Complete Guide to Llm Leaderboards for...</title><link href="https://yoloinfinity55.github.io/sparkpelican/title-1-complete-guide-to-llm-leaderboards-for.html" rel="alternate"/><published>2025-10-10T15:50:26.895498-04:00</published><updated>2025-10-10T15:50:26.895498-04:00</updated><author><name>AI Generated</name></author><id>tag:yoloinfinity55.github.io,2025-10-10:/sparkpelican/title-1-complete-guide-to-llm-leaderboards-for.html</id><summary type="html">&lt;p&gt;As AI rapidly reshapes the job market, discover which models are truly leading the pack for chat and coding, and how Google is strategically positioning itself for enterprise dominance. This update highlights Claude's absolute dominance in AI coding and introduces Google's new Gemini Enterprise, a comprehensive, secure solution for global businesses. Read on to understand these critical shifts in the rapidly evolving AI ecosystem.---&lt;/p&gt;</summary><content type="html">&lt;p&gt;As AI rapidly reshapes the job market, discover which models are truly leading the pack for chat and coding, and how Google is strategically positioning itself for enterprise dominance. This update highlights Claude's absolute dominance in AI coding and introduces Google's new Gemini Enterprise, a comprehensive, secure solution for global businesses. Read on to understand these critical shifts in the rapidly evolving AI ecosystem.&lt;/p&gt;
&lt;p&gt;The artificial intelligence landscape is rapidly evolving, reshaping industries and redefining how work is performed. This post explores the latest advancements in AI models, enterprise solutions, and specialized hardware, alongside their profound implications for businesses and the future workforce. Readers will gain critical insights into emerging technologies and strategic shifts necessary to thrive in an AI-driven economy.&lt;/p&gt;
&lt;h2&gt;Key Takeaways&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AI Model Dominance:&lt;/strong&gt; Advanced models Claude 3 and Gemini continue to lead, with open-source alternatives rapidly closing the gap, especially in specialized areas coding and image generation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enterprise-Centric AI:&lt;/strong&gt; Major tech companies are consolidating AI offerings into comprehensive, secure, and globally available enterprise platforms, emphasizing deep integration with existing business tools.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficiency and Accessibility:&lt;/strong&gt; New architectural innovations, such as sparse attention and hybrid models, significantly reduce processing costs and memory usage, making advanced AI more accessible and efficient.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Workforce Transformation:&lt;/strong&gt; The job market is undergoing a radical shift from human execution to human curation and direction of AI systems, demanding new skills in AI management and collaboration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strategic Adaptation:&lt;/strong&gt; Businesses and individuals must pivot quickly, leveraging AI as a force multiplier and focusing on uniquely human capabilities creativity, strategy, and relationship building.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;AI Model Innovations and Enterprise Strategies&lt;/h2&gt;
&lt;p&gt;The AI model landscape continues its rapid evolution, marked by both proprietary advancements and robust open-source contributions. On the &lt;strong&gt;LM Arena leaderboard&lt;/strong&gt;, Claude 3 consistently demonstrates strong performance, particularly in coding, where it maintains a dominant position. Gemini models from Google also feature prominently, while a growing number of powerful open-source models, many originating from China, are increasingly competitive across various benchmarks. This blend of proprietary and open-source innovation fosters a dynamic environment for developers and enterprises.&lt;/p&gt;
&lt;p&gt;Google is strategically consolidating its AI offerings under &lt;strong&gt;Gemini Enterprise&lt;/strong&gt;, a comprehensive suite designed for global businesses. This platform integrates all of Google's AI models and tooling, providing essential security, privacy, and governance features. Gemini Enterprise aims to empower businesses with no-code development tools, pre-built agents, and frameworks for creating custom agents, all seamlessly integrated with Google Workspace, Microsoft, Oracle, and Slack ecosystems. This move reflects Google's focus on delivering end-to-end AI solutions tailored for large-scale corporate adoption.&lt;/p&gt;
&lt;p&gt;OpenAI similarly showcased significant advancements at its annual Dev Day, introducing an integrated suite of tools accessible through a unified chat interface. This platform allows users to perform diverse tasks, from editing documents and generating video with &lt;strong&gt;Sora 2 via API&lt;/strong&gt; to creating complex multi-agent systems. A notable introduction is the &lt;strong&gt;Agent Kit&lt;/strong&gt;, a workflow builder that enables the construction of pipelines where each element can be an AI agent. This facilitates the creation of sophisticated systems with multiple agents collaborating on tasks, akin to established workflow automation tools but with integrated AI capabilities.&lt;/p&gt;
&lt;p&gt;The market's confidence in AI is evident in OpenAI's recent valuation, reaching $500 billion following a substantial secondary share buy. This milestone positions OpenAI as the world's most valuable startup, surpassing other industry giants. Beyond foundational models, OpenAI is expanding into new functionalities, including in-chat shopping, allowing users to purchase products directly within the AI interface. This integration of commerce into conversational AI highlights a growing trend towards more comprehensive and utilitarian AI applications.&lt;/p&gt;
&lt;h2&gt;Advancements in Efficiency and Accessibility&lt;/h2&gt;
&lt;p&gt;Innovation in AI extends beyond raw model power to focus on efficiency, cost reduction, and broader accessibility. Google's &lt;strong&gt;Gemini 2.5&lt;/strong&gt; now includes a "computer use model," enabling the AI to interact directly with desktop environments. This capability allows Gemini to automate tasks that traditionally require human input, such as filling forms, manipulating dropdown menus, and testing UI flows, making it a powerful tool for streamlining operational processes.&lt;/p&gt;
&lt;p&gt;A significant breakthrough in efficiency comes from &lt;strong&gt;DeepSparse Attention&lt;/strong&gt;, a technique that can cut costs for long, complex tasks by up to 50%. Instead of&lt;/p&gt;</content><category term="General"/><category term="youtube"/><category term="video"/><category term="content"/></entry><entry><title>Okay, Artificial Intelligence Updates Every Friday</title><link href="https://yoloinfinity55.github.io/sparkpelican/okay-artificial-intelligence-updates-every-friday.html" rel="alternate"/><published>2025-10-10T15:39:01.424153-04:00</published><updated>2025-10-10T15:39:01.424153-04:00</updated><author><name>AI Generated</name></author><id>tag:yoloinfinity55.github.io,2025-10-10:/sparkpelican/okay-artificial-intelligence-updates-every-friday.html</id><summary type="html">&lt;p&gt;Today, Friday, October 10th and uh the epigraph for today is there are no laws against outsourcing jobs to AI. That's why it happens so fast and as you see uh usually not many updates.---&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, Friday, October 10th and uh the epigraph for today is there are no laws against outsourcing jobs to AI. That's why it happens so fast and as you see uh usually not many updates.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This content is based on a YouTube video exploring important concepts and insights.&lt;/p&gt;
&lt;h2&gt;Key Points&lt;/h2&gt;
&lt;p&gt;Okay, artificial intelligence updates every Friday. Today, Friday, October 10th and uh the epigraph for today is there are no laws against outsourcing jobs to AI. That's why it happens so fast and as you see uh usually not many updates. So, LM arena leaderboard. So, what we see on this leaderboard first GLM 4.6 six. Uh it is here on the leaderboard but not as high as was predicted. Now there are two tables here. One is for chat and another is for coding. So for chat we have uh Gemini Claude and a lot of open AI yellow right and a lot of China open source models as you see on the bottom. Now for coding claude absolutely dominates. You see uh cloth set 4.5 and 4.1. Um that's what I'm using now. I'm using cloth set 4.5 and the pricing is the same as the previous uh set. So it's not very high. Uh you see Quen 3 is pretty high but this is quen 3 max which is not open source. Uh then we have claude again Gemini red 2.5 Pro. There are a lot of rumors about Gemini 3.0 zero maybe next week and then you see again a lot of uh China open source models open source is green. Okay. Uh next uh we had a event from Google Gemini and uh they basically made a new label called Gemini Enterprise which includes everything all their models all their tooling it's available globally for enterprise and it gives uh necessary security privacy uh and and and so on. their numbers, their growth uh is very very impressive. Uh so well generally that's what Google does. They used to have for example Google Adwords the small advertisement on the side of Google search but then they concentrated only on big businesses and it looks like this is their strategy to work with businesses right so uh they have models they have uh no code tools they have pre-built agents and tools to create new agents they integrate with uh Google workspace which is docs and Gmail and so on with Microsoft, SharePoint, Sub Oracle, Slack everything and you see governance and security and a lot of partners working with them. So yes, they're focusing on uh businesses as as they created workspace before uh so now they creating this Gemini enterprise for AI for businesses. uh OpenAI similar they had a dev day which is the annual conference where they introduced a lot of their tooling and again it's kind of you go to the chat and you have everything and you can do everything right and you can call external uh things like Spotify Zilo Canva whatever so you can edit or create documents uh you can record audio or video or generate something all in one place. Uh for example, Sora 2 now is available via API which is video generation. Uh you can edit code. Uh you can create um this agent&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;For the complete discussion, watch the &lt;a href="https://www.youtube.com/watch?v=QrGaeRMdfIc"&gt;original video&lt;/a&gt;.&lt;/p&gt;</content><category term="General"/><category term="youtube"/><category term="video"/><category term="content"/></entry><entry><title>YouTube Video: When I first got into web development, everyone</title><link href="https://yoloinfinity55.github.io/sparkpelican/youtube-video-when-i-first-got-into-web-development-everyone.html" rel="alternate"/><published>2025-10-10T14:58:18.232903-04:00</published><updated>2025-10-10T14:58:18.232903-04:00</updated><author><name>AI Generated</name></author><id>tag:yoloinfinity55.github.io,2025-10-10:/sparkpelican/youtube-video-when-i-first-got-into-web-development-everyone.html</id><summary type="html">&lt;p&gt;When I first got into web development, everyone said the same thing. It was the golden child, the industry standard, the ticket to a six-f figureure job.---&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I first got into web development, everyone said the same thing. It was the golden child, the industry standard, the ticket to a six-f figureure job.&lt;/p&gt;
&lt;p&gt;Generated content from video h0zh7CqAkxY&lt;/p&gt;
&lt;p&gt;When I first got into web development, everyone said the same thing. Learn React. It was the golden child, the industry standard, the ticket to a six-f figureure job. So that's what I did. I opened up YouTube, cloned a few GitHub repos, and told myself I was building real projects. Fast forward 6 months and I was kneede in props, hooks, custom hooks, use effect chaos, and libraries stacked on libraries just to render a button. Here's the thing. I don't regret learning React. I regret learning it...&lt;/p&gt;</content><category term="General"/><category term="youtube"/><category term="video"/><category term="content"/></entry><entry><title>YouTube Video: Hey guys, how you doing? Uncle Steph here. So what...</title><link href="https://yoloinfinity55.github.io/sparkpelican/youtube-video-hey-guys-how-you-doing-uncle-steph-here-so-what.html" rel="alternate"/><published>2025-10-10T14:51:17.581272-04:00</published><updated>2025-10-10T14:51:17.581272-04:00</updated><author><name>AI Generated</name></author><id>tag:yoloinfinity55.github.io,2025-10-10:/sparkpelican/youtube-video-hey-guys-how-you-doing-uncle-steph-here-so-what.html</id><summary type="html">&lt;p&gt;Uncle Steph discusses the most valuable skill set for developers today, arguing that logical thinking trumps specific languages or frameworks. Drawing from 30 years of experience, he emphasizes that understanding software complexity and problem-solving ability are the key differentiators in software development.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Uncle Steph discusses the most valuable skill set for developers today, arguing that logical thinking trumps specific languages or frameworks. Drawing from 30 years of experience, he emphasizes that understanding software complexity and problem-solving ability are the key differentiators in software development.&lt;/p&gt;
&lt;p&gt;Generated content from video kV8JOs52lkA&lt;/p&gt;
&lt;p&gt;Hey guys, how you doing? Uncle Steph here. So what is the most valuable skill set that a developer can have today? I would have to say it is logical thinking is it is not a particular language. It is not a particular framework. It's ability to think logically. Why do I say that? Well, if you have experienced if you have experience in development, if you've done a lot of software development, as I have for 30 years now, 30 years, uh what you learn over time is that the complexity of software is n...&lt;/p&gt;</content><category term="General"/><category term="youtube"/><category term="video"/><category term="content"/></entry><entry><title>YouTube Video: [♪♪♪] ♪ We're no strangers to love ♪ ♪ You know th...</title><link href="https://yoloinfinity55.github.io/sparkpelican/youtube-video-we-re-no-strangers-to-love-you-know-th.html" rel="alternate"/><published>2025-10-10T14:46:27.989070-04:00</published><updated>2025-10-10T14:46:27.989070-04:00</updated><author><name>AI Generated</name></author><id>tag:yoloinfinity55.github.io,2025-10-10:/sparkpelican/youtube-video-we-re-no-strangers-to-love-you-know-th.html</id><summary type="html">&lt;p&gt;Video summary not available---&lt;/p&gt;</summary><content type="html">&lt;p&gt;Video summary not available&lt;/p&gt;
&lt;p&gt;Generated content from video dQw4w9WgXcQ&lt;/p&gt;
&lt;p&gt;[♪♪♪] ♪ We're no strangers to love ♪ ♪ You know the rules
and so do I ♪ ♪ A full commitment's
what I'm thinking of ♪ ♪ You wouldn't get this
from any other guy ♪ ♪ I just wanna tell you
how I'm feeling ♪ ♪ Gotta make you understand ♪ ♪ Never gonna give you up ♪ ♪ Never gonna let you down ♪ ♪ Never gonna run around
and desert you ♪ ♪ Never gonna make you cry ♪ ♪ Never gonna say goodbye ♪ ♪ Never gonna tell a lie
and hurt you ♪ ♪ We've known each other
for so long ♪ ♪ Your heart's been aching
but ...&lt;/p&gt;</content><category term="General"/><category term="youtube"/><category term="video"/><category term="content"/></entry><entry><title>Pelican 博客工作流程指南 - 从创建到发布的完整步骤</title><link href="https://yoloinfinity55.github.io/sparkpelican/pelican-bo-ke-gong-zuo-liu-cheng-zhi-nan-cong-chuang-jian-dao-fa-bu-de-wan-zheng-bu-zou.html" rel="alternate"/><published>2025-10-09T00:00:00-04:00</published><updated>2025-10-09T00:00:00-04:00</updated><author><name>"Infinity Spark"</name></author><id>tag:yoloinfinity55.github.io,2025-10-09:/sparkpelican/pelican-bo-ke-gong-zuo-liu-cheng-zhi-nan-cong-chuang-jian-dao-fa-bu-de-wan-zheng-bu-zou.html</id><summary type="html">&lt;h1&gt;Pelican 博客工作流程指南 - 从创建到发布的完整步骤&lt;/h1&gt;
&lt;p&gt;基于你的 Pelican 项目结构，这里是创建新博客文章的完整工作流程。本指南将 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Pelican 博客工作流程指南 - 从创建到发布的完整步骤&lt;/h1&gt;
&lt;p&gt;基于你的 Pelican 项目结构，这里是创建新博客文章的完整工作流程。本指南将帮助你快速掌握从内容创作到网站发布的整个过程。&lt;/p&gt;
&lt;h2&gt;工作流程概览&lt;/h2&gt;
&lt;p&gt;Pelican 是一个强大的静态站点生成器，使用 Python 构建。整个工作流程包括：创建文章文件 → 编写内容 → 本地预览 → 发布部署。&lt;/p&gt;
&lt;h2&gt;1. 创建博客文章文件&lt;/h2&gt;
&lt;h3&gt;文件位置和命名规范&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目录&lt;/strong&gt;: &lt;code&gt;content/posts/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名格式&lt;/strong&gt;: &lt;code&gt;YYYY-MM-DD-post-title.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;: &lt;code&gt;2025-10-09-my-new-post.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用日期前缀有助于文章的自动排序和组织管理。&lt;/p&gt;
&lt;h3&gt;添加 Front Matter&lt;/h3&gt;
&lt;p&gt;每个文章文件顶部都需要包含 front matter，使用以下格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
layout: post.njk
title: 你的文章标题
date: 2025-10-09
description: 文章的简要描述（用于 meta 标签和预览）
author: &amp;quot;Infinity Spark&amp;quot;
&lt;span class="gu"&gt;readingTime: &amp;quot;X min read&amp;quot;&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;

文章正文内容...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Front Matter 字段说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;layout&lt;/code&gt;: 必须使用 &lt;code&gt;post.njk&lt;/code&gt;（除非创建特殊页面）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: 文章标题，会显示在页面和导航中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;: 发布日期，格式为 &lt;code&gt;YYYY-MM-DD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt;: 文章描述，用于 SEO 和社交媒体分享&lt;/li&gt;
&lt;li&gt;&lt;code&gt;author&lt;/code&gt;: 作者名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readingTime&lt;/code&gt;: 预计阅读时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. 编写文章内容&lt;/h2&gt;
&lt;h3&gt;内容格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用标准的 Markdown 语法&lt;/li&gt;
&lt;li&gt;支持标题、列表、链接、图片、代码块等&lt;/li&gt;
&lt;li&gt;主题支持 Nunjucks 模板语法的高级功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;内容组织建议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;引言&lt;/strong&gt;: 开门见山说明文章主题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主体内容&lt;/strong&gt;: 按逻辑分段，使用标题分隔&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结论&lt;/strong&gt;: 总结要点，提供行动号召&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码示例&lt;/strong&gt;: 如果涉及技术内容，使用代码块&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;3. 本地预览和测试&lt;/h2&gt;
&lt;p&gt;Pelican 提供了多种本地预览方式，选择最适合你的工作方式：&lt;/p&gt;
&lt;h3&gt;选项一：快速预览（推荐）&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;启动本地服务器：&lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件变更时自动重新构建&lt;/li&gt;
&lt;li&gt;适合开发过程中的快速预览&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;选项二：构建后预览&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;reserve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;先构建站点，再启动服务器&lt;/li&gt;
&lt;li&gt;确保构建产物是最新的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;选项三：实时重载（最佳体验）&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;livereload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;文件变更时自动刷新浏览器&lt;/li&gt;
&lt;li&gt;提供最佳的开发体验&lt;/li&gt;
&lt;li&gt;推荐用于内容创作阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;预览检查清单&lt;/h3&gt;
&lt;p&gt;访问 &lt;code&gt;http://localhost:8000&lt;/code&gt; 后，请检查：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] 新文章是否出现在文章列表中&lt;/li&gt;
&lt;li&gt;[ ] 点击文章链接能否正常访问&lt;/li&gt;
&lt;li&gt;[ ] 文章格式是否正确显示&lt;/li&gt;
&lt;li&gt;[ ] 标题、日期、作者信息是否正确&lt;/li&gt;
&lt;li&gt;[ ] 响应式布局是否正常工作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. 编辑和优化&lt;/h2&gt;
&lt;p&gt;如果需要修改文章：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编辑 &lt;code&gt;content/posts/&lt;/code&gt; 下的 markdown 文件&lt;/li&gt;
&lt;li&gt;保存文件（如果使用 &lt;code&gt;livereload&lt;/code&gt;，浏览器会自动刷新）&lt;/li&gt;
&lt;li&gt;刷新浏览器查看更改&lt;/li&gt;
&lt;li&gt;重复直到满意为止&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;5. 发布部署&lt;/h2&gt;
&lt;p&gt;确认文章内容无误后，选择合适的发布方式：&lt;/p&gt;
&lt;h3&gt;选项一：发布到 GitHub Pages&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;gh_pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此命令会：
- 使用生产配置构建站点
- 自动推送到 &lt;code&gt;gh-pages&lt;/code&gt; 分支
- GitHub Pages 会自动检测更新并发布&lt;/p&gt;
&lt;h3&gt;选项二：生产环境构建&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;preview
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;publishconf.py&lt;/code&gt; 中的生产配置&lt;/li&gt;
&lt;li&gt;生成优化后的站点文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;发布检查清单&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ] 本地预览确认无误&lt;/li&gt;
&lt;li&gt;[ ] 生产构建成功完成&lt;/li&gt;
&lt;li&gt;[ ] 文章内容在生产环境中正确显示&lt;/li&gt;
&lt;li&gt;[ ] 所有链接和图片正常加载&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;6. 版本控制&lt;/h2&gt;
&lt;p&gt;将新文章提交到 Git 仓库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;content/posts/2025-10-09-your-post-title.md
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;添加新文章：你的文章标题&amp;quot;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;高级技巧&lt;/h2&gt;
&lt;h3&gt;1. 文章元数据优化&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
layout: post.njk
title: 文章标题
date: 2025-10-09
description: &amp;quot;吸引人的描述，包含关键词&amp;quot;
author: &amp;quot;Infinity Spark&amp;quot;
readingTime: &amp;quot;5 min read&amp;quot;
tags: [&amp;quot;pelican&amp;quot;, &amp;quot;博客&amp;quot;, &amp;quot;教程&amp;quot;]  # 添加标签分类
&lt;span class="gu"&gt;category: &amp;quot;技术教程&amp;quot;  # 分类&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;

文章内容...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2. 使用草稿模式&lt;/h3&gt;
&lt;p&gt;对于未完成的文章，可以添加 &lt;code&gt;status&lt;/code&gt; 字段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
layout: post.njk
title: 草稿文章
date: 2025-10-09
&lt;span class="gu"&gt;status: draft  # 标记为草稿，不会发布&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3. 定时发布&lt;/h3&gt;
&lt;p&gt;设置未来的发布日期：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
layout: post.njk
title: 定时发布文章
&lt;span class="gu"&gt;date: 2025-12-25  # 未来的日期&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意：生产构建时，未来日期的文章不会被包含，除非在构建命令中添加特殊参数。&lt;/p&gt;
&lt;h2&gt;故障排除&lt;/h2&gt;
&lt;h3&gt;常见问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;文章不显示&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;检查文件命名格式是否正确&lt;/li&gt;
&lt;li&gt;确认 front matter 格式无误&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看构建日志中的错误信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;格式显示异常&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;确认 Markdown 语法正确&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查是否遗漏了必要的 front matter 字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;图片无法加载&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;确认图片路径正确&lt;/li&gt;
&lt;li&gt;检查图片文件是否存在于静态目录中&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;获取帮助&lt;/h3&gt;
&lt;p&gt;如果遇到问题：
1. 查看 Pelican 官方文档
2. 检查项目配置和主题设置
3. 在社区论坛寻求帮助&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;Pelican 工作流程的核心是：&lt;strong&gt;创建 → 编写 → 预览 → 发布&lt;/strong&gt;。掌握这个流程后，你可以高效地创作和发布博客内容。&lt;/p&gt;
&lt;p&gt;记住：始终在本地充分测试后再发布到生产环境，确保最佳的用户体验。&lt;/p&gt;
&lt;p&gt;祝你写作愉快！🎉&lt;/p&gt;</content><category term="posts"/></entry><entry><title>The Only 5 Web Design Skills That Actually Matter (2025)</title><link href="https://yoloinfinity55.github.io/sparkpelican/the-only-5-web-design-skills-that-actually-matter-2025.html" rel="alternate"/><published>2025-10-09T00:00:00-04:00</published><updated>2025-10-09T00:00:00-04:00</updated><author><name>"Infinity Spark"</name></author><id>tag:yoloinfinity55.github.io,2025-10-09:/sparkpelican/the-only-5-web-design-skills-that-actually-matter-2025.html</id><summary type="html">&lt;h1&gt;The Only 5 Web Design Skills That Actually Matter (2025)&lt;/h1&gt;
&lt;p&gt;The YouTube video "The Only 5 Web Design Skills That Actually Matter (2025)" highlights five key skills for web designers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Typography:&lt;/strong&gt; Mastering fonts and text presentation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layout:&lt;/strong&gt; Understanding structure, spacing, and visual hierarchy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Color Theory:&lt;/strong&gt; Using color with intention.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Basic …&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h1&gt;The Only 5 Web Design Skills That Actually Matter (2025)&lt;/h1&gt;
&lt;p&gt;The YouTube video "The Only 5 Web Design Skills That Actually Matter (2025)" highlights five key skills for web designers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Typography:&lt;/strong&gt; Mastering fonts and text presentation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layout:&lt;/strong&gt; Understanding structure, spacing, and visual hierarchy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Color Theory:&lt;/strong&gt; Using color with intention.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Basic Coding:&lt;/strong&gt; Foundational knowledge of code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conversion Skills:&lt;/strong&gt; Designing to encourage user action.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The video suggests focusing on these areas to improve web design skills quickly and effectively.&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Testing My New Pelican Blog Deployment</title><link href="https://yoloinfinity55.github.io/sparkpelican/test-deployment.html" rel="alternate"/><published>2025-10-08T19:00:00-04:00</published><updated>2025-10-08T19:00:00-04:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-08:/sparkpelican/test-deployment.html</id><summary type="html">&lt;p&gt;My first real test post after successfully deploying sparkpelican to GitHub Pages!&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Hello from sparkpelican! 🚀&lt;/h1&gt;
&lt;p&gt;This is my &lt;strong&gt;first test post&lt;/strong&gt; after successfully deploying my Pelican blog with Tailwind CSS to GitHub Pages.&lt;/p&gt;
&lt;h2&gt;What I've Accomplished&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;✅ Set up Pelican static site generator&lt;/li&gt;
&lt;li&gt;✅ Integrated Tailwind CSS v4&lt;/li&gt;
&lt;li&gt;✅ Created a beautiful responsive grid layout&lt;/li&gt;
&lt;li&gt;✅ Deployed to GitHub Pages with GitHub Actions&lt;/li&gt;
&lt;li&gt;✅ Automated deployment on every push&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Technologies Used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pelican&lt;/strong&gt;: Python-based static site generator&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tailwind CSS v4&lt;/strong&gt;: Modern utility-first CSS framework&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;: Free hosting&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Actions&lt;/strong&gt;: Automated CI/CD pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Now I can:
1. Write blog posts in Markdown
2. Push to GitHub
3. Automatically deploy&lt;/p&gt;
&lt;p&gt;It's that simple! 🎉&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Posted from my Mac Mini M1&lt;/em&gt;&lt;/p&gt;</content><category term="Testing"/><category term="pelican"/><category term="tailwindcss"/><category term="github-pages"/><category term="deployment"/></entry><entry><title>5 Ways to Supercharge Your Pelican Workflow</title><link href="https://yoloinfinity55.github.io/sparkpelican/5-ways-to-supercharge-your-pelican-workflow.html" rel="alternate"/><published>2025-10-08T00:00:00-04:00</published><updated>2025-10-08T00:00:00-04:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-08:/sparkpelican/5-ways-to-supercharge-your-pelican-workflow.html</id><summary type="html">&lt;p&gt;A clean and well-organized project structure is crucial for any web project, and static sites built with Pelican are no exception. A streamlined setup not only makes development and maintenance easier but also improves collaboration. Based on a recent analysis of a Pelican project, here are five actionable suggestions to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A clean and well-organized project structure is crucial for any web project, and static sites built with Pelican are no exception. A streamlined setup not only makes development and maintenance easier but also improves collaboration. Based on a recent analysis of a Pelican project, here are five actionable suggestions to improve your workflow and project structure.&lt;/p&gt;
&lt;h3&gt;1. Consolidate Your Build and Automation Scripts&lt;/h3&gt;
&lt;p&gt;Many projects evolve to have multiple automation files, such as a &lt;code&gt;Makefile&lt;/code&gt; and a &lt;code&gt;tasks.py&lt;/code&gt; (using Invoke). While both can get the job done, having two separate files for similar tasks creates redundancy and can be confusing for new contributors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Suggestion:&lt;/strong&gt; Choose one automation tool and stick with it. For a Python-based project like Pelican, &lt;strong&gt;Invoke (&lt;code&gt;tasks.py&lt;/code&gt;)&lt;/strong&gt; is a more powerful and flexible choice. Migrate all your build, serve, and deployment tasks to &lt;code&gt;tasks.py&lt;/code&gt; and remove the &lt;code&gt;Makefile&lt;/code&gt;. This creates a single source of truth for all project automation.&lt;/p&gt;
&lt;h3&gt;2. Add a &lt;code&gt;requirements.txt&lt;/code&gt; for Python Dependencies&lt;/h3&gt;
&lt;p&gt;Your project relies on Python packages like Pelican, Invoke, and &lt;code&gt;ghp-import&lt;/code&gt;, but without a &lt;code&gt;requirements.txt&lt;/code&gt; file, there's no explicit list of these dependencies. This makes it difficult for others (or your future self on a new machine) to set up the project environment correctly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Suggestion:&lt;/strong&gt; Create a &lt;code&gt;requirements.txt&lt;/code&gt; file in your project's root directory. You can generate it by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;freeze&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This file should be committed to your repository, allowing anyone to install the correct dependencies with a single command: &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;3. Integrate Your CSS Build with Pelican&lt;/h3&gt;
&lt;p&gt;In modern web development, it's common to use tools like Tailwind CSS, which require a build step. Often, this is handled by a separate npm script, forcing you to run two commands (&lt;code&gt;npm run build:css&lt;/code&gt; and &lt;code&gt;pelican&lt;/code&gt;) to build your site.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Suggestion:&lt;/strong&gt; Integrate your CSS build process directly into the Pelican build. The &lt;code&gt;pelican-assets&lt;/code&gt; plugin is an excellent tool for this. You can configure it to run your &lt;code&gt;npm run build:css&lt;/code&gt; command automatically whenever you build your Pelican site, creating a seamless, one-command build process.&lt;/p&gt;
&lt;h3&gt;4. Organize Your Content into Subdirectories&lt;/h3&gt;
&lt;p&gt;As your website grows, a flat &lt;code&gt;content&lt;/code&gt; directory with all your articles and pages in one place can become unwieldy. This makes it hard to find and manage your content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Suggestion:&lt;/strong&gt; Organize your content into subdirectories based on categories, topics, or content types. For example, you could structure your &lt;code&gt;content&lt;/code&gt; directory like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;content/
├── posts/
│   ├── my-first-post.md
│   └── another-great-post.md
├── pages/
│   └── about.md
└── projects/
    └── my-project.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can then configure Pelican in your &lt;code&gt;pelicanconf.py&lt;/code&gt; to recognize and process this structure, leading to a much more organized and scalable project.&lt;/p&gt;
&lt;h3&gt;5. Refine Your Theme Structure&lt;/h3&gt;
&lt;p&gt;Your theme is the heart of your site's design, and its structure matters. Using a generic name like &lt;code&gt;mytheme&lt;/code&gt; is a missed opportunity for branding and clarity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Suggestion:&lt;/strong&gt; Give your theme a more descriptive name, such as &lt;code&gt;sparkpelican-theme&lt;/code&gt;. Additionally, consider the future of your theme by creating a &lt;code&gt;js&lt;/code&gt; directory alongside your &lt;code&gt;css&lt;/code&gt; directory for any JavaScript you might add later. You can also add a &lt;code&gt;theme.conf&lt;/code&gt; file to your theme's root to specify theme-specific settings, making it more self-contained and reusable.&lt;/p&gt;
&lt;p&gt;By implementing these five suggestions, you can create a more robust, maintainable, and efficient Pelican project that's a pleasure to work on.&lt;/p&gt;</content><category term="posts"/></entry><entry><title>SparkPelican Standard Operating Procedure</title><link href="https://yoloinfinity55.github.io/sparkpelican/sparkpelican-standard-operating-procedure.html" rel="alternate"/><published>2025-10-08T00:00:00-04:00</published><updated>2025-10-08T00:00:00-04:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-08:/sparkpelican/sparkpelican-standard-operating-procedure.html</id><summary type="html">&lt;p&gt;This document provides a Standard Operating Procedure (SOP) for developing and managing the SparkPelican website. It is intended to guide developers through the common tasks and workflows involved in maintaining the site.&lt;/p&gt;
&lt;h3&gt;1. Project Setup&lt;/h3&gt;
&lt;p&gt;To set up the development environment, you will need to have Python, Node.js, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This document provides a Standard Operating Procedure (SOP) for developing and managing the SparkPelican website. It is intended to guide developers through the common tasks and workflows involved in maintaining the site.&lt;/p&gt;
&lt;h3&gt;1. Project Setup&lt;/h3&gt;
&lt;p&gt;To set up the development environment, you will need to have Python, Node.js, and pip installed. Once these prerequisites are in place, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clone the repository:&lt;/strong&gt;
    &lt;code&gt;bash
    git clone https://github.com/your-username/sparkpelican.git
    cd sparkpelican&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a virtual environment:&lt;/strong&gt;
    &lt;code&gt;bash
    python -m venv venv
    source venv/bin/activate  # On Windows, use `venv\Scripts\activate`&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Install Python dependencies:&lt;/strong&gt;
    &lt;code&gt;bash
    pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Install Node.js dependencies:&lt;/strong&gt;
    &lt;code&gt;bash
    npm install&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;2. Content Creation&lt;/h3&gt;
&lt;p&gt;All content for the website is written in Markdown and stored in the &lt;code&gt;content/posts/&lt;/code&gt; directory. To create a new blog post, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a new Markdown file:&lt;/strong&gt;
    Create a new &lt;code&gt;.md&lt;/code&gt; file in the &lt;code&gt;content/posts/&lt;/code&gt; directory. The filename should be descriptive and follow the convention &lt;code&gt;YYYY-MM-DD-your-post-title.md&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add post metadata:&lt;/strong&gt;
    At the top of the new file, add the following metadata:
    &lt;code&gt;markdown
    ---
    title: Your Post Title
    date: YYYY-MM-DD
    author: Your Name
    ---&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write your content:&lt;/strong&gt;
    Write the content of your blog post in Markdown format below the metadata.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;3. Styling and Theming&lt;/h3&gt;
&lt;p&gt;The website's styling is managed by Tailwind CSS. To modify the styling, you will need to edit the Tailwind CSS input file and then rebuild the CSS.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Edit the input CSS file:&lt;/strong&gt;
    The main input file for Tailwind CSS is located at &lt;code&gt;themes/sparkpelican-theme/static/css/input.css&lt;/code&gt;. You can modify this file to add or change CSS classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build the output CSS file:&lt;/strong&gt;
    After editing the input file, you will need to run the following command to rebuild the &lt;code&gt;output.css&lt;/code&gt; file:
    &lt;code&gt;bash
    npm run build:css&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;4. Local Development&lt;/h3&gt;
&lt;p&gt;The project uses Invoke to automate common development tasks. The following commands are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build the site:&lt;/strong&gt;
    &lt;code&gt;bash
    invoke build&lt;/code&gt;
    This command will build the Pelican site and generate the HTML files in the &lt;code&gt;output&lt;/code&gt; directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Serve the site locally:&lt;/strong&gt;
    &lt;code&gt;bash
    invoke serve&lt;/code&gt;
    This command will start a local web server at &lt;code&gt;http://localhost:8000&lt;/code&gt; to serve the generated site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Live reload:&lt;/strong&gt;
    &lt;code&gt;bash
    invoke livereload&lt;/code&gt;
    This command will automatically rebuild the site and reload the browser whenever you make changes to the content or theme files.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5. Deployment&lt;/h3&gt;
&lt;p&gt;The website is automatically deployed to GitHub Pages whenever a new commit is pushed to the &lt;code&gt;main&lt;/code&gt; branch. The deployment process is defined in the &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;To deploy the site, simply push your changes to the &lt;code&gt;main&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The GitHub Actions workflow will then automatically build and deploy the site to your GitHub Pages URL.&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Under the Hood: The SparkPelican Project Specification</title><link href="https://yoloinfinity55.github.io/sparkpelican/under-the-hood-the-sparkpelican-project-specification.html" rel="alternate"/><published>2025-10-08T00:00:00-04:00</published><updated>2025-10-08T00:00:00-04:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-08:/sparkpelican/under-the-hood-the-sparkpelican-project-specification.html</id><summary type="html">&lt;p&gt;This document outlines the project specification for the SparkPelican website, a modern static site built with a focus on simplicity, performance, and a streamlined content workflow. This specification serves as a guide for understanding the project's architecture, technologies, and conventions.&lt;/p&gt;
&lt;h3&gt;Core Technologies&lt;/h3&gt;
&lt;p&gt;The SparkPelican project is built upon a foundation …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This document outlines the project specification for the SparkPelican website, a modern static site built with a focus on simplicity, performance, and a streamlined content workflow. This specification serves as a guide for understanding the project's architecture, technologies, and conventions.&lt;/p&gt;
&lt;h3&gt;Core Technologies&lt;/h3&gt;
&lt;p&gt;The SparkPelican project is built upon a foundation of powerful and flexible open-source technologies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pelican:&lt;/strong&gt; A static site generator written in Python. It's used to convert Markdown content into a fully functional HTML website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tailwind CSS:&lt;/strong&gt; A utility-first CSS framework for rapidly building custom user interfaces. It's used for all styling and theming.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python:&lt;/strong&gt; The primary programming language for the backend and build process, utilizing the Pelican and Invoke libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Node.js:&lt;/strong&gt; Used for managing the Tailwind CSS dependency and running the CSS build process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Invoke:&lt;/strong&gt; A Python task execution tool used to automate common development tasks like building the site and serving it locally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Actions:&lt;/strong&gt; A CI/CD platform used to automate the deployment of the website to GitHub Pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project Structure&lt;/h3&gt;
&lt;p&gt;The project is organized into the following key directories and files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;content/posts/&lt;/code&gt;: This directory contains all the website's content in the form of Markdown files. Each file represents a single blog post.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes/sparkpelican-theme/&lt;/code&gt;: This directory contains the theme for the website, including all templates and static assets.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;templates/&lt;/code&gt;: Contains the Jinja2 templates that define the structure and layout of the site.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static/css/&lt;/code&gt;: Contains the CSS files, including the input for Tailwind CSS and the final generated output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;: The main configuration file for Pelican, used for development settings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publishconf.py&lt;/code&gt;: The configuration file for Pelican, used for production settings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tasks.py&lt;/code&gt;: An Invoke script that defines a set of commands for automating common tasks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;: The Node.js configuration file, which defines the project's npm dependencies (primarily Tailwind CSS).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;: The Python configuration file, which lists the project's Python dependencies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt;: The GitHub Actions workflow file that defines the automated deployment process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Content Management&lt;/h3&gt;
&lt;p&gt;All content for the website is written in Markdown and stored in the &lt;code&gt;content/posts/&lt;/code&gt; directory. To create a new post, simply add a new &lt;code&gt;.md&lt;/code&gt; file to this directory. The file should include the following metadata at the top:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
title: Your Post Title
date: YYYY-MM-DD
&lt;span class="gu"&gt;author: Your Name&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;

Your post content goes here...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Styling and Theming&lt;/h3&gt;
&lt;p&gt;The website's styling is managed by Tailwind CSS. The main input file is located at &lt;code&gt;themes/sparkpelican-theme/static/css/input.css&lt;/code&gt;. When the site is built, this file is processed by Tailwind CSS to generate the final &lt;code&gt;output.css&lt;/code&gt; file, which is then used by the website.&lt;/p&gt;
&lt;p&gt;The theme's HTML structure is defined by a set of Jinja2 templates in the &lt;code&gt;themes/sparkpelican-theme/templates/&lt;/code&gt; directory. These templates are used by Pelican to generate the final HTML pages.&lt;/p&gt;
&lt;h3&gt;Automation and Deployment&lt;/h3&gt;
&lt;p&gt;The project uses a combination of Invoke and GitHub Actions to automate the development and deployment workflow.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Local Development:&lt;/strong&gt; The &lt;code&gt;tasks.py&lt;/code&gt; file provides a set of commands for common development tasks, such as:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;invoke build&lt;/code&gt;: Builds the Pelican site.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;invoke serve&lt;/code&gt;: Serves the site locally for testing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;invoke livereload&lt;/code&gt;: Automatically rebuilds the site and reloads the browser when changes are made.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployment:&lt;/strong&gt; The website is automatically deployed to GitHub Pages whenever a new commit is pushed to the &lt;code&gt;main&lt;/code&gt; branch. The deployment process is defined in the &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt; file and consists of the following steps:&lt;ol&gt;
&lt;li&gt;Checkout the code.&lt;/li&gt;
&lt;li&gt;Set up the Python and Node.js environments.&lt;/li&gt;
&lt;li&gt;Install the required dependencies.&lt;/li&gt;
&lt;li&gt;Build the Tailwind CSS.&lt;/li&gt;
&lt;li&gt;Build the Pelican site.&lt;/li&gt;
&lt;li&gt;Deploy the generated &lt;code&gt;output&lt;/code&gt; directory to GitHub Pages.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="posts"/></entry><entry><title>Project SparkPelican: A Deep Dive into This Pelican Blog</title><link href="https://yoloinfinity55.github.io/sparkpelican/project-sparkpelican-a-deep-dive-into-this-pelican-blog.html" rel="alternate"/><published>2025-10-08T00:00:00+00:00</published><updated>2025-10-08T00:00:00+00:00</updated><author><name>"Infinity Spark"</name></author><id>tag:yoloinfinity55.github.io,2025-10-08:/sparkpelican/project-sparkpelican-a-deep-dive-into-this-pelican-blog.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Pelican&lt;/li&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;li&gt;Project Overview&lt;/li&gt;
&lt;li&gt;Static Site Generator&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Project SparkPelican: A Deep Dive into This Pelican Blog&lt;/h1&gt;
&lt;p&gt;Welcome to a comprehensive behind-the-scenes look at the SparkPelican project. This post serves as a detailed summary of the architecture, technologies, and features that power this static site generator blog.&lt;/p&gt;
&lt;h2&gt;The Technology Stack&lt;/h2&gt;
&lt;p&gt;At …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Pelican&lt;/li&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;li&gt;Project Overview&lt;/li&gt;
&lt;li&gt;Static Site Generator&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Project SparkPelican: A Deep Dive into This Pelican Blog&lt;/h1&gt;
&lt;p&gt;Welcome to a comprehensive behind-the-scenes look at the SparkPelican project. This post serves as a detailed summary of the architecture, technologies, and features that power this static site generator blog.&lt;/p&gt;
&lt;h2&gt;The Technology Stack&lt;/h2&gt;
&lt;p&gt;At its core, SparkPelican is a modern static site built with a focus on performance, developer experience, and clean aesthetics. The key technologies used are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pelican:&lt;/strong&gt; A powerful static site generator written in Python that transforms content and templates into a fast, pre-rendered website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tailwind CSS v4:&lt;/strong&gt; A utility-first CSS framework that allows for rapid UI development and a highly customizable design system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python:&lt;/strong&gt; The core language powering Pelican and the build system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nunjucks (via Pelican):&lt;/strong&gt; Rich templating language used to create reusable layouts and components.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown:&lt;/strong&gt; All blog content is written in Markdown format for easy content management.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Project Structure&lt;/h2&gt;
&lt;p&gt;The project follows a well-organized structure typical of Pelican sites:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;sparkpelican&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Markdown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mytheme&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Custom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tailwind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Generated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CSS&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Individual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;archives&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Archives&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Generated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pelicanconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configuration&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;publishconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Production&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configuration&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Makefile&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;automation&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Advanced&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scripts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Core Features&lt;/h2&gt;
&lt;p&gt;This project comes with several built-in features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Responsive Design:&lt;/strong&gt; Clean, modern layout that works across all device sizes using Tailwind CSS utilities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Blog Content:&lt;/strong&gt; All posts are managed as Markdown files in the &lt;code&gt;content&lt;/code&gt; directory, making content creation straightforward.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pagination Support:&lt;/strong&gt; Built-in pagination for handling multiple posts across pages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Archive Pages:&lt;/strong&gt; Automatic generation of archive pages for browsing historical content.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SEO-Friendly:&lt;/strong&gt; Proper meta tags, semantic HTML structure, and clean URLs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development Tools:&lt;/strong&gt; Hot-reload development server and CSS build process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Development Workflow&lt;/h2&gt;
&lt;p&gt;The project is set up with multiple development approaches:&lt;/p&gt;
&lt;h3&gt;Using Make (Traditional)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make&lt;span class="w"&gt; &lt;/span&gt;devserver&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Development server with auto-regeneration&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;html&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;# Generate static site&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;serve&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="c1"&gt;# Serve generated site&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;clean&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="c1"&gt;# Remove generated files&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;github&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;# Deploy to GitHub Pages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Using Invoke (Python tasks.py)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;livereload&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Live reload with browser refresh&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;serve&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Development server&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Build the site&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;preview&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# Production build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Using npm (CSS builds)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build:css&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Build Tailwind CSS&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;watch:css&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Watch and rebuild CSS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;h3&gt;Main Settings (pelicanconf.py)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Site Name:&lt;/strong&gt; sparkpelican&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Author:&lt;/strong&gt; Infinity Spark&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Timezone:&lt;/strong&gt; America/Toronto&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Theme:&lt;/strong&gt; Custom theme in &lt;code&gt;themes/mytheme/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pagination:&lt;/strong&gt; 12 posts per page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language:&lt;/strong&gt; English&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CSS Build Process&lt;/h3&gt;
&lt;p&gt;The project uses Tailwind CSS v4 with a simple build process:
- Source file: &lt;code&gt;themes/mytheme/static/css/input.css&lt;/code&gt;
- Output file: &lt;code&gt;themes/mytheme/static/css/output.css&lt;/code&gt;
- Build command: &lt;code&gt;npx @tailwindcss/cli&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Template System&lt;/h2&gt;
&lt;p&gt;The custom theme includes several key templates:&lt;/p&gt;
&lt;h3&gt;base.html&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Main layout with navigation and footer&lt;/li&gt;
&lt;li&gt;Responsive design using Tailwind utilities&lt;/li&gt;
&lt;li&gt;Clean typography and spacing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;index.html&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Home page displaying blog posts in a grid layout&lt;/li&gt;
&lt;li&gt;Responsive grid (1 column on mobile, 2 on tablet, 3 on desktop)&lt;/li&gt;
&lt;li&gt;Hover effects and smooth transitions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;article.html&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Individual post layout&lt;/li&gt;
&lt;li&gt;Article header with title, date, and category&lt;/li&gt;
&lt;li&gt;Clean typography for content&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Content Management&lt;/h2&gt;
&lt;p&gt;All content is stored as Markdown files in the &lt;code&gt;content/&lt;/code&gt; directory with front matter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
layout: post.njk
title: Your Post Title
date: 2025-10-08T00:00:00.000Z
description: &amp;quot;Brief description of the post&amp;quot;
author: &amp;quot;Infinity Spark&amp;quot;
readingTime: &amp;quot;5 min read&amp;quot;
tags:
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Tag1
&lt;span class="gu"&gt;  - Tag2&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;

&lt;span class="gh"&gt;# Your content here...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Build and Deployment&lt;/h2&gt;
&lt;p&gt;The project supports multiple deployment methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Local Development:&lt;/strong&gt; Use &lt;code&gt;make devserver&lt;/code&gt; or &lt;code&gt;invoke livereload&lt;/code&gt; for development&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Pages:&lt;/strong&gt; Use &lt;code&gt;make github&lt;/code&gt; for automatic deployment to GitHub Pages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production:&lt;/strong&gt; Use &lt;code&gt;make publish&lt;/code&gt; for production builds&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Recent Content Analysis&lt;/h2&gt;
&lt;p&gt;Based on the existing content, the blog covers:
- Project documentation and tutorials
- Technical guides and best practices
- Weekly summaries and diagnostics
- Eleventy and static site generator topics&lt;/p&gt;
&lt;h2&gt;What's Next?&lt;/h2&gt;
&lt;p&gt;While the foundation is solid, there are several areas for potential enhancement:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Enhanced Styling:&lt;/strong&gt; Add more custom animations and visual effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content Features:&lt;/strong&gt; Implement search functionality and tag pages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance:&lt;/strong&gt; Add image optimization and CSS purging&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployment:&lt;/strong&gt; Set up automated CI/CD pipelines&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This project serves as an excellent example of a modern, maintainable static site generator setup using Pelican and Tailwind CSS. The clean architecture and well-organized codebase make it easy to extend and customize for various use cases.&lt;/p&gt;
&lt;h2&gt;Technical Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The project uses Pelican's built-in pagination and archive generation&lt;/li&gt;
&lt;li&gt;CSS is processed using Tailwind CLI v4 for optimal performance&lt;/li&gt;
&lt;li&gt;Templates follow semantic HTML practices for accessibility&lt;/li&gt;
&lt;li&gt;The build system supports both traditional Make and modern Invoke tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for exploring the SparkPelican project architecture!&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Project SparkPelican: A Deep Dive into This Pelican Blog (v2)</title><link href="https://yoloinfinity55.github.io/sparkpelican/project-sparkpelican-a-deep-dive-into-this-pelican-blog-v2.html" rel="alternate"/><published>2025-10-08T00:00:00+00:00</published><updated>2025-10-08T00:00:00+00:00</updated><author><name>"Gemini CLI"</name></author><id>tag:yoloinfinity55.github.io,2025-10-08:/sparkpelican/project-sparkpelican-a-deep-dive-into-this-pelican-blog-v2.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Pelican&lt;/li&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;li&gt;Project Overview&lt;/li&gt;
&lt;li&gt;Static Site Generator&lt;/li&gt;
&lt;li&gt;Gemini&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Project SparkPelican: A Deep Dive into This Pelican Blog (v2)&lt;/h1&gt;
&lt;p&gt;Welcome to a comprehensive behind-the-scenes look at the SparkPelican project. This post serves as a detailed summary of the architecture, technologies, and features that power this static site generator blog. This summary …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Pelican&lt;/li&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;li&gt;Project Overview&lt;/li&gt;
&lt;li&gt;Static Site Generator&lt;/li&gt;
&lt;li&gt;Gemini&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Project SparkPelican: A Deep Dive into This Pelican Blog (v2)&lt;/h1&gt;
&lt;p&gt;Welcome to a comprehensive behind-the-scenes look at the SparkPelican project. This post serves as a detailed summary of the architecture, technologies, and features that power this static site generator blog. This summary was generated by the Gemini CLI after a deep study of the project.&lt;/p&gt;
&lt;h2&gt;The Technology Stack&lt;/h2&gt;
&lt;p&gt;At its core, SparkPelican is a modern static site built with a focus on performance, developer experience, and clean aesthetics. The key technologies used are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pelican:&lt;/strong&gt; A powerful static site generator written in Python that transforms content and templates into a fast, pre-rendered website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tailwind CSS v4:&lt;/strong&gt; A utility-first CSS framework that allows for rapid UI development and a highly customizable design system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python:&lt;/strong&gt; The core language powering Pelican and the build system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nunjucks (via Pelican):&lt;/strong&gt; Rich templating language used to create reusable layouts and components.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown:&lt;/strong&gt; All blog content is written in Markdown format for easy content management.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Project Structure&lt;/h2&gt;
&lt;p&gt;The project follows a well-organized structure typical of Pelican sites:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;sparkpelican&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Markdown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mytheme&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Custom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tailwind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Generated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CSS&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Individual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;archives&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Archives&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Generated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pelicanconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configuration&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;publishconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Production&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configuration&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Makefile&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;automation&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Advanced&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scripts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Core Features&lt;/h2&gt;
&lt;p&gt;This project comes with several built-in features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Responsive Design:&lt;/strong&gt; Clean, modern layout that works across all device sizes using Tailwind CSS utilities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Blog Content:&lt;/strong&gt; All posts are managed as Markdown files in the &lt;code&gt;content&lt;/code&gt; directory, making content creation straightforward.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pagination Support:&lt;/strong&gt; Built-in pagination for handling multiple posts across pages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Archive Pages:&lt;/strong&gt; Automatic generation of archive pages for browsing historical content.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SEO-Friendly:&lt;/strong&gt; Proper meta tags, semantic HTML structure, and clean URLs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development Tools:&lt;/strong&gt; Hot-reload development server and CSS build process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Development Workflow&lt;/h2&gt;
&lt;p&gt;The project is set up with multiple development approaches:&lt;/p&gt;
&lt;h3&gt;Using Make (Traditional)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make&lt;span class="w"&gt; &lt;/span&gt;devserver&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Development server with auto-regeneration&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;html&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;# Generate static site&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;serve&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="c1"&gt;# Serve generated site&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;clean&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="c1"&gt;# Remove generated files&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;github&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;# Deploy to GitHub Pages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Using Invoke (Python tasks.py)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;livereload&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Live reload with browser refresh&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;serve&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Development server&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Build the site&lt;/span&gt;
invoke&lt;span class="w"&gt; &lt;/span&gt;preview&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# Production build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Using npm (CSS builds)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build:css&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Build Tailwind CSS&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;watch:css&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Watch and rebuild CSS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;h3&gt;Main Settings (pelicanconf.py)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Site Name:&lt;/strong&gt; sparkpelican&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Author:&lt;/strong&gt; Infinity Spark&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Timezone:&lt;/strong&gt; America/Toronto&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Theme:&lt;/strong&gt; Custom theme in &lt;code&gt;themes/mytheme/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pagination:&lt;/strong&gt; 12 posts per page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language:&lt;/strong&gt; English&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CSS Build Process&lt;/h3&gt;
&lt;p&gt;The project uses Tailwind CSS v4 with a simple build process:
- Source file: &lt;code&gt;themes/mytheme/static/css/input.css&lt;/code&gt;
- Output file: &lt;code&gt;themes/mytheme/static/css/output.css&lt;/code&gt;
- Build command: &lt;code&gt;npx @tailwindcss/cli&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Template System&lt;/h2&gt;
&lt;p&gt;The custom theme includes several key templates:&lt;/p&gt;
&lt;h3&gt;base.html&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Main layout with navigation and footer&lt;/li&gt;
&lt;li&gt;Responsive design using Tailwind utilities&lt;/li&gt;
&lt;li&gt;Clean typography and spacing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;index.html&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Home page displaying blog posts in a grid layout&lt;/li&gt;
&lt;li&gt;Responsive grid (1 column on mobile, 2 on tablet, 3 on desktop)&lt;/li&gt;
&lt;li&gt;Hover effects and smooth transitions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;article.html&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Individual post layout&lt;/li&gt;
&lt;li&gt;Article header with title, date, and category&lt;/li&gt;
&lt;li&gt;Clean typography for content&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Content Management&lt;/h2&gt;
&lt;p&gt;All content is stored as Markdown files in the &lt;code&gt;content/&lt;/code&gt; directory with front matter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
layout: post.njk
title: Your Post Title
date: 2025-10-08T00:00:00.000Z
description: &amp;quot;Brief description of the post&amp;quot;
author: &amp;quot;Infinity Spark&amp;quot;
readingTime: &amp;quot;5 min read&amp;quot;
tags:
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Tag1
&lt;span class="gu"&gt;  - Tag2&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;

&lt;span class="gh"&gt;# Your content here...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Build and Deployment&lt;/h2&gt;
&lt;p&gt;The project supports multiple deployment methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Local Development:&lt;/strong&gt; Use &lt;code&gt;make devserver&lt;/code&gt; or &lt;code&gt;invoke livereload&lt;/code&gt; for development&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Pages:&lt;/strong&gt; Use &lt;code&gt;make github&lt;/code&gt; for automatic deployment to GitHub Pages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production:&lt;/strong&gt; Use &lt;code&gt;make publish&lt;/code&gt; for production builds&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Content Analysis&lt;/h2&gt;
&lt;p&gt;Based on the existing content, the blog covers a wide range of topics, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Project Documentation:&lt;/strong&gt; Detailed specifications and SOPs for web projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt; Step-by-step guides for technologies like Eleventy and Pelican.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical Deep Dives:&lt;/strong&gt; In-depth analysis of project architecture and technology stacks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diagnostics and Troubleshooting:&lt;/strong&gt; Practical solutions for common web development issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web Development Trends:&lt;/strong&gt; Curated lists of resources and articles.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's Next?&lt;/h2&gt;
&lt;p&gt;While the foundation is solid, there are several areas for potential enhancement:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Enhanced Styling:&lt;/strong&gt; Add more custom animations and visual effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content Features:&lt;/strong&gt; Implement search functionality and tag pages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance:&lt;/strong&gt; Add image optimization and CSS purging&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployment:&lt;/strong&gt; Set up automated CI/CD pipelines&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This project serves as an excellent example of a modern, maintainable static site generator setup using Pelican and Tailwind CSS. The clean architecture and well-organized codebase make it easy to extend and customize for various use cases.&lt;/p&gt;
&lt;h2&gt;Technical Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The project uses Pelican's built-in pagination and archive generation&lt;/li&gt;
&lt;li&gt;CSS is processed using Tailwind CLI v4 for optimal performance&lt;/li&gt;
&lt;li&gt;Templates follow semantic HTML practices for accessibility&lt;/li&gt;
&lt;li&gt;The build system supports both traditional Make and modern Invoke tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for exploring the SparkPelican project architecture! This summary was created by the Gemini CLI.&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Understanding the Diagnostics</title><link href="https://yoloinfinity55.github.io/sparkpelican/understanding-the-diagnostics.html" rel="alternate"/><published>2025-10-07T00:00:00-04:00</published><updated>2025-10-07T00:00:00-04:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-07:/sparkpelican/understanding-the-diagnostics.html</id><summary type="html">&lt;p&gt;Fix 'no-inline-styles' warnings with this step-by-step guide. Move inline CSS
  to an external file to easily boost your site's performance, caching, and
  maintainability.
date: 2025-10-07T00:00:00.000Z
author: "Infinity Spark"
readingTime: "3 min read"&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Understanding the Diagnostics&lt;/h3&gt;
&lt;p&gt;These are warnings from the &lt;strong&gt;webhint&lt;/strong&gt; tool (integrated via Microsoft Edge Tools …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Fix 'no-inline-styles' warnings with this step-by-step guide. Move inline CSS
  to an external file to easily boost your site's performance, caching, and
  maintainability.
date: 2025-10-07T00:00:00.000Z
author: "Infinity Spark"
readingTime: "3 min read"&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Understanding the Diagnostics&lt;/h3&gt;
&lt;p&gt;These are warnings from the &lt;strong&gt;webhint&lt;/strong&gt; tool (integrated via Microsoft Edge Tools in your IDE, likely VS Code), flagging the use of inline CSS styles in your HTML file (&lt;code&gt;_site/about/index.html&lt;/code&gt;). The rule "no-inline-styles" promotes best practices for web performance and maintainability by discouraging embedded &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags or &lt;code&gt;style&lt;/code&gt; attributes directly in HTML. Inline styles make code harder to reuse, cache, and manage across pages.&lt;/p&gt;
&lt;p&gt;All four warnings point to &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags (based on the column spans, which typically cover the opening &lt;code&gt;&amp;lt;sty&lt;/code&gt; or similar). Here's a breakdown:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Warning #&lt;/th&gt;
&lt;th&gt;Line&lt;/th&gt;
&lt;th&gt;Columns&lt;/th&gt;
&lt;th&gt;Likely Issue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;4-7&lt;/td&gt;
&lt;td&gt;Opening &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag with inline CSS rules.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;67&lt;/td&gt;
&lt;td&gt;6-9&lt;/td&gt;
&lt;td&gt;Another &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag (possibly nested or additional rules).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;76&lt;/td&gt;
&lt;td&gt;6-9&lt;/td&gt;
&lt;td&gt;Similar to above—likely a continuation or separate block.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;4-7&lt;/td&gt;
&lt;td&gt;Closing or another opening &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These are &lt;strong&gt;severity 4&lt;/strong&gt; (warnings, not errors), so your site will build and run fine, but addressing them improves code quality.&lt;/p&gt;
&lt;h3&gt;Step-by-Step Fix&lt;/h3&gt;
&lt;p&gt;To resolve this, extract all inline CSS into an external file. Since this is in a &lt;code&gt;_site&lt;/code&gt; directory (suggesting a static site generator like Jekyll), apply changes to your source files (e.g., in the root or &lt;code&gt;assets&lt;/code&gt; folder) and regenerate the site.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Open the file and locate the styles&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;/Users/minijohn/Documents/github-repo/spark/_site/about/index.html&lt;/code&gt; in your editor.&lt;/li&gt;
&lt;li&gt;Go to lines 42, 67, 76, and 101. You'll see &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; blocks like:
     &lt;code&gt;html
     &amp;lt;style&amp;gt;
       /* Some CSS rules here */
     &amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy &lt;strong&gt;all&lt;/strong&gt; the CSS content from these blocks (e.g., rules for fonts, layouts, colors).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create an external CSS file&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;In your project's source directory (likely &lt;code&gt;spark/assets/css/&lt;/code&gt; or similar), create a new file like &lt;code&gt;about.css&lt;/code&gt; (or append to an existing &lt;code&gt;main.css&lt;/code&gt; if it fits).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paste the extracted CSS into it. Example:
     &lt;code&gt;css
     /* about.css */
     body {
       font-family: Arial, sans-serif; /* Example rule—replace with your actual styles */
     }
     .hero-section {
       background-color: #f0f0f0;
     }
     /* Add all rules from the inline &amp;lt;style&amp;gt; tags here */&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remove inline styles from HTML&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Delete the entire &lt;code&gt;&amp;lt;style&amp;gt;...&amp;lt;/style&amp;gt;&lt;/code&gt; blocks from the HTML file (lines 42–101 span).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your HTML should now look cleaner, without embedded CSS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Link the external CSS&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of &lt;code&gt;index.html&lt;/code&gt; (or your layout template if using Jekyll), add:
     &lt;code&gt;html
     &amp;lt;link rel="stylesheet" href="/assets/css/about.css"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adjust the &lt;code&gt;href&lt;/code&gt; path based on your site structure (e.g., if it's in &lt;code&gt;_site/assets&lt;/code&gt;, use relative paths like &lt;code&gt;../assets/css/about.css&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;If this is a Jekyll site, add the link to &lt;code&gt;_layouts/default.html&lt;/code&gt; or similar for global reuse.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Regenerate and test&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Run your build command (e.g., &lt;code&gt;jekyll build&lt;/code&gt; or &lt;code&gt;npm run build&lt;/code&gt; for Spark-related projects).&lt;/li&gt;
&lt;li&gt;Reload the page in a browser and inspect (F12) to confirm styles load from the external file.&lt;/li&gt;
&lt;li&gt;Re-run your linter (e.g., via VS Code's Problems panel) to verify warnings are gone.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Additional Tips&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If styles are duplicated&lt;/strong&gt;: Check if these inline styles overlap with existing external CSS—consolidate to avoid bloat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance bonus&lt;/strong&gt;: External CSS enables browser caching, reducing load times for users revisiting your site.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Suppress if needed&lt;/strong&gt;: If inline is intentional (e.g., for one-off testing), add &lt;code&gt;data-hint-ignore="no-inline-styles"&lt;/code&gt; to the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag, but this isn't recommended for production.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project context&lt;/strong&gt;: If "spark" refers to a specific repo (e.g., Apache Spark docs or a custom site), search your codebase for a global CSS include to centralize this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you paste the relevant HTML snippet (lines 30–110) or more context, I can provide exact code diffs!&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Project Spark: A Deep Dive into This Eleventy Blog</title><link href="https://yoloinfinity55.github.io/sparkpelican/project-spark-a-deep-dive-into-this-eleventy-blog.html" rel="alternate"/><published>2025-10-07T00:00:00+00:00</published><updated>2025-10-07T00:00:00+00:00</updated><author><name>"Infinity Spark"</name></author><id>tag:yoloinfinity55.github.io,2025-10-07:/sparkpelican/project-spark-a-deep-dive-into-this-eleventy-blog.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Eleventy&lt;/li&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;li&gt;Project Overview&lt;/li&gt;
&lt;li&gt;Jamstack&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Welcome to a behind-the-scenes look at the Spark blog project. This post serves as a summary of the architecture, technologies, and features that power this site. Whether you're a developer looking for inspiration or just curious about how it works, here's a breakdown of what …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Eleventy&lt;/li&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;li&gt;Project Overview&lt;/li&gt;
&lt;li&gt;Jamstack&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Welcome to a behind-the-scenes look at the Spark blog project. This post serves as a summary of the architecture, technologies, and features that power this site. Whether you're a developer looking for inspiration or just curious about how it works, here's a breakdown of what makes Spark tick.&lt;/p&gt;
&lt;h3&gt;The Technology Stack&lt;/h3&gt;
&lt;p&gt;At its core, Spark is a modern static site built with a focus on performance, developer experience, and clean aesthetics. The key technologies used are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Eleventy (11ty):&lt;/strong&gt; A flexible and powerful static site generator that transforms our Markdown content and Nunjucks templates into a fast, pre-rendered website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tailwind CSS v4:&lt;/strong&gt; A utility-first CSS framework that allows for rapid UI development and a highly customizable design system without writing custom CSS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nunjucks:&lt;/strong&gt; A rich and powerful templating language for JavaScript, used by Eleventy to create reusable layouts and components (&lt;code&gt;base.njk&lt;/code&gt;, &lt;code&gt;post.njk&lt;/code&gt;, etc.).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PostCSS:&lt;/strong&gt; A tool for transforming CSS with JavaScript plugins. Here, it's used to process Tailwind CSS and minify the final stylesheet for production.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Generative AI:&lt;/strong&gt; The project includes a script (&lt;code&gt;generate-descriptions.js&lt;/code&gt;) that leverages the Google Generative AI SDK, demonstrating a modern workflow for automating content creation tasks like writing post descriptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Core Features&lt;/h3&gt;
&lt;p&gt;This project isn't just a simple blog; it comes with several features built-in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Modern &amp;amp; Animated UI:&lt;/strong&gt; The frontend is designed with a clean, "glassmorphism" aesthetic, featuring subtle animations and gradients to create a polished user experience.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Blog Content:&lt;/strong&gt; All posts are managed as simple Markdown files in the &lt;code&gt;src/posts&lt;/code&gt; directory, making content creation straightforward. The site automatically generates post pages, lists, and an RSS feed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data-Driven Templates:&lt;/strong&gt; The templates are designed to be dynamic, pulling information like author and reading time directly from each post's front matter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search-Ready:&lt;/strong&gt; The project includes &lt;code&gt;flexsearch&lt;/code&gt;, a fast client-side search library, and generates a search index. The UI for the search functionality is the next step to be implemented.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed-Friendly:&lt;/strong&gt; Using the &lt;code&gt;eleventy-plugin-embed-everything&lt;/code&gt; plugin, embedding content like YouTube videos is seamless.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Development Workflow&lt;/h3&gt;
&lt;p&gt;The project is set up with a simple and efficient development workflow managed by npm scripts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm run dev&lt;/code&gt;: Starts a local development server with hot-reloading for both Eleventy and Tailwind CSS, allowing for real-time previews of any changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm run build&lt;/code&gt;: Creates a production-ready build of the site in the &lt;code&gt;_site&lt;/code&gt; directory, with minified CSS.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm run generate:descriptions&lt;/code&gt;: An example of a custom script to automate content tasks using AI.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What's Next?&lt;/h3&gt;
&lt;p&gt;While the foundation is solid, there are several exciting improvements planned:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Full Search Implementation:&lt;/strong&gt; Building the UI to connect with the already-generated search index.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Social Sharing:&lt;/strong&gt; Adding buttons to make it easy for readers to share posts on social media.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tag Pages:&lt;/strong&gt; Creating dedicated pages for each tag to allow for better content discovery.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance Optimization:&lt;/strong&gt; Implementing automated image optimization and purging unused CSS to make the site even faster.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This project serves as a strong starting point for anyone looking to build a modern, feature-rich static blog. Thanks for reading!&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Understanding the Issue</title><link href="https://yoloinfinity55.github.io/sparkpelican/understanding-the-issue.html" rel="alternate"/><published>2025-10-07T00:00:00+00:00</published><updated>2025-10-07T00:00:00+00:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-07:/sparkpelican/understanding-the-issue.html</id><summary type="html">&lt;p&gt;Fix linter warnings by replacing inline &lt;code&gt;animation-delay&lt;/code&gt; styles with custom
  Tailwind CSS utilities. A simple guide to cleaner, more maintainable code for
  your Eleventy project.
author: "Infinity Spark"
readingTime: "4 min read"&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Understanding the Issue&lt;/h3&gt;
&lt;p&gt;Your &lt;code&gt;index.njk&lt;/code&gt; template is a clean, responsive home page for an Eleventy site using …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Fix linter warnings by replacing inline &lt;code&gt;animation-delay&lt;/code&gt; styles with custom
  Tailwind CSS utilities. A simple guide to cleaner, more maintainable code for
  your Eleventy project.
author: "Infinity Spark"
readingTime: "4 min read"&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Understanding the Issue&lt;/h3&gt;
&lt;p&gt;Your &lt;code&gt;index.njk&lt;/code&gt; template is a clean, responsive home page for an Eleventy site using Tailwind CSS v4, featuring animated cards, recent posts, and a fallback for empty collections. However, the file has multiple &lt;strong&gt;inline styles&lt;/strong&gt; applied via the &lt;code&gt;style&lt;/code&gt; attribute (e.g., &lt;code&gt;style="animation-delay: 0.1s;"&lt;/code&gt;). These trigger "no-inline-styles" warnings from linters like webhint because embedding CSS directly in HTML can harm maintainability and caching performance.&lt;/p&gt;
&lt;p&gt;Tailwind CSS is designed to solve this by using utility classes. We can refactor these inline styles into custom CSS utilities within a &lt;code&gt;@layer&lt;/code&gt; or an external file. This guide focuses on a simple, performant fix that aligns with Tailwind's best practices.&lt;/p&gt;
&lt;p _="%" endraw&gt;Here are the inline styles we'll be replacing:
{% raw %}
| Location | Inline Style | Purpose |
|----------|--------------|---------|
| Feature card 1 | &lt;code&gt;animation-delay: 0.1s;&lt;/code&gt; | Staggered fade-in animation. |
| Feature card 2 | &lt;code&gt;animation-delay: 0.2s;&lt;/code&gt; | Staggered fade-in. |
| Feature card 3 | &lt;code&gt;animation-delay: 0.3s;&lt;/code&gt; | Staggered fade-in. |
| Posts section wrapper | &lt;code&gt;animation-delay: 0.4s;&lt;/code&gt; | Overall slide-up delay. |
| Each post article | &lt;code&gt;animation-delay: {{ loop.index * 0.1 }}s;&lt;/code&gt; | Dynamic stagger per post (Nunjucks loop). |
| Bounce dot 2 | &lt;code&gt;animation-delay: 0.1s;&lt;/code&gt; | Staggered bounce animation. |
| Bounce dot 3 | &lt;code&gt;animation-delay: 0.2s;&lt;/code&gt; | Staggered bounce. |&lt;/p&gt;
&lt;p&gt;These are all &lt;code&gt;animation-delay&lt;/code&gt; properties used for UX polish. Removing them would break the staggered animations, so we will convert them into reusable utility classes instead.&lt;/p&gt;
&lt;h3&gt;Step-by-Step Fix&lt;/h3&gt;
&lt;p&gt;The best approach is to add custom utilities to your main CSS file (e.g., &lt;code&gt;src/input.css&lt;/code&gt;). This keeps your styling modular and leverages Tailwind's Just-in-Time (JIT) compilation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Locate Your Main Tailwind CSS File&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is typically a file like &lt;code&gt;src/input.css&lt;/code&gt; or &lt;code&gt;src/styles/tailwind.css&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ensure it contains the base Tailwind directives:
    &lt;code&gt;css
    @tailwind base;
    @tailwind components;
    @tailwind utilities;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. Add Custom Animation Delay Utilities&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the same CSS file, add the following &lt;code&gt;@layer&lt;/code&gt; block. We'll define simple, reusable classes for our delays.
    &lt;code&gt;css
    @layer utilities {
      .delay-100 { animation-delay: 0.1s; }
      .delay-200 { animation-delay: 0.2s; }
      .delay-300 { animation-delay: 0.3s; }
      .delay-400 { animation-delay: 0.4s; }
    }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why use classes?&lt;/strong&gt; They are cacheable, align with Tailwind's methodology, and keep your HTML clean.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. Update the HTML in &lt;code&gt;index.njk&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replace each &lt;code&gt;style&lt;/code&gt; attribute with the corresponding new utility class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Feature Highlights Section:&lt;/strong&gt;
```njk
\&amp;lt;div class="... animate-fade-in" style="animation-delay: 0.1s;"&amp;gt;...\&amp;lt;/div&amp;gt;
\&amp;lt;div class="... animate-fade-in" style="animation-delay: 0.2s;"&amp;gt;...\&amp;lt;/div&amp;gt;
\&amp;lt;div class="... animate-fade-in" style="animation-delay: 0.3s;"&amp;gt;...\&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;... animate-fade-in delay-100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;... animate-fade-in delay-200&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;... animate-fade-in delay-300&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Posts Section Wrapper:&lt;/strong&gt;
```njk
\&amp;lt;div class="... animate-slide-up" style="animation-delay: 0.4s;"&amp;gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &amp;lt;div class=&amp;quot;... animate-slide-up delay-400&amp;quot;&amp;gt;
 ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Bounce Dots (in "No Posts" fallback):&lt;/strong&gt;
```njk
\&amp;lt;div class="... animate-bounce" style="animation-delay: 0.1s;"&amp;gt;\&amp;lt;/div&amp;gt;
\&amp;lt;div class="... animate-bounce" style="animation-delay: 0.2s;"&amp;gt;\&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;... animate-bounce delay-100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;... animate-bounce delay-200&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;{% raw %}
&lt;strong&gt;4. Handle the Dynamic Post Delays&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The staggered delay for posts (&lt;code&gt;animation-delay: {{ loop.index * 0.1 }}s;&lt;/code&gt;) is a special case. Since the number of posts can vary, creating a separate utility class for each is not ideal.&lt;/li&gt;
&lt;li _="%" endraw&gt;For this specific dynamic use case, using an &lt;strong&gt;inline &lt;code&gt;style&lt;/code&gt; attribute is perfectly acceptable and often the cleanest solution&lt;/strong&gt;. It avoids generating dozens of unused CSS classes. Modern web performance standards recognize that a minimal, dynamic inline style is better than a bloated stylesheet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{% raw %}
&lt;strong&gt;Update the Post Article Loop:&lt;/strong&gt;
Keep the inline style for this dynamic property. It's a pragmatic exception to the rule.
```njk
{% for post in collections.posts %}
&lt;br&gt;
&lt;article class="... animate-fade-in" style="animation-delay: {{ loop.index0 * 0.1 }}s;"&gt;
    &lt;/article&gt;&lt;/p&gt;
&lt;p&gt;{% endfor %}&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I've switched to &lt;code&gt;loop.index0&lt;/code&gt; (which is 0-indexed) to start the animation delay from &lt;code&gt;0s&lt;/code&gt; for the first post. If you prefer the first post to have a &lt;code&gt;0.1s&lt;/code&gt; delay, stick with &lt;code&gt;loop.index&lt;/code&gt; (which is 1-indexed).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;5. Build and Test&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run your build command (&lt;code&gt;npm run build&lt;/code&gt; or &lt;code&gt;eleventy --serve&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The output HTML in &lt;code&gt;_site&lt;/code&gt; will be free of static inline styles, and your animations will still work perfectly.&lt;/li&gt;
&lt;li&gt;The webhint warnings should now be resolved.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{% endraw %}&lt;/p&gt;</content><category term="posts"/></entry><entry><title>将 Eleventy 网站部署到 GitHub Pages 的常见问题解析</title><link href="https://yoloinfinity55.github.io/sparkpelican/jiang-eleventy-wang-zhan-bu-shu-dao-github-pages-de-chang-jian-wen-ti-jie-xi.html" rel="alternate"/><published>2025-10-06T00:00:00-04:00</published><updated>2025-10-06T00:00:00-04:00</updated><author><name>"Infinity Spark"</name></author><id>tag:yoloinfinity55.github.io,2025-10-06:/sparkpelican/jiang-eleventy-wang-zhan-bu-shu-dao-github-pages-de-chang-jian-wen-ti-jie-xi.html</id><summary type="html">&lt;p&gt;当你按照教程将 Eleventy (11ty) 网站部署到 GitHub Pages 时，通常会遵循一系列步骤，包括创建部署分支和设置 GitHub Actions 自动化工作流。然而，在这 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;当你按照教程将 Eleventy (11ty) 网站部署到 GitHub Pages 时，通常会遵循一系列步骤，包括创建部署分支和设置 GitHub Actions 自动化工作流。然而，在这个过程中，有几个关键点常常引起混淆，甚至导致部署失败。&lt;/p&gt;
&lt;p&gt;本文将总结两个在部署过程中遇到的真实问题，帮助你避开这些常见的“坑”。&lt;/p&gt;
&lt;h2&gt;问题一：&lt;code&gt;gh-pages&lt;/code&gt; 分支真的是“可选”的吗？&lt;/h2&gt;
&lt;p&gt;许多教程（包括我参考的指南）在创建部署分支时会提到“（可选）”字样。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 指南中的步骤&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;--orphan&lt;span class="w"&gt; &lt;/span&gt;gh-pages
git&lt;span class="w"&gt; &lt;/span&gt;reset&lt;span class="w"&gt; &lt;/span&gt;--hard
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;--allow-empty&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Initial commit for gh-pages&amp;quot;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;结论是：对于本指南描述的自动化部署流程，这一步实际上是必需的，而不是可选的。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;为什么必需？&lt;/h3&gt;
&lt;p&gt;GitHub Actions 的工作流程是：在 &lt;code&gt;main&lt;/code&gt; 分支有更新时，自动构建你的网站（生成 &lt;code&gt;_site&lt;/code&gt; 文件夹），然后将这个文件夹的内容推送到一个指定的分支（通常是 &lt;code&gt;gh-pages&lt;/code&gt;），GitHub Pages 再从这个分支读取文件并展示你的网站。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;gh-pages&lt;/code&gt; 分支在 GitHub 远程仓库上不存在，那么当 GitHub Actions 第一次运行时，&lt;code&gt;push&lt;/code&gt; 操作会因为找不到目标分支而失败。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;提前手动创建并推送一个空的 &lt;code&gt;gh-pages&lt;/code&gt; 分支，是为自动化部署提供一个可以推送的目标，这是确保工作流首次运行成功的关键准备步骤。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;问题二：修复 GitHub Actions 配置文件中的 &lt;code&gt;github_token&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;在设置 &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt; 文件时，一个微小但致命的错误是 &lt;code&gt;github_token&lt;/code&gt; 的配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误的配置：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy to GitHub Pages&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;github_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 这是一个无效的占位符&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;publish_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./_site&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个 &lt;code&gt;$&lt;/code&gt; 符号只是一个占位符，如果直接使用，工作流会因为没有权限推送到你的仓库而失败。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正确的配置：&lt;/strong&gt;
必须使用 GitHub Actions 提供的特殊语法来访问它为每次运行自动生成的令牌。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy to GitHub Pages&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;github_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 正确的语法&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;publish_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./_site&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;优化后的完整工作流&lt;/h3&gt;
&lt;p&gt;这是一个经过修正和优化的 &lt;code&gt;deploy.yml&lt;/code&gt; 文件，它使用了更新的 Actions 版本、更合适的 Node.js 版本，并开启了依赖缓存以加快构建速度。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/deploy.yml&lt;/span&gt;

&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy 11ty Blog to GitHub Pages&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build-deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout repository&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v4&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup Node.js&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-node@v4&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;node-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;18&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 使用一个较新的 LTS 版本&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;npm&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 缓存 npm 依赖&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependencies&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm ci&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 在 CI/CD 环境中比 npm install 更快、更安全&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build the site&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm run build&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy to GitHub Pages&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;github_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;publish_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./_site&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;问题三：部署成功但文章链接 404 Not Found&lt;/h2&gt;
&lt;p&gt;有时你会发现，网站主页 &lt;code&gt;yoursite.com&lt;/code&gt; 访问正常，但某一篇具体的文章链接 &lt;code&gt;yoursite.com/posts/xxxx/&lt;/code&gt; 却返回 404 错误。&lt;/p&gt;
&lt;p&gt;这通常不是部署流程的问题，而是 Eleventy 本身的一个特性导致的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最可能的原因是：文章的发布日期被设置为了未来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，如果你的文章元数据（Front Matter）中这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
title: 我的未来文章
date: 2099-01-01 # 这是一个未来的日期
&lt;span class="gu"&gt;layout: post.njk&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Eleventy 在执行 &lt;code&gt;npm run build&lt;/code&gt; 时，会默认&lt;strong&gt;忽略&lt;/strong&gt;所有日期在未来的文章。因此，这篇“未来文章”的 HTML 文件根本不会被生成并放到 &lt;code&gt;_site&lt;/code&gt; 目录中。既然文件不存在，访问它的链接自然就会返回 404。&lt;/p&gt;
&lt;h3&gt;如何解决？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;修改文章日期&lt;/strong&gt;：将文章 &lt;code&gt;.md&lt;/code&gt; 文件中的 &lt;code&gt;date&lt;/code&gt; 修改为今天或过去的日期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强制构建未来文章&lt;/strong&gt;：如果你确实需要在本地预览未来的文章，可以在构建命令中加入 &lt;code&gt;--future&lt;/code&gt; 参数。
    &lt;code&gt;json
    // package.json
    "scripts": {
      "build": "eleventy",
      "build-future": "eleventy --future", // 添加一个新命令
      "start": "eleventy --serve"
    },&lt;/code&gt;
    但请注意，用于线上部署的 &lt;code&gt;build&lt;/code&gt; 命令通常不应包含此参数，以防意外发布未到期的内容。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;希望这些总结能帮助你顺利完成 Eleventy 网站的部署！
```&lt;/p&gt;</content><category term="posts"/></entry><entry><title>( Plain text list ) Eleventy (11ty) beginner tutorials for 2025</title><link href="https://yoloinfinity55.github.io/sparkpelican/plain-text-list-eleventy-11ty-beginner-tutorials-for-2025.html" rel="alternate"/><published>2025-10-06T00:00:00-04:00</published><updated>2025-10-06T00:00:00-04:00</updated><author><name>"Infinity Spark"</name></author><id>tag:yoloinfinity55.github.io,2025-10-06:/sparkpelican/plain-text-list-eleventy-11ty-beginner-tutorials-for-2025.html</id><summary type="html">&lt;p&gt;Below is a plain text list of the 30 clickable URLs from the provided Markdown article for the newest Eleventy (11ty) beginner tutorials for 2025, now including the title and publication date (where available) for each resource, as requested. The URLs are listed in the same order as in the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Below is a plain text list of the 30 clickable URLs from the provided Markdown article for the newest Eleventy (11ty) beginner tutorials for 2025, now including the title and publication date (where available) for each resource, as requested. The URLs are listed in the same order as in the original article, and all were verified to be active and non-404 as of October 6, 2025.&lt;/p&gt;
&lt;p&gt;Title: Eleventy · Cloudflare Pages docs
Date: Sep 15, 2025
URL: https://developers.cloudflare.com/pages/framework-guides/deploy-an-eleventy-site/&lt;/p&gt;
&lt;p&gt;Title: Updates to the Eleventy guide: Beginner Edition
Date: Jul 25, 2025
URL: https://renkotsuban.com/posts/2025-07-25-Updates-to-the-Eleventy-guide.html&lt;/p&gt;
&lt;p&gt;Title: I Really Love 11ty: Beginner Tips and Tricks
Date: Jun 13, 2025
URL: https://gregordy.medium.com/i-really-love-11ty-i-now-only-use-it-to-build-most-of-my-websites-3edbd7ebc51f&lt;/p&gt;
&lt;p&gt;Title: The Power of Eleventy.js (11ty): A Beginner's Guide to Static Site Generation
Date: May 15, 2025
URL: https://medium.com/@amalhan43/the-power-of-eleventy-js-11ty-a-beginners-guide-to-static-site-generation-2dbf27a39ac9&lt;/p&gt;
&lt;p&gt;Title: How I Run Eleventy (It's Complicated?)
Date: Apr 18, 2025
URL: https://meiert.com/blog/how-i-run-eleventy/&lt;/p&gt;
&lt;p&gt;Title: Static Site Generator - 11ty v3 Tutorial
Date: Mar 23, 2025
URL: https://dev.to/climentea/11ty-static-site-generator-tutorial-11ty-v3-15g3&lt;/p&gt;
&lt;p&gt;Title: Creating a Journal With Eleventy
Date: Mar 25, 2025
URL: https://www.simplethread.com/creating-a-journal-with-eleventy/&lt;/p&gt;
&lt;p&gt;Title: Moving to Eleventy: Beginner Learning Path
Date: Mar 19, 2025
URL: https://troz.net/post/2025/eleventy/&lt;/p&gt;
&lt;p&gt;Title: Static Site Deployments Made Easy with 11ty and GitHub Actions
Date: Mar 27, 2025
URL: https://www.youtube.com/watch?v=OQJAX-Ce1YY&lt;/p&gt;
&lt;p&gt;Title: Build Personal Blog Easy with 11ty.js
Date: Feb 20, 2025
URL: https://dev.to/heterl0/build-personal-blog-easy-with-11tyjs-388o&lt;/p&gt;
&lt;p&gt;Title: Eleventy for Beginners: Quickly Turn Your Template into a Website
Date: Feb 15, 2025
URL: https://www.youtube.com/watch?v=praV5l5KqG0&lt;/p&gt;
&lt;p&gt;Title: Create a Blogging Platform With No Backend Using 11ty
Date: Jan 26, 2025
URL: https://medium.com/@shinjithkanhangad/create-a-blogging-platform-with-no-backend-zero-hosting-charge-0363bd5cd9d5&lt;/p&gt;
&lt;p&gt;Title: Long-term WordPress User Tries Building with 11ty
Date: Jan 23, 2025
URL: https://www.youtube.com/watch?v=Ixxszvj9GKw&lt;/p&gt;
&lt;p&gt;Title: Start Your Escape from WordPress Using 11ty (in 3 Minutes!)
Date: Jan 15, 2025
URL: https://www.youtube.com/watch?v=WuH5QYCdh6w&lt;/p&gt;
&lt;p&gt;Title: How To Build and Host an 11ty Site
Date: Jan 9, 2025
URL: https://polluterofminds.medium.com/how-to-build-and-host-an-11ty-site-a8cec7796551&lt;/p&gt;
&lt;p&gt;Title: Getting Started — Eleventy
Date: Not specified (official documentation, continuously updated)
URL: https://www.11ty.dev/docs/&lt;/p&gt;
&lt;p&gt;Title: Getting set up in Eleventy
Date: Not specified (timeless resource, relevant for 2025)
URL: https://cloudcannon.com/tutorials/eleventy-beginner-tutorial/&lt;/p&gt;
&lt;p&gt;Title: Beginner's Guide to Eleventy [Part I]
Date: Not specified (timeless resource, relevant for 2025)
URL: https://www.tatianamac.com/posts/beginner-eleventy-tutorial-parti&lt;/p&gt;
&lt;p&gt;Title: Beginner's Guide to Eleventy [Part II]
Date: Not specified (timeless resource, relevant for 2025)
URL: https://www.tatianamac.com/posts/beginner-eleventy-tutorial-partii&lt;/p&gt;
&lt;p&gt;Title: How I teach Eleventy from scratch
Date: Not specified (timeless resource, relevant for 2025)
URL: https://hamatti.org/posts/how-i-teach-eleventy-from-scratch/&lt;/p&gt;
&lt;p&gt;Title: Eleventy Tutorial - Create an 11ty Static Site
Date: Not specified (timeless resource, relevant for 2025)
URL: https://w3things.com/blog/eleventy-tutorial/&lt;/p&gt;
&lt;p&gt;Title: How to get started with the 11ty (Eleventy) Blog Starter
Date: Not specified (timeless resource, relevant for 2025)
URL: https://www.sanity.io/guides/how-to-get-started-with-the-11ty-eleventy-blog-starter&lt;/p&gt;
&lt;p&gt;Title: Crafting a Stylish Static Website with Eleventy (11ty)
Date: Not specified (timeless resource, relevant for 2025)
URL: https://kinsta.com/blog/eleventy/&lt;/p&gt;
&lt;p&gt;Title: Getting started with Eleventy in 11 minutes
Date: Not specified (timeless resource, relevant for 2025)
URL: https://dev.to/loige/getting-started-with-eleventy-in-11-minutes-496j&lt;/p&gt;
&lt;p&gt;Title: Let's Learn Eleventy
Date: Not specified (timeless resource, relevant for 2025)
URL: https://dev.to/psypher1/lets-learn-eleventy-1a67&lt;/p&gt;
&lt;p&gt;Title: Getting started with Eleventy (11ty)
Date: Not specified (timeless resource, relevant for 2025)
URL: https://dev.to/time2hack/getting-started-with-eleventy-11ty-47do&lt;/p&gt;
&lt;p&gt;Title: Setting Up Eleventy
Date: Not specified (timeless resource, relevant for 2025)
URL: https://dev.to/smolcodes/setting-up-eleventy-5fi&lt;/p&gt;
&lt;p&gt;Title: Build Jamstack-Ready Sites with Bootstrap and 11ty (Eleventy)
Date: Not specified (timeless resource, relevant for 2025)
URL: https://medium.com/webpixels/how-to-get-started-with-bootstrap-and-eleventy-7acd3c6dffe0&lt;/p&gt;
&lt;p&gt;Title: In-Depth 11ty Tutorials for 2025
Date: Not specified (collection updated for 2025)
URL: https://egghead.io/q/11ty&lt;/p&gt;
&lt;p&gt;Title: Better 11ty Development with Tooling
Date: Not specified (timeless resource, relevant for 2025)
URL: https://www.jetbrains.com/guide/javascript/tutorials/eleventy-tsx/&lt;/p&gt;</content><category term="posts"/></entry><entry><title>30 Newest Eleventy (11ty) Beginner Tutorials for 2025</title><link href="https://yoloinfinity55.github.io/sparkpelican/30-newest-eleventy-11ty-beginner-tutorials-for-2025.html" rel="alternate"/><published>2025-10-06T00:00:00+00:00</published><updated>2025-10-06T00:00:00+00:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-06:/sparkpelican/30-newest-eleventy-11ty-beginner-tutorials-for-2025.html</id><summary type="html">&lt;p&gt;A curated list of 30 new and updated Eleventy tutorials for beginners. Your
  go-to guide for building fast, modern static sites in 2025.
author: "Infinity Spark"
readingTime: "5 min read"&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;30 Newest Eleventy (11ty) Beginner Tutorials for 2025&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; October 6, 2025&lt;/p&gt;
&lt;p&gt;Below is a curated list of 30 beginner-friendly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A curated list of 30 new and updated Eleventy tutorials for beginners. Your
  go-to guide for building fast, modern static sites in 2025.
author: "Infinity Spark"
readingTime: "5 min read"&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;30 Newest Eleventy (11ty) Beginner Tutorials for 2025&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; October 6, 2025&lt;/p&gt;
&lt;p&gt;Below is a curated list of 30 beginner-friendly Eleventy (11ty) tutorials published or updated in 2025, supplemented with timeless resources that remain relevant for 2025 workflows. Each tutorial is designed for newcomers, covering installation, basic setup, creating static sites, and simple projects. All URLs are verified to be active and accessible as of October 6, 2025.&lt;/p&gt;
&lt;h2&gt;Tutorials&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developers.cloudflare.com/pages/framework-guides/deploy-an-eleventy-site/"&gt;&lt;strong&gt;Eleventy · Cloudflare Pages docs&lt;/strong&gt;&lt;/a&gt; – Sep 15, 2025
   A beginner's guide to deploying an Eleventy site on Cloudflare Pages, with step-by-step setup instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://renkotsuban.com/posts/2025-07-25-Updates-to-the-Eleventy-guide.html"&gt;&lt;strong&gt;Updates to the Eleventy guide: Beginner Edition&lt;/strong&gt;&lt;/a&gt; – Jul 25, 2025
   An updated guide for beginners, covering the basics of Eleventy v3 and creating a simple static site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://gregordy.medium.com/i-really-love-11ty-i-now-only-use-it-to-build-most-of-my-websites-3edbd7ebc51f"&gt;&lt;strong&gt;I Really Love 11ty: Beginner Tips and Tricks&lt;/strong&gt;&lt;/a&gt; – Jun 13, 2025
   Practical tips for new users transitioning to Eleventy, with a focus on building lightweight websites.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/@amalhan43/the-power-of-eleventy-js-11ty-a-beginners-guide-to-static-site-generation-2dbf27a39ac9"&gt;&lt;strong&gt;The Power of Eleventy.js (11ty): A Beginner's Guide to Static Site Generation&lt;/strong&gt;&lt;/a&gt; – May 15, 2025
   An introduction to Eleventy's static site generation, ideal for those new to the Jamstack ecosystem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://meiert.com/blog/how-i-run-eleventy/"&gt;&lt;strong&gt;How I Run Eleventy (It's Complicated?)&lt;/strong&gt;&lt;/a&gt; – Apr 18, 2025
   A beginner's perspective on setting up and running Eleventy, with practical examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://dev.to/climentea/11ty-static-site-generator-tutorial-11ty-v3-15g3"&gt;&lt;strong&gt;Static Site Generator - 11ty v3 Tutorial&lt;/strong&gt;&lt;/a&gt; – Mar 23, 2025
   A comprehensive tutorial on Eleventy v3, guiding beginners through creating a static site from scratch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.simplethread.com/creating-a-journal-with-eleventy/"&gt;&lt;strong&gt;Creating a Journal With Eleventy&lt;/strong&gt;&lt;/a&gt; – Mar 25, 2025
   A beginner-friendly tutorial on building a journal-style website using Eleventy and Markdown.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://troz.net/post/2025/eleventy/"&gt;&lt;strong&gt;Moving to Eleventy: Beginner Learning Path&lt;/strong&gt;&lt;/a&gt; – Mar 19, 2025
   A structured learning path for beginners transitioning to Eleventy from other platforms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=OQJAX-Ce1YY"&gt;&lt;strong&gt;Static Site Deployments Made Easy with 11ty and GitHub Actions&lt;/strong&gt;&lt;/a&gt; – Mar 27, 2025
   A video tutorial on deploying an Eleventy site using GitHub Actions, perfect for beginners.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://dev.to/heterl0/build-personal-blog-easy-with-11tyjs-388o"&gt;&lt;strong&gt;Build Personal Blog Easy with 11ty.js&lt;/strong&gt;&lt;/a&gt; – Feb 20, 2025
    A step-by-step guide to creating a personal blog with Eleventy, tailored for new developers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=praV5l5KqG0"&gt;&lt;strong&gt;Eleventy for Beginners: Quickly Turn Your Template into a Website&lt;/strong&gt;&lt;/a&gt; – Feb 15, 2025
    A quick video tutorial for turning a basic template into a functional Eleventy website.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/@shinjithkanhangad/create-a-blogging-platform-with-no-backend-zero-hosting-charge-0363bd5cd9d5"&gt;&lt;strong&gt;Create a Blogging Platform With No Backend Using 11ty&lt;/strong&gt;&lt;/a&gt; – Jan 26, 2025
    A guide to building a backend-free blogging platform with Eleventy and free hosting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ixxszvj9GKw"&gt;&lt;strong&gt;Long-term WordPress User Tries Building with 11ty&lt;/strong&gt;&lt;/a&gt; – Jan 23, 2025
    A video for WordPress users exploring Eleventy, with beginner-friendly setup instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=WuH5QYCdh6w"&gt;&lt;strong&gt;Start Your Escape from WordPress Using 11ty (in 3 Minutes!)&lt;/strong&gt;&lt;/a&gt; – Jan 15, 2025
    A fast-paced video tutorial for beginners migrating from WordPress to Eleventy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://polluterofminds.medium.com/how-to-build-and-host-an-11ty-site-a8cec7796551"&gt;&lt;strong&gt;How To Build and Host an 11ty Site&lt;/strong&gt;&lt;/a&gt; – Jan 9, 2025
    A detailed guide on building and hosting an Eleventy site, ideal for first-timers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.11ty.dev/docs/"&gt;&lt;strong&gt;Getting Started — Eleventy&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    The official Eleventy documentation, with a beginner-focused "Getting Started" section.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cloudcannon.com/tutorials/eleventy-beginner-tutorial/"&gt;&lt;strong&gt;Getting set up in Eleventy&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A clear tutorial on setting up an Eleventy project, perfect for those new to static site generators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.tatianamac.com/posts/beginner-eleventy-tutorial-parti"&gt;&lt;strong&gt;Beginner's Guide to Eleventy [Part I]&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    Part one of a two-part series introducing Eleventy's core concepts for beginners.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.tatianamac.com/posts/beginner-eleventy-tutorial-partii"&gt;&lt;strong&gt;Beginner's Guide to Eleventy [Part II]&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    The continuation of the beginner's guide, diving deeper into templates and data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://hamatti.org/posts/how-i-teach-eleventy-from-scratch/"&gt;&lt;strong&gt;How I teach Eleventy from scratch&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A beginner-oriented guide based on real-world teaching experiences with Eleventy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://w3things.com/blog/eleventy-tutorial/"&gt;&lt;strong&gt;Eleventy Tutorial - Create an 11ty Static Site&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A straightforward tutorial for creating a basic static site with Eleventy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.sanity.io/guides/how-to-get-started-with-the-11ty-eleventy-blog-starter"&gt;&lt;strong&gt;How to get started with the 11ty (Eleventy) Blog Starter&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A guide to using the Eleventy Blog Starter for creating a blog, aimed at beginners.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://kinsta.com/blog/eleventy/"&gt;&lt;strong&gt;Crafting a Stylish Static Website with Eleventy (11ty)&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A beginner's guide to building a stylish static website with Eleventy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://dev.to/loige/getting-started-with-eleventy-in-11-minutes-496j"&gt;&lt;strong&gt;Getting started with Eleventy in 11 minutes&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A quick introduction to Eleventy, covering setup and basic site creation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://dev.to/psypher1/lets-learn-eleventy-1a67"&gt;&lt;strong&gt;Let's Learn Eleventy&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A beginner-friendly tutorial series on Eleventy's core features and workflows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://dev.to/time2hack/getting-started-with-eleventy-11ty-47do"&gt;&lt;strong&gt;Getting started with Eleventy (11ty)&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A concise guide to setting up Eleventy and building your first site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://dev.to/smolcodes/setting-up-eleventy-5fi"&gt;&lt;strong&gt;Setting Up Eleventy&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A simple tutorial on installing and configuring Eleventy for beginners.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/webpixels/how-to-get-started-with-bootstrap-and-eleventy-7acd3c6dffe0"&gt;&lt;strong&gt;Build Jamstack-Ready Sites with Bootstrap and 11ty (Eleventy)&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A guide to combining Eleventy with Bootstrap for beginner-friendly Jamstack sites.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://egghead.io/q/11ty"&gt;&lt;strong&gt;In-Depth 11ty Tutorials for 2025&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A collection of beginner-focused video tutorials for Eleventy in 2025.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/guide/javascript/tutorials/eleventy-tsx/"&gt;&lt;strong&gt;Better 11ty Development with Tooling&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    A beginner's guide to enhancing Eleventy development with modern tooling.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All URLs were verified to be active and accessible as of October 6, 2025.&lt;/p&gt;</content><category term="posts"/></entry><entry><title>潮流周刊</title><link href="https://yoloinfinity55.github.io/sparkpelican/chao-liu-zhou-kan.html" rel="alternate"/><published>2025-10-06T00:00:00+00:00</published><updated>2025-10-06T00:00:00+00:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-06:/sparkpelican/chao-liu-zhou-kan.html</id><content type="html">&lt;ul&gt;
&lt;li&gt;zola&lt;/li&gt;
&lt;li&gt;tailwind&lt;/li&gt;
&lt;li&gt;sop&lt;/li&gt;
&lt;li&gt;development&lt;/li&gt;
&lt;li&gt;flux
description: &amp;gt;-
  A weekly collection of curated tech, design, and productivity finds. A peek
  into the not-boring life of an engineer.
author: "Infinity Spark"
readingTime: "1 min read"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;https://weekly.tw93.fun&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Eleventy (11ty) 入门指南 - 2025 年最新 YouTube 资源</title><link href="https://yoloinfinity55.github.io/sparkpelican/eleventy-11ty-ru-men-zhi-nan-2025-nian-zui-xin-youtube-zi-yuan.html" rel="alternate"/><published>2025-10-06T00:00:00+00:00</published><updated>2025-10-06T00:00:00+00:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-06:/sparkpelican/eleventy-11ty-ru-men-zhi-nan-2025-nian-zui-xin-youtube-zi-yuan.html</id><summary type="html">&lt;p&gt;Discover the best YouTube tutorials for learning Eleventy in 2025. This
  curated guide features beginner-friendly channels and videos to help you build
  your first static site quickly.
author: "Infinity Spark"
readingTime: "3 min read"&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;🎯 &lt;strong&gt;Eleventy (11ty) 入门指南 - 2025 年最新 YouTube 资源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eleventy (简称 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Discover the best YouTube tutorials for learning Eleventy in 2025. This
  curated guide features beginner-friendly channels and videos to help you build
  your first static site quickly.
author: "Infinity Spark"
readingTime: "3 min read"&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;🎯 &lt;strong&gt;Eleventy (11ty) 入门指南 - 2025 年最新 YouTube 资源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eleventy (简称 11ty) 是一个轻量级的静态站点生成器，适合初学者快速上手构建网站。&lt;br&gt;
以下是我基于 2025 年最新内容推荐的 YouTube 频道和教程。这些资源聚焦入门级内容，包括项目设置、模板使用和实际构建，适合零基础用户。推荐优先从官方和社区频道入手。&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;推荐学习路径&lt;/strong&gt;：官方频道 → 入门教程 → 动手实践  &lt;/p&gt;
&lt;p&gt;📺 &lt;strong&gt;推荐 YouTube 频道&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;1️⃣ &lt;strong&gt;Eleventy 官方频道&lt;/strong&gt;&lt;br&gt;
   特色：短视频快速入门指南&lt;br&gt;
   亮点："Start Your Escape from WordPress Using 11ty (in 3 minutes!)"、图像优化教程（如 "Learn how to Optimize your Web Site's Images with Eleventy Image"）&lt;br&gt;
   适合：快速上手核心概念&lt;br&gt;
   时长：2-5 分钟短小精悍&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCskGTioqrMBcw8pd14_334A"&gt;https://www.youtube.com/channel/UCskGTioqrMBcw8pd14_334A&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;2️⃣ &lt;strong&gt;THE Eleventy Meetup&lt;/strong&gt;&lt;br&gt;
   特色：虚拟聚会录像，社区讨论&lt;br&gt;
   亮点：工具使用、技能分享、实际开发案例（如 2025 年 9 月的 "A FOSS, offline first, local CMS app for 11ty with Jessie"）&lt;br&gt;
   适合：想深入社区讨论的初学者&lt;br&gt;
   内容：插件使用、最佳实践&lt;br&gt;
&lt;a href="https://www.youtube.com/c/theeleventymeetup"&gt;https://www.youtube.com/c/theeleventymeetup&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;3️⃣ &lt;strong&gt;Kevin Powell&lt;/strong&gt;&lt;br&gt;
   特色：前端专家频道，JAMStack 博客构建教程&lt;br&gt;
   亮点：使用 11ty 作为示例，结合最新 CSS 更新（如 "Turn static HTML/CSS into a blog with CMS using the JAMStack"）&lt;br&gt;
   适合：想结合 HTML/CSS 学习的用户&lt;br&gt;
   提示：搜索 "Eleventy" 相关视频&lt;br&gt;
&lt;a href="https://www.youtube.com/c/KevinPowell"&gt;https://www.youtube.com/c/KevinPowell&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;🚀 &lt;strong&gt;推荐入门教程（2025 年更新）&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;1️⃣ &lt;strong&gt;New to Eleventy? Eleventy for Beginners 播放列表&lt;/strong&gt;&lt;br&gt;
   类型：完整新手系列教程（约 13 视频）&lt;br&gt;
   内容：项目设置 → 布局创建 → Nunjucks 模板使用，包括 Kevin Powell 的 JAMStack 博客教程和崩溃课程（Crash Course）&lt;br&gt;
   时长：多视频系列，总时长超过 2 小时，步步拆解&lt;br&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLwhCq3ZFGOGgZDg_pnVh15gUfYqWnlWRs"&gt;https://www.youtube.com/playlist?list=PLwhCq3ZFGOGgZDg_pnVh15gUfYqWnlWRs&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;2️⃣ &lt;strong&gt;Eleventy for beginners: Quickly turn your template into a website&lt;/strong&gt;&lt;br&gt;
   类型：快速模板转换教程&lt;br&gt;
   内容：用 11ty 将模板转为静态网站，结合 JS/HTML/CSS，覆盖设置、布局、Nunjucks 和资产复制&lt;br&gt;
   时长：约 5 分钟 8 秒，适合前端初学者&lt;br&gt;
   发布：2025 年 2 月 15 日&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=praV5l5KqG0"&gt;https://www.youtube.com/watch?v=praV5l5KqG0&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;3️⃣ &lt;strong&gt;Long-term WordPress user tries building with 11ty&lt;/strong&gt;&lt;br&gt;
   类型：从 WordPress 迁移视角重建站点&lt;br&gt;
   内容：解释 11ty 的静态生成优势，包括 Markdown 到 HTML、模板、CMS 集成（如 Decap CMS）&lt;br&gt;
   适合：有 CMS 经验的用户&lt;br&gt;
   发布：2025 年 1 月 23 日&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Ixxszvj9GKw"&gt;https://www.youtube.com/watch?v=Ixxszvj9GKw&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;4️⃣ &lt;strong&gt;Building with an 11ty starter sites and headless WordPress&lt;/strong&gt;&lt;br&gt;
   类型：Starter 站点与 headless WordPress 集成&lt;br&gt;
   内容：提供实际 starter 模板下载，覆盖 RSS、图像转换、分页、语法高亮等高级功能&lt;br&gt;
   特色：快速上手构建，从 WordPress 用户视角&lt;br&gt;
   发布：2025 年 2 月 8 日&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=cwfIIXtzJRA"&gt;https://www.youtube.com/watch?v=cwfIIXtzJRA&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;这些资源大多免费且最新（2025 年），所有链接已于 2025 年 10 月 6 日验证有效。建议从官方频道起步，边看边实践一个简单博客项目。如果你有特定需求（如集成特定框架），可以提供更多细节，我再细化推荐！&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Project Flux - Specification Document</title><link href="https://yoloinfinity55.github.io/sparkpelican/project-flux-specification-document.html" rel="alternate"/><published>2025-10-06T00:00:00+00:00</published><updated>2025-10-06T00:00:00+00:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-06:/sparkpelican/project-flux-specification-document.html</id><summary type="html">&lt;p&gt;A technical blueprint for Project Flux: a modern, blazing-fast static site
  built with the powerful combination of Zola (Rust) and Tailwind CSS v4.
author: "Infinity Spark"
readingTime: "7 min read"&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Project Flux - Specification Document&lt;/h1&gt;
&lt;h2&gt;Project Overview&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Project Name:&lt;/strong&gt; Flux&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; A modern static website built using Zola (Rust-based static site …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A technical blueprint for Project Flux: a modern, blazing-fast static site
  built with the powerful combination of Zola (Rust) and Tailwind CSS v4.
author: "Infinity Spark"
readingTime: "7 min read"&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Project Flux - Specification Document&lt;/h1&gt;
&lt;h2&gt;Project Overview&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Project Name:&lt;/strong&gt; Flux&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; A modern static website built using Zola (Rust-based static site generator) combined with Tailwind CSS v4 for styling. This project leverages the speed and efficiency of Zola with the utility-first approach of Tailwind CSS v4 to create a fast, maintainable, and highly customizable website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt; 1.0.0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Last Updated:&lt;/strong&gt; October 6, 2025&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Technology Stack&lt;/h2&gt;
&lt;h3&gt;Core Technologies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Zola&lt;/strong&gt; (v0.19.x or latest) - Static site generator written in Rust&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tailwind CSS v4&lt;/strong&gt; - Utility-first CSS framework (latest v4 release)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTML5&lt;/strong&gt; - Markup language&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; (optional) - For enhanced interactivity&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Development Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Node.js &amp;amp; npm&lt;/strong&gt; - For Tailwind CSS v4 installation and build process&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt; - Version control&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text Editor/IDE&lt;/strong&gt; - VS Code, Sublime Text, or similar&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Project Goals&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt; - Achieve sub-second page load times with optimized assets&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Developer Experience&lt;/strong&gt; - Provide a smooth workflow with hot-reloading and fast builds&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintainability&lt;/strong&gt; - Use component-based templates and utility classes for easy updates&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customization&lt;/strong&gt; - Leverage Tailwind's utility classes for flexible design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SEO Optimization&lt;/strong&gt; - Implement proper meta tags, semantic HTML, and sitemap generation&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Project Structure&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;flux&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Markdown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;assets&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tailwind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;point&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Zola&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;templates&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Homepage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Single&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Section&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;partials&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Reusable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Additional&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SCSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Generated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ignored&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toml&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Zola&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configuration&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dependencies&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tailwind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tailwind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configuration&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;PostCSS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configuration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;Features &amp;amp; Functionality&lt;/h2&gt;
&lt;h3&gt;Core Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Responsive Design&lt;/strong&gt; - Mobile-first approach using Tailwind's responsive utilities&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dark Mode Support&lt;/strong&gt; - Toggle between light and dark themes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blog System&lt;/strong&gt; - Markdown-based blog with tags and categories&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Syntax Highlighting&lt;/strong&gt; - Code blocks with syntax highlighting&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search Functionality&lt;/strong&gt; - Client-side search using Zola's built-in search&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RSS Feed&lt;/strong&gt; - Automatic RSS feed generation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sitemap&lt;/strong&gt; - XML sitemap for SEO&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Page Types&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Homepage&lt;/strong&gt; - Hero section, featured content, recent posts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blog Posts&lt;/strong&gt; - Individual blog entries with metadata&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blog Index&lt;/strong&gt; - Paginated list of all blog posts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Static Pages&lt;/strong&gt; - About, Contact, Portfolio, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;404 Error Page&lt;/strong&gt; - Custom error page&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Tailwind CSS v4 Integration&lt;/h2&gt;
&lt;h3&gt;Setup Process&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Install Tailwind CSS v4 via npm&lt;/li&gt;
&lt;li&gt;Configure &lt;code&gt;tailwind.config.js&lt;/code&gt; with custom theme settings&lt;/li&gt;
&lt;li&gt;Set up PostCSS processing pipeline&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;styles/main.css&lt;/code&gt; with Tailwind directives&lt;/li&gt;
&lt;li&gt;Configure Zola to process CSS during build&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Tailwind Configuration&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example tailwind.config.js structure&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./templates/**/*.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./content/**/*.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Custom color palette&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;typography&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Custom typography settings&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Typography plugin for prose content&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Build Process&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use npm scripts to compile Tailwind CSS&lt;/li&gt;
&lt;li&gt;Integrate with Zola's build process&lt;/li&gt;
&lt;li&gt;Implement CSS purging for production builds&lt;/li&gt;
&lt;li&gt;Minify final CSS output&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Zola Configuration&lt;/h2&gt;
&lt;h3&gt;config.toml Settings&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://example.com&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Flux&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A modern static site&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;default_language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;generate_feed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;compile_sass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;minify_html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;build_search_index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;[markdown]&lt;/span&gt;
&lt;span class="n"&gt;highlight_code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;highlight_theme&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;base16-ocean-dark&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;smart_punctuation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;[extra]&lt;/span&gt;
&lt;span class="c1"&gt;# Custom variables&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Taxonomies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;li&gt;Categories&lt;/li&gt;
&lt;li&gt;Authors (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Content Management&lt;/h2&gt;
&lt;h3&gt;Markdown Front Matter&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;+++&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;title = &amp;quot;Post Title&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;date = 2025-10-06&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;description = &amp;quot;Post description&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;[taxonomies]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tags = [&amp;quot;tag1&amp;quot;, &amp;quot;tag2&amp;quot;]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;categories = [&amp;quot;category&amp;quot;]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;[extra]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;author = &amp;quot;Author Name&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;featured_image = &amp;quot;/images/post.jpg&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;+++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Content Guidelines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use semantic headings (H1-H6)&lt;/li&gt;
&lt;li&gt;Include alt text for all images&lt;/li&gt;
&lt;li&gt;Keep paragraphs concise&lt;/li&gt;
&lt;li&gt;Use code blocks with language specification&lt;/li&gt;
&lt;li&gt;Add meta descriptions for all pages&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Development Workflow&lt;/h2&gt;
&lt;h3&gt;Initial Setup&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Install Zola binary&lt;/li&gt;
&lt;li&gt;Clone/create project repository&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install Tailwind CSS v4 and dependencies&lt;/li&gt;
&lt;li&gt;Build Tailwind CSS: &lt;code&gt;npm run build:css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start Zola development server: &lt;code&gt;zola serve&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Development Commands&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Start Zola dev server (with auto-reload)&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;serve

&lt;span class="c1"&gt;# Build Tailwind CSS for development&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dev:css

&lt;span class="c1"&gt;# Build Tailwind CSS for production&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build:css

&lt;span class="c1"&gt;# Build complete site&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;build

&lt;span class="c1"&gt;# Run concurrent dev servers (Tailwind watch + Zola)&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Production Build&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Build optimized Tailwind CSS&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;zola build&lt;/code&gt; with minification enabled&lt;/li&gt;
&lt;li&gt;Test generated site in &lt;code&gt;public/&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Deploy to hosting provider&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Performance Optimization&lt;/h2&gt;
&lt;h3&gt;Strategies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSS Purging&lt;/strong&gt; - Remove unused Tailwind classes in production&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image Optimization&lt;/strong&gt; - Use WebP format, lazy loading&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Asset Minification&lt;/strong&gt; - Minify HTML, CSS, and JS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caching&lt;/strong&gt; - Implement proper cache headers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CDN Integration&lt;/strong&gt; - Serve static assets via CDN&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Performance Targets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lighthouse Score: 95+ across all metrics&lt;/li&gt;
&lt;li&gt;First Contentful Paint: &amp;lt; 1.0s&lt;/li&gt;
&lt;li&gt;Time to Interactive: &amp;lt; 2.0s&lt;/li&gt;
&lt;li&gt;Total Page Size: &amp;lt; 500KB (excluding images)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;SEO Strategy&lt;/h2&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Semantic HTML5 structure&lt;/li&gt;
&lt;li&gt;Open Graph meta tags&lt;/li&gt;
&lt;li&gt;Twitter Card meta tags&lt;/li&gt;
&lt;li&gt;Structured data (JSON-LD)&lt;/li&gt;
&lt;li&gt;Descriptive URLs and permalinks&lt;/li&gt;
&lt;li&gt;XML sitemap&lt;/li&gt;
&lt;li&gt;RSS feed&lt;/li&gt;
&lt;li&gt;Robots.txt configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Accessibility&lt;/h2&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WCAG 2.1 Level AA compliance&lt;/li&gt;
&lt;li&gt;Proper heading hierarchy&lt;/li&gt;
&lt;li&gt;ARIA labels where appropriate&lt;/li&gt;
&lt;li&gt;Keyboard navigation support&lt;/li&gt;
&lt;li&gt;Sufficient color contrast ratios&lt;/li&gt;
&lt;li&gt;Alt text for all images&lt;/li&gt;
&lt;li&gt;Focus indicators for interactive elements&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Browser Support&lt;/h2&gt;
&lt;h3&gt;Target Browsers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Chrome (last 2 versions)&lt;/li&gt;
&lt;li&gt;Firefox (last 2 versions)&lt;/li&gt;
&lt;li&gt;Safari (last 2 versions)&lt;/li&gt;
&lt;li&gt;Edge (last 2 versions)&lt;/li&gt;
&lt;li&gt;Mobile Safari (iOS 14+)&lt;/li&gt;
&lt;li&gt;Chrome Mobile (Android 10+)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;h3&gt;Hosting Options&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Netlify&lt;/strong&gt; - Automatic builds from Git&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vercel&lt;/strong&gt; - Zero-config deployment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare Pages&lt;/strong&gt; - Fast global CDN&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt; - Free hosting for static sites&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom VPS&lt;/strong&gt; - Full control&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Deployment Process&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Push changes to Git repository&lt;/li&gt;
&lt;li&gt;Trigger automated build&lt;/li&gt;
&lt;li&gt;Deploy to production&lt;/li&gt;
&lt;li&gt;Verify deployment&lt;/li&gt;
&lt;li&gt;Monitor performance&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Testing Checklist&lt;/h2&gt;
&lt;h3&gt;Pre-Launch Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Cross-browser compatibility&lt;/li&gt;
&lt;li&gt;[ ] Mobile responsiveness&lt;/li&gt;
&lt;li&gt;[ ] Performance benchmarks&lt;/li&gt;
&lt;li&gt;[ ] SEO meta tags validation&lt;/li&gt;
&lt;li&gt;[ ] Accessibility audit&lt;/li&gt;
&lt;li&gt;[ ] Link validation&lt;/li&gt;
&lt;li&gt;[ ] Form functionality (if applicable)&lt;/li&gt;
&lt;li&gt;[ ] Search functionality&lt;/li&gt;
&lt;li&gt;[ ] RSS feed validation&lt;/li&gt;
&lt;li&gt;[ ] 404 error page&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Future Enhancements&lt;/h2&gt;
&lt;h3&gt;Potential Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Newsletter subscription integration&lt;/li&gt;
&lt;li&gt;Comment system (Disqus, utterances, etc.)&lt;/li&gt;
&lt;li&gt;Progressive Web App (PWA) capabilities&lt;/li&gt;
&lt;li&gt;Multi-language support&lt;/li&gt;
&lt;li&gt;Advanced search filters&lt;/li&gt;
&lt;li&gt;Related posts recommendations&lt;/li&gt;
&lt;li&gt;Social sharing buttons&lt;/li&gt;
&lt;li&gt;Reading time estimates&lt;/li&gt;
&lt;li&gt;Table of contents for long posts&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Resources &amp;amp; Documentation&lt;/h2&gt;
&lt;h3&gt;Official Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Zola Docs: https://www.getzola.org/documentation/&lt;/li&gt;
&lt;li&gt;Tailwind CSS v4 Docs: https://tailwindcss.com/docs&lt;/li&gt;
&lt;li&gt;Markdown Guide: https://www.markdownguide.org/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Community Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Zola Forum&lt;/li&gt;
&lt;li&gt;Tailwind CSS Discord&lt;/li&gt;
&lt;li&gt;GitHub Discussions&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;[Specify project license - MIT, Apache 2.0, etc.]&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Contributors&lt;/h2&gt;
&lt;p&gt;[List project contributors and maintainers]&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Contact&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Project Maintainer:&lt;/strong&gt; [Your Name]&lt;br&gt;
&lt;strong&gt;Email:&lt;/strong&gt; [your.email@example.com]&lt;br&gt;
&lt;strong&gt;Repository:&lt;/strong&gt; [GitHub repository URL]&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Document Version:&lt;/strong&gt; 1.0&lt;br&gt;
&lt;strong&gt;Status:&lt;/strong&gt; Draft / In Progress / Active Development&lt;/p&gt;</content><category term="posts"/></entry><entry><title>Project Flux - Standard Operating Procedures (SOP)</title><link href="https://yoloinfinity55.github.io/sparkpelican/project-flux-standard-operating-procedures-sop.html" rel="alternate"/><published>2025-10-06T00:00:00+00:00</published><updated>2025-10-06T00:00:00+00:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-10-06:/sparkpelican/project-flux-standard-operating-procedures-sop.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;zola&lt;/li&gt;
&lt;li&gt;tailwind&lt;/li&gt;
&lt;li&gt;sop&lt;/li&gt;
&lt;li&gt;development&lt;/li&gt;
&lt;li&gt;flux
description: &amp;gt;-
  The official SOP for the Flux project. A step-by-step guide to our development
  workflow using Zola and Tailwind CSS v4, from initial setup to final
  deployment.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Project Name:&lt;/strong&gt; Flux&lt;br&gt;
&lt;strong&gt;Document Type:&lt;/strong&gt; Standard Operating Procedures&lt;br&gt;
&lt;strong&gt;Version:&lt;/strong&gt; 1.0.0&lt;br&gt;
&lt;strong&gt;Last Updated:&lt;/strong&gt; October 6, 2025&lt;br&gt;
&lt;strong&gt;Status …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;zola&lt;/li&gt;
&lt;li&gt;tailwind&lt;/li&gt;
&lt;li&gt;sop&lt;/li&gt;
&lt;li&gt;development&lt;/li&gt;
&lt;li&gt;flux
description: &amp;gt;-
  The official SOP for the Flux project. A step-by-step guide to our development
  workflow using Zola and Tailwind CSS v4, from initial setup to final
  deployment.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Project Name:&lt;/strong&gt; Flux&lt;br&gt;
&lt;strong&gt;Document Type:&lt;/strong&gt; Standard Operating Procedures&lt;br&gt;
&lt;strong&gt;Version:&lt;/strong&gt; 1.0.0&lt;br&gt;
&lt;strong&gt;Last Updated:&lt;/strong&gt; October 6, 2025&lt;br&gt;
&lt;strong&gt;Status:&lt;/strong&gt; Active&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: This SOP outlines procedures for the Flux project, built with Zola (v0.21.0) and Tailwind CSS v4. While this blog post itself is powered by Eleventy, the guidelines here focus on Flux's Zola-based workflow for consistency.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#purpose--scope"&gt;Purpose &amp;amp; Scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initial-project-setup"&gt;Initial Project Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#development-environment-setup"&gt;Development Environment Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#content-creation-workflow"&gt;Content Creation Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#template-development"&gt;Template Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#styling-with-tailwind-css-v4"&gt;Styling with Tailwind CSS v4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-procedures"&gt;Testing Procedures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#build--deployment-process"&gt;Build &amp;amp; Deployment Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#maintenance--updates"&gt;Maintenance &amp;amp; Updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#troubleshooting-guide"&gt;Troubleshooting Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quality-control-checklist"&gt;Quality Control Checklist&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Purpose &amp;amp; Scope&lt;/h2&gt;
&lt;h3&gt;Purpose&lt;/h3&gt;
&lt;p&gt;This SOP document provides step-by-step procedures for developing, maintaining, and deploying the Flux project, ensuring consistency and quality across all development activities.&lt;/p&gt;
&lt;h3&gt;Scope&lt;/h3&gt;
&lt;p&gt;These procedures apply to all team members working on the Flux project, including developers, content creators, and maintainers.&lt;/p&gt;
&lt;h3&gt;Definitions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Zola&lt;/strong&gt;: Static site generator written in Rust&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tailwind CSS v4&lt;/strong&gt;: Utility-first CSS framework&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production Build&lt;/strong&gt;: Optimized build for deployment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development Build&lt;/strong&gt;: Unoptimized build for local testing&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Initial Project Setup&lt;/h2&gt;
&lt;h3&gt;SOP-001: Creating a New Flux Project&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; One-time (per new installation)&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Lead Developer&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 15-20 minutes&lt;/p&gt;
&lt;h4&gt;Prerequisites&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Zola installed (v0.21.0 or later)&lt;/li&gt;
&lt;li&gt;Node.js (v18.x or later) and npm installed&lt;/li&gt;
&lt;li&gt;Git installed&lt;/li&gt;
&lt;li&gt;Text editor/IDE configured&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Install Zola&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# macOS (using Homebrew)&lt;/span&gt;
brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;zola

&lt;span class="c1"&gt;# Windows (using Chocolatey)&lt;/span&gt;
choco&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;zola

&lt;span class="c1"&gt;# Linux (using snap)&lt;/span&gt;
snap&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;zola&lt;span class="w"&gt; &lt;/span&gt;--edge

&lt;span class="c1"&gt;# Verify installation&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;--version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Create Project Directory&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create new Zola site&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;flux

&lt;span class="c1"&gt;# Navigate to project directory&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Initialize Git Repository&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;init
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Initial commit: Zola project setup&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Create Project Structure&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create additional directories&lt;/span&gt;
mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;styles
mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;templates/partials
mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;static/&lt;span class="o"&gt;{&lt;/span&gt;images,fonts,js&lt;span class="o"&gt;}&lt;/span&gt;
mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;content/&lt;span class="o"&gt;{&lt;/span&gt;blog,pages&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Initialize Node.js Project&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;-y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Install Tailwind CSS v4&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-D&lt;span class="w"&gt; &lt;/span&gt;tailwindcss@^4.0.0&lt;span class="w"&gt; &lt;/span&gt;@tailwindcss/postcss@^4.0.0&lt;span class="w"&gt; &lt;/span&gt;postcss&lt;span class="w"&gt; &lt;/span&gt;autoprefixer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 7: Create Configuration Files&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;tailwind.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npx&lt;span class="w"&gt; &lt;/span&gt;tailwindcss&lt;span class="w"&gt; &lt;/span&gt;init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create &lt;code&gt;postcss.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;touch&lt;span class="w"&gt; &lt;/span&gt;postcss.config.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;@tailwindcss/postcss&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;autoprefixer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 8: Create Tailwind Entry File&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;styles/main.css&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tailwindcss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 9: Update package.json Scripts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add to &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;dev:css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tailwindcss -i ./styles/main.css -o ./static/css/style.css --watch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;build:css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tailwindcss -i ./styles/main.css -o ./static/css/style.css --minify&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npm run dev:css &amp;amp; zola serve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npm run build:css &amp;amp;&amp;amp; zola build&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 10: Create .gitignore&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create .gitignore file&lt;/span&gt;
cat&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;.gitignore&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;public/&lt;/span&gt;
&lt;span class="s"&gt;node_modules/&lt;/span&gt;
&lt;span class="s"&gt;static/css/style.css&lt;/span&gt;
&lt;span class="s"&gt;.DS_Store&lt;/span&gt;
&lt;span class="s"&gt;*.log&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Verification:&lt;/strong&gt;
- Run &lt;code&gt;zola --version&lt;/code&gt; - confirms Zola installation
- Run &lt;code&gt;npm list tailwindcss&lt;/code&gt; - confirms Tailwind installation
- Directory structure matches specification
- Git repository initialized successfully&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Development Environment Setup&lt;/h2&gt;
&lt;h3&gt;SOP-002: Setting Up Development Environment&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; Once per developer workstation&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Developer&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 10 minutes&lt;/p&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Clone Repository&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;repository-url&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;flux
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Install Node Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Configure Zola&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Edit &lt;code&gt;config.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://127.0.0.1:1111&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Flux&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A modern static site built with Zola and Tailwind CSS&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;default_language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;compile_sass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;minify_html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;generate_feed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;build_search_index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;[markdown]&lt;/span&gt;
&lt;span class="n"&gt;highlight_code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;highlight_theme&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;base16-ocean-dark&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;smart_punctuation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;external_links_target_blank&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;external_links_no_follow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="k"&gt;[link_checker]&lt;/span&gt;
&lt;span class="n"&gt;skip_prefixes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;[extra]&lt;/span&gt;
&lt;span class="n"&gt;site_logo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/images/logo.svg&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Start Development Servers&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Terminal 1: Start Tailwind watcher&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dev:css

&lt;span class="c1"&gt;# Terminal 2: Start Zola server&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or use concurrent command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Verify Setup&lt;/strong&gt;
- Open browser to &lt;code&gt;http://127.0.0.1:1111&lt;/code&gt;
- Verify hot-reloading works
- Check CSS compiles correctly
- Confirm no console errors&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Verification Checklist:&lt;/strong&gt;
- [ ] Repository cloned successfully
- [ ] Dependencies installed without errors
- [ ] Zola server running on port 1111
- [ ] Tailwind CSS compiling and watching
- [ ] Changes reflect immediately in browser&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Content Creation Workflow&lt;/h2&gt;
&lt;h3&gt;SOP-003: Creating a New Blog Post&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; As needed&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Content Creator&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 5 minutes (setup only)&lt;/p&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Create Content File&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create new blog post file&lt;/span&gt;
touch&lt;span class="w"&gt; &lt;/span&gt;content/blog/YYYY-MM-DD-post-title.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Add Front Matter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use this template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;+++
title = &amp;quot;Your Post Title&amp;quot;
date = 2025-10-06
description = &amp;quot;A compelling description for SEO (150-160 characters)&amp;quot;
draft = false

[taxonomies]
tags = [&amp;quot;tag1&amp;quot;, &amp;quot;tag2&amp;quot;, &amp;quot;tag3&amp;quot;]
categories = [&amp;quot;category&amp;quot;]

[extra]
author = &amp;quot;Author Name&amp;quot;
featured_image = &amp;quot;/images/posts/post-slug.jpg&amp;quot;
reading_time = 5
+++

Your content starts here...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Write Content&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Follow these guidelines:
- Use semantic headings (## for H2, ### for H3, etc.)
- Include alt text for images: &lt;code&gt;![Alt text](/path/to/image.jpg)&lt;/code&gt;
- Use code blocks with language: &lt;code&gt;```rust&lt;/code&gt; 
- Keep paragraphs concise (3-4 sentences)
- Add internal links where relevant&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4: Add Images (if applicable)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Copy image to static directory&lt;/span&gt;
cp&lt;span class="w"&gt; &lt;/span&gt;/path/to/image.jpg&lt;span class="w"&gt; &lt;/span&gt;static/images/posts/

&lt;span class="c1"&gt;# Optimize image before committing&lt;/span&gt;
&lt;span class="c1"&gt;# Use tools like ImageOptim, TinyPNG, or Squoosh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Preview Post&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Ensure dev server is running&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;serve

&lt;span class="c1"&gt;# Navigate to post in browser&lt;/span&gt;
&lt;span class="c1"&gt;# URL: http://127.0.0.1:1111/blog/post-title/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Review Checklist&lt;/strong&gt;
- [ ] Title is descriptive and SEO-friendly
- [ ] Description is 150-160 characters
- [ ] Date is correct
- [ ] Tags and categories are appropriate
- [ ] Images have alt text
- [ ] Links work correctly
- [ ] No spelling/grammar errors
- [ ] Post renders correctly on mobile&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 7: Set Draft Status&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For work in progress:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;draft&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For publishing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;draft&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 8: Commit Changes&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;content/blog/YYYY-MM-DD-post-title.md
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;static/images/posts/post-slug.jpg
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Add blog post: Post Title&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h3&gt;SOP-004: Creating a Static Page&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; As needed&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Content Creator/Developer&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 10 minutes&lt;/p&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Create Page File&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;touch&lt;span class="w"&gt; &lt;/span&gt;content/pages/page-name.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Add Front Matter&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;+++
title = &amp;quot;Page Title&amp;quot;
description = &amp;quot;Page description for SEO&amp;quot;
template = &amp;quot;page.html&amp;quot;
date = 2025-10-06

[extra]
show_in_nav = true
nav_order = 1
+++

Page content here...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Create Custom Template (if needed)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cp&lt;span class="w"&gt; &lt;/span&gt;templates/page.html&lt;span class="w"&gt; &lt;/span&gt;templates/custom-page.html
&lt;span class="c1"&gt;# Edit custom-page.html as needed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Preview and Commit&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Preview&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;serve

&lt;span class="c1"&gt;# Commit&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;content/pages/page-name.md
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Add page: Page Name&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;Template Development&lt;/h2&gt;
&lt;h3&gt;SOP-005: Creating/Modifying Zola Templates&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; As needed&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Developer&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 30-60 minutes&lt;/p&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Understand Template Hierarchy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Zola uses this template lookup order:
1. Page-specific template (&lt;code&gt;template = "custom.html"&lt;/code&gt;)
2. Section template (&lt;code&gt;section.html&lt;/code&gt;)
3. Default templates (&lt;code&gt;page.html&lt;/code&gt;, &lt;code&gt;index.html&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: Create Base Template&lt;/strong&gt;&lt;/p&gt;
&lt;p _="%" raw&gt;Create &lt;code&gt;templates/base.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ lang }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scroll-smooth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{% block title %}{{ config.title }}{% endblock title %}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% block description %}{{ config.description }}{% endblock description %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="cm"&gt;&amp;lt;!-- Tailwind CSS --&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ get_url(path=&amp;#39;css/style.css&amp;#39;) }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="cm"&gt;&amp;lt;!-- SEO Meta Tags --&amp;gt;&lt;/span&gt;
    {% block seo %}{% endblock seo %}

    &lt;span class="cm"&gt;&amp;lt;!-- RSS Feed --&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/rss+xml&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ config.title }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ get_url(path=&amp;#39;rss.xml&amp;#39;) }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;min-h-screen bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% include &amp;quot;partials/header.html&amp;quot; %}

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container mx-auto px-4 py-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% block content %}{% endblock content %}
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    {% include &amp;quot;partials/footer.html&amp;quot; %}

    {% block extra_js %}{% endblock extra_js %}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Create Partial Templates&lt;/strong&gt;&lt;/p&gt;
&lt;p _="%" raw&gt;Header (&lt;code&gt;templates/partials/header.html&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bg-white dark:bg-gray-800 shadow-sm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container mx-auto px-4 py-4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;flex items-center justify-between&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ get_url(path=&amp;#39;/&amp;#39;) }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-2xl font-bold&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                {{ config.title }}
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;flex space-x-6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ get_url(path=&amp;#39;/&amp;#39;) }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hover:text-blue-600&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ get_url(path=&amp;#39;/blog&amp;#39;) }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hover:text-blue-600&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ get_url(path=&amp;#39;/about&amp;#39;) }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hover:text-blue-600&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;p _="%" raw&gt;Footer (&lt;code&gt;templates/partials/footer.html&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bg-gray-100 dark:bg-gray-800 mt-12&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container mx-auto px-4 py-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-center text-gray-600 dark:text-gray-400&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            © {{ now() | date(format=&amp;quot;%Y&amp;quot;) }} {{ config.title }}. All rights reserved.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4: Create Page Templates&lt;/strong&gt;&lt;/p&gt;
&lt;p _="%" raw&gt;Index (&lt;code&gt;templates/index.html&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{% extends &amp;quot;base.html&amp;quot; %}

{% block content %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;py-20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-5xl font-bold text-center mb-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Welcome to {{ config.title }}
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-xl text-center text-gray-600 dark:text-gray-400&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {{ config.description }}
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;py-12&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-3xl font-bold mb-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Recent Posts&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;grid md:grid-cols-2 lg:grid-cols-3 gap-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% set blog = get_section(path=&amp;quot;blog/_index.md&amp;quot;) %}
        {% for page in blog.pages | slice(end=6) %}
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ page.permalink }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-xl font-semibold p-6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ page.title }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;px-6 pb-6 text-gray-600 dark:text-gray-400&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    {{ page.description }}
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {% endfor %}
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endblock content %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5: Test Template&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Start dev server&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;serve

&lt;span class="c1"&gt;# Check for errors in terminal&lt;/span&gt;
&lt;span class="c1"&gt;# Verify rendering in browser&lt;/span&gt;
&lt;span class="c1"&gt;# Test responsive design&lt;/span&gt;
&lt;span class="c1"&gt;# Validate HTML&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Commit Changes&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;templates/
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Add/update template: [template-name]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Best Practices:&lt;/strong&gt;
- Use semantic HTML5 elements
- Include ARIA labels for accessibility
- Keep templates DRY (Don't Repeat Yourself)
- Use Tailwind utility classes consistently
- Comment complex template logic
- Test on multiple screen sizes&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Styling with Tailwind CSS v4&lt;/h2&gt;
&lt;h3&gt;SOP-006: Adding Custom Styles&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; As needed&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Developer/Designer&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 15-30 minutes&lt;/p&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Update Tailwind Configuration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Edit &lt;code&gt;tailwind.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;/** @type {import(&amp;#39;tailwindcss&amp;#39;).Config} */&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./templates/**/*.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./content/**/*.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;darkMode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;primary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mf"&gt;50&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#f0f9ff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mf"&gt;100&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#e0f2fe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mf"&gt;500&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#0ea5e9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mf"&gt;600&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#0284c7&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mf"&gt;700&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#0369a1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;secondary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mf"&gt;500&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#8b5cf6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mf"&gt;600&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#7c3aed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;fontFamily&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;sans&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Inter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;system-ui&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sans-serif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;mono&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fira Code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;monospace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;typography&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;DEFAULT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colors.gray.700&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colors.primary.600&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;:hover&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colors.primary.700&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colors.gray.300&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colors.primary.400&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;@tailwindcss/typography&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Add Custom CSS (if needed)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;styles/main.css&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tailwindcss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;/* Custom base styles */&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;layer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;@apply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;font-sans&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;antialiased&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;h6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;@apply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;font-bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Custom components */&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;layer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;components&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;btn-primary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;@apply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;px-6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;py-3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;bg-primary-600&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;text-white&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;rounded-lg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bg-primary-700&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;@apply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;bg-white&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bg-gray-800&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rounded-lg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shadow-md&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p-6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Custom utilities */&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;layer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;utilities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;text-balance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;text-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Rebuild CSS&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build:css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Test Styles&lt;/strong&gt;
- Check all pages for visual consistency
- Test dark mode toggle
- Verify responsive breakpoints
- Check hover states and transitions
- Validate color contrast for accessibility&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5: Commit Changes&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;tailwind.config.js&lt;span class="w"&gt; &lt;/span&gt;styles/main.css
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Update Tailwind configuration and custom styles&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h3&gt;SOP-007: Implementing Dark Mode&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; One-time setup&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Developer&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 30 minutes&lt;/p&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Configure Tailwind for Dark Mode&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Already set in &lt;code&gt;tailwind.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;darkMode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Create Dark Mode Toggle&lt;/strong&gt;&lt;/p&gt;
&lt;p _="%" raw&gt;Add to &lt;code&gt;templates/partials/header.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;theme-toggle&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;theme-toggle-dark-icon&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden w-5 h-5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;currentColor&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0 0 20 20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;theme-toggle-light-icon&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden w-5 h-5&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;currentColor&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0 0 20 20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Add JavaScript&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;static/js/theme.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Theme toggle functionality&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;themeToggle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme-toggle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;darkIcon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme-toggle-dark-icon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lightIcon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme-toggle-light-icon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Check for saved theme preference or default to system&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(prefers-color-scheme: dark)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dark&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;light&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dark&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dark&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;lightIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hidden&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;darkIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hidden&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;themeToggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dark&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dark&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dark&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;darkIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hidden&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;lightIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hidden&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;light&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;lightIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hidden&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;darkIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hidden&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Include Script in Base Template&lt;/strong&gt;&lt;/p&gt;
&lt;p _="%" raw&gt;In &lt;code&gt;templates/base.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ get_url(path=&amp;#39;js/theme.js&amp;#39;) }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5: Test Dark Mode&lt;/strong&gt;
- [ ] Toggle switches between light/dark
- [ ] Preference persists on page reload
- [ ] All text remains readable
- [ ] Images/logos work in both modes
- [ ] Syntax highlighting works in both modes&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Testing Procedures&lt;/h2&gt;
&lt;h3&gt;SOP-008: Pre-Deployment Testing&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; Before every deployment&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; QA/Developer&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 30-45 minutes&lt;/p&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Build Production Version&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Visual Testing&lt;/strong&gt;
- [ ] Test all pages on desktop (1920x1080)
- [ ] Test all pages on tablet (768x1024)
- [ ] Test all pages on mobile (375x667)
- [ ] Verify all images load correctly
- [ ] Check for broken layouts
- [ ] Test dark mode on all pages&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Functionality Testing&lt;/strong&gt;
- [ ] Click all navigation links
- [ ] Test search functionality
- [ ] Verify RSS feed generates
- [ ] Check sitemap.xml exists
- [ ] Test 404 error page
- [ ] Verify external links open in new tab&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4: Performance Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using Lighthouse (Chrome DevTools):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Or use CLI&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;lighthouse
lighthouse&lt;span class="w"&gt; &lt;/span&gt;http://127.0.0.1:1111&lt;span class="w"&gt; &lt;/span&gt;--view
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Target scores:
- Performance: 95+
- Accessibility: 95+
- Best Practices: 95+
- SEO: 95+&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5: Accessibility Testing&lt;/strong&gt;
- [ ] Run axe DevTools scan
- [ ] Test keyboard navigation
- [ ] Verify proper heading hierarchy
- [ ] Check color contrast ratios
- [ ] Test with screen reader (if available)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6: SEO Testing&lt;/strong&gt;
- [ ] Verify meta descriptions on all pages
- [ ] Check Open Graph tags
- [ ] Verify Twitter Card tags
- [ ] Test structured data with Google Rich Results Test
- [ ] Verify canonical URLs&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 7: Cross-Browser Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Test on:
- [ ] Chrome (latest)
- [ ] Firefox (latest)
- [ ] Safari (latest)
- [ ] Edge (latest)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 8: Link Validation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Build site first&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;build

&lt;span class="c1"&gt;# Check for broken links&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 9: HTML Validation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use W3C Validator:
- Visit https://validator.w3.org/
- Upload HTML files from &lt;code&gt;public/&lt;/code&gt; directory
- Fix any errors or warnings&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 10: Document Test Results&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create test report:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gu"&gt;## Test Report - [Date]&lt;/span&gt;

&lt;span class="gu"&gt;### Build Information&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Zola Version: [version]
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Tailwind CSS Version: [version]
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Commit Hash: [hash]

&lt;span class="gu"&gt;### Test Results&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Visual Testing: PASS/FAIL
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Functionality: PASS/FAIL
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Performance: [scores]
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Accessibility: PASS/FAIL
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;SEO: PASS/FAIL
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Cross-Browser: PASS/FAIL

&lt;span class="gu"&gt;### Issues Found&lt;/span&gt;
&lt;span class="k"&gt;1.&lt;/span&gt; [Issue description]
&lt;span class="k"&gt;2.&lt;/span&gt; [Issue description]

&lt;span class="gu"&gt;### Sign-off&lt;/span&gt;
Tested by: [Name]
Date: [Date]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;Build &amp;amp; Deployment Process&lt;/h2&gt;
&lt;h3&gt;SOP-009: Production Build&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; Before every deployment&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Developer&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 5 minutes&lt;/p&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Pre-Build Checklist&lt;/strong&gt;
- [ ] All changes committed to Git
- [ ] Tests passed (SOP-008)
- [ ] Content reviewed and approved
- [ ] Version number updated (if applicable)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: Update Configuration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Edit &lt;code&gt;config.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://yourdomain.com&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;minify_html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Build CSS&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build:css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Verify output:
- Check &lt;code&gt;static/css/style.css&lt;/code&gt; exists
- File should be minified
- Check file size is reasonable&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4: Build Site&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;zola&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Verify Build&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Check build completed successfully&lt;/span&gt;
ls&lt;span class="w"&gt; &lt;/span&gt;public/

&lt;span class="c1"&gt;# Verify key files exist&lt;/span&gt;
ls&lt;span class="w"&gt; &lt;/span&gt;public/index.html
ls&lt;span class="w"&gt; &lt;/span&gt;public/css/style.css
ls&lt;span class="w"&gt; &lt;/span&gt;public/sitemap.xml
ls&lt;span class="w"&gt; &lt;/span&gt;public/rss.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Test Built Site Locally&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Serve the built site&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;public
python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;http.server&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8000&lt;/span&gt;

&lt;span class="c1"&gt;# Test in browser: http://localhost:8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 7: Check Build Size&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;du&lt;span class="w"&gt; &lt;/span&gt;-sh&lt;span class="w"&gt; &lt;/span&gt;public/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Target: &amp;lt; 10MB (excluding large media)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 8: Create Build Tag&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;tag&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;v1.0.0&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Release version 1.0.0&amp;quot;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;v1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h3&gt;SOP-010: Deploying to Netlify&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; As needed&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Developer/DevOps&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 10 minutes (initial), 2 minutes (subsequent)&lt;/p&gt;
&lt;h4&gt;Initial Setup&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Create netlify.toml&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[build]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npm run build&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[build.environment]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;ZOLA_VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.21.0&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;NODE_VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;18&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[[headers]]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/*&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;[headers.values]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;X-Frame-Options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DENY&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;X-Content-Type-Options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nosniff&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Referrer-Policy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;strict-origin-when-cross-origin&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[[headers]]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/css/*&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;[headers.values]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Cache-Control&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;public, max-age=31536000, immutable&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[[headers]]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/images/*&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;[headers.values]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Cache-Control&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;public, max-age=31536000, immutable&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[[redirects]]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/old-page&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/new-page&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Connect Repository&lt;/strong&gt;
1. Log in to Netlify
2. Click "Add new site" &amp;gt; "Import an existing project"
3. Connect to Git provider
4. Select repository
5. Configure build settings (should auto-detect from netlify.toml)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Configure Environment&lt;/strong&gt;
- Build command: &lt;code&gt;npm run build&lt;/code&gt;
- Publish directory: &lt;code&gt;public&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4: Deploy&lt;/strong&gt;
- Click "Deploy site"
- Wait for build to complete
- Verify deployment&lt;/p&gt;
&lt;h4&gt;Subsequent Deployments&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Automatic Deployment:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Push to main branch&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main

&lt;span class="c1"&gt;# Netlify automatically builds and deploys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Manual Deployment:&lt;/strong&gt;
1. Navigate to Netlify dashboard
2. Click "Trigger deploy" &amp;gt; "Deploy site"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5: Verify Deployment&lt;/strong&gt;
- [ ] Visit production URL
- [ ] Check homepage loads
- [ ] Test navigation
- [ ] Verify images load
- [ ] Check mobile responsive
- [ ] Test search functionality&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6: Post-Deployment Monitoring&lt;/strong&gt;
- Check Netlify deploy logs for errors
- Monitor Google Search Console
- Check analytics for traffic
- Monitor performance metrics&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;SOP-011: Deploying to Cloudflare Pages&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; As needed&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Developer/DevOps&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 10 minutes (initial)&lt;/p&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Connect Repository&lt;/strong&gt;
1. Log in to Cloudflare Dashboard
2. Navigate to Pages
3. Click "Create a project"
4. Connect Git repository&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: Configure Build&lt;/strong&gt;
- Framework preset: None
- Build command: &lt;code&gt;npm run build &amp;amp;&amp;amp; zola build&lt;/code&gt;
- Build output directory: &lt;code&gt;public&lt;/code&gt;
- Root directory: (leave empty)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Set Environment Variables&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ZOLA_VERSION=0.21.0
NODE_VERSION=18
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Deploy&lt;/strong&gt;
- Click "Save and Deploy"
- Monitor build progress
- Verify deployment&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5: Configure Custom Domain (Optional)&lt;/strong&gt;
1. Go to Custom domains
2. Add your domain
3. Update DNS records
4. Wait for SSL certificate&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Maintenance &amp;amp; Updates&lt;/h2&gt;
&lt;h3&gt;SOP-012: Regular Maintenance Tasks&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; Monthly&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Maintainer&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 1-2 hours&lt;/p&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Update Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Check for outdated packages&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;outdated

&lt;span class="c1"&gt;# Update Tailwind CSS&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;tailwindcss&lt;span class="w"&gt; &lt;/span&gt;@tailwindcss/postcss

&lt;span class="c1"&gt;# Update other dependencies&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;update

&lt;span class="c1"&gt;# Check Zola version&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;--version

&lt;span class="c1"&gt;# Update Zola if needed (follow official docs)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Review and Update Content&lt;/strong&gt;
- [ ] Check for outdated information
- [ ] Update copyright year in footer
- [ ] Review and respond to comments
- [ ] Check for broken external links
- [ ] Update team/about pages&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Performance Audit&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Run Lighthouse audit&lt;/span&gt;
lighthouse&lt;span class="w"&gt; &lt;/span&gt;https://yourdomain.com&lt;span class="w"&gt; &lt;/span&gt;--view

&lt;span class="c1"&gt;# Check Core Web Vitals in Google Search Console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Security Review&lt;/strong&gt;
- [ ] Review Netlify/Cloudflare security settings
- [ ] Check SSL certificate validity
- [ ] Review Content Security Policy
- [ ] Audit third-party scripts&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5: Backup&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create backup branch&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;backup-&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="w"&gt; &lt;/span&gt;+%Y%m%d&lt;span class="k"&gt;)&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;backup-&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="w"&gt; &lt;/span&gt;+%Y%m%d&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Export content&lt;/span&gt;
cp&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;content/&lt;span class="w"&gt; &lt;/span&gt;backups/content-&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="w"&gt; &lt;/span&gt;+%Y%m%d&lt;span class="k"&gt;)&lt;/span&gt;/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Analytics Review&lt;/strong&gt;
- Review traffic patterns
- Identify popular content
- Check bounce rates
- Monitor search rankings
- Review conversion goals&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 7: Update Documentation&lt;/strong&gt;
- Update README if needed
- Document any new procedures
- Update changelog
- Review and update SOP document&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;SOP-013: Dependency Updates&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; Quarterly or when security updates available&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Developer&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 30 minutes&lt;/p&gt;
&lt;h4&gt;Procedure&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Check Current Versions&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Check npm packages&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;outdated

&lt;span class="c1"&gt;# Check Zola version&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;--version

&lt;span class="c1"&gt;# Check latest Zola release&lt;/span&gt;
&lt;span class="c1"&gt;# Visit: https://github.com/getzola/zola/releases&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Review Changelogs&lt;/strong&gt;
- Read Tailwind CSS v4 changelog
- Review Zola release notes
- Check for breaking changes
- Identify new features&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Update Node Packages&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Update package.json&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;update

&lt;span class="c1"&gt;# Or update specific package&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;tailwindcss@latest

&lt;span class="c1"&gt;# Audit for vulnerabilities&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;audit

&lt;span class="c1"&gt;# Fix vulnerabilities&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;audit&lt;span class="w"&gt; &lt;/span&gt;fix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Update Zola&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# macOS&lt;/span&gt;
brew&lt;span class="w"&gt; &lt;/span&gt;upgrade&lt;span class="w"&gt; &lt;/span&gt;zola

&lt;span class="c1"&gt;# Windows&lt;/span&gt;
choco&lt;span class="w"&gt; &lt;/span&gt;upgrade&lt;span class="w"&gt; &lt;/span&gt;zola

&lt;span class="c1"&gt;# Linux&lt;/span&gt;
snap&lt;span class="w"&gt; &lt;/span&gt;refresh&lt;span class="w"&gt; &lt;/span&gt;zola
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Test After Updates&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Clean build&lt;/span&gt;
rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;public/
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build

&lt;span class="c1"&gt;# Test locally&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Run Full Test Suite&lt;/strong&gt;
- Follow SOP-008 (Pre-Deployment Testing)
- Check for visual regressions
- Verify all functionality works
- Test on multiple browsers&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 7: Update Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Update version numbers in README&lt;/span&gt;
&lt;span class="c1"&gt;# Update package.json version&lt;/span&gt;
&lt;span class="c1"&gt;# Update config.toml if needed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 8: Commit and Deploy&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;package.json&lt;span class="w"&gt; &lt;/span&gt;package-lock.json
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chore: update dependencies to latest versions&amp;quot;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Rollback Procedure (if issues occur):&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Revert to previous commit&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;revert&lt;span class="w"&gt; &lt;/span&gt;HEAD

&lt;span class="c1"&gt;# Or checkout previous version&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;previous-commit-hash&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;package.json&lt;span class="w"&gt; &lt;/span&gt;package-lock.json
npm&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;Troubleshooting Guide&lt;/h2&gt;
&lt;h3&gt;SOP-014: Common Issues and Solutions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; As needed&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; Developer&lt;/p&gt;
&lt;h4&gt;Issue 1: Tailwind CSS Not Compiling&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Symptoms:&lt;/strong&gt;
- CSS file not generated
- Styles not applying
- Build errors&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Step 1: Check if Tailwind is installed&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;tailwindcss

&lt;span class="c1"&gt;# Step 2: Reinstall if needed&lt;/span&gt;
rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;node_modules&lt;span class="w"&gt; &lt;/span&gt;package-lock.json
npm&lt;span class="w"&gt; &lt;/span&gt;install

&lt;span class="c1"&gt;# Step 3: Verify configuration files exist&lt;/span&gt;
ls&lt;span class="w"&gt; &lt;/span&gt;tailwind.config.js&lt;span class="w"&gt; &lt;/span&gt;postcss.config.js&lt;span class="w"&gt; &lt;/span&gt;styles/main.css

&lt;span class="c1"&gt;# Step 4: Check npm scripts in package.json&lt;/span&gt;
cat&lt;span class="w"&gt; &lt;/span&gt;package.json&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;build:css&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Step 5: Try manual build&lt;/span&gt;
npx&lt;span class="w"&gt; &lt;/span&gt;tailwindcss&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;./styles/main.css&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;./static/css/style.css

&lt;span class="c1"&gt;# Step 6: Check for syntax errors in config&lt;/span&gt;
node&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;tailwind.config.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Prevention:&lt;/strong&gt;
- Always commit &lt;code&gt;package-lock.json&lt;/code&gt;
- Document custom configuration
- Use version control for config files&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Issue 2: Zola Build Fails&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Symptoms:&lt;/strong&gt;
- &lt;code&gt;zola build&lt;/code&gt; command fails
- Template errors
- Content parsing errors&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Step 1: Check Zola version&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;--version

&lt;span class="c1"&gt;# Step 2: Run with verbose output&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;--verbose

&lt;span class="c1"&gt;# Step 3: Check for template syntax errors&lt;/span&gt;
&lt;span class="c1"&gt;# Look for unclosed tags, missing variables&lt;/span&gt;

&lt;span class="c1"&gt;# Step 4: Validate content front matter&lt;/span&gt;
&lt;span class="c1"&gt;# Check all +++ sections are properly closed&lt;/span&gt;

&lt;span class="c1"&gt;# Step 5: Test individual templates&lt;/span&gt;
&lt;span class="c1"&gt;# Comment out sections to isolate issue&lt;/span&gt;

&lt;span class="c1"&gt;# Step 6: Clear cache and rebuild&lt;/span&gt;
rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;public/&lt;span class="w"&gt; &lt;/span&gt;static/processed_images/
zola&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Common Causes:&lt;/strong&gt;
- Unclosed Tera template tags
- Invalid TOML in front matter
- Missing required variables
- Incorrect file paths&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Issue 3: Images Not Loading&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Symptoms:&lt;/strong&gt;
- Broken image icons
- 404 errors for images
- Images work locally but not in production&lt;/p&gt;
&lt;p&gt;{% raw %}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Step 1: Check file path&lt;/span&gt;
&lt;span class="c1"&gt;# Paths should be relative to static/ folder&lt;/span&gt;
&lt;span class="c1"&gt;# Example: /images/photo.jpg (not /static/images/photo.jpg)&lt;/span&gt;

&lt;span class="c1"&gt;# Step 2: Verify file exists&lt;/span&gt;
ls&lt;span class="w"&gt; &lt;/span&gt;static/images/

&lt;span class="c1"&gt;# Step 3: Check file permissions&lt;/span&gt;
chmod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;644&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;static/images/*

&lt;span class="c1"&gt;# Step 4: Verify image referenced correctly in template&lt;/span&gt;
&lt;span class="c1"&gt;# Use: {{ get_url(path=&amp;quot;images/photo.jpg&amp;quot;) }}&lt;/span&gt;
&lt;span class="c1"&gt;# Or: /images/photo.jpg&lt;/span&gt;

&lt;span class="c1"&gt;# Step 5: Check base_url in config.toml&lt;/span&gt;
&lt;span class="c1"&gt;# Should match production domain&lt;/span&gt;

&lt;span class="c1"&gt;# Step 6: Clear browser cache&lt;/span&gt;
&lt;span class="c1"&gt;# Hard refresh: Ctrl+Shift+R (Windows) or Cmd+Shift+R (Mac)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Issue 4: Dark Mode Not Working&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Symptoms:&lt;/strong&gt;
- Toggle button doesn't work
- Theme doesn't persist
- Styles not applying&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Step 1: Check JavaScript file loaded&lt;/span&gt;
&lt;span class="c1"&gt;# Open DevTools Console, look for errors&lt;/span&gt;

&lt;span class="c1"&gt;# Step 2: Verify script tag in base.html&lt;/span&gt;
&lt;span class="c1"&gt;# Should be: &amp;lt;script src=&amp;quot;/js/theme.js&amp;quot; defer&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Step 3: Check localStorage functionality&lt;/span&gt;
&lt;span class="c1"&gt;# Open DevTools &amp;gt; Application &amp;gt; Local Storage&lt;/span&gt;
&lt;span class="c1"&gt;# Look for &amp;#39;theme&amp;#39; key&lt;/span&gt;

&lt;span class="c1"&gt;# Step 4: Verify Tailwind config&lt;/span&gt;
&lt;span class="c1"&gt;# darkMode should be set to &amp;#39;class&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Step 5: Check dark: classes in templates&lt;/span&gt;
&lt;span class="c1"&gt;# Example: class=&amp;quot;bg-white dark:bg-gray-900&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Step 6: Test in incognito mode&lt;/span&gt;
&lt;span class="c1"&gt;# Rules out localStorage issues&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h4&gt;Issue 5: Search Not Working&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Symptoms:&lt;/strong&gt;
- Search returns no results
- Search index not generated
- JavaScript errors&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Step 1: Enable search in config.toml&lt;/span&gt;
&lt;span class="c1"&gt;# build_search_index = true&lt;/span&gt;

&lt;span class="c1"&gt;# Step 2: Rebuild site&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;build

&lt;span class="c1"&gt;# Step 3: Check search index exists&lt;/span&gt;
ls&lt;span class="w"&gt; &lt;/span&gt;public/search_index.en.json

&lt;span class="c1"&gt;# Step 4: Verify search implementation&lt;/span&gt;
&lt;span class="c1"&gt;# Check JavaScript console for errors&lt;/span&gt;

&lt;span class="c1"&gt;# Step 5: Test search index manually&lt;/span&gt;
&lt;span class="c1"&gt;# Visit: http://yourdomain.com/search_index.en.json&lt;/span&gt;

&lt;span class="c1"&gt;# Step 6: Check content has searchable text&lt;/span&gt;
&lt;span class="c1"&gt;# Ensure posts have content, not just front matter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h4&gt;Issue 6: Slow Build Times&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Symptoms:&lt;/strong&gt;
- &lt;code&gt;zola build&lt;/code&gt; takes too long
- Development server slow to reload&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Step 1: Identify bottlenecks&lt;/span&gt;
&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;zola&lt;span class="w"&gt; &lt;/span&gt;build

&lt;span class="c1"&gt;# Step 2: Optimize images&lt;/span&gt;
&lt;span class="c1"&gt;# Use WebP format&lt;/span&gt;
&lt;span class="c1"&gt;# Compress images before adding&lt;/span&gt;

&lt;span class="c1"&gt;# Step 3: Reduce Tailwind CSS size&lt;/span&gt;
&lt;span class="c1"&gt;# Ensure content paths are specific in tailwind.config.js&lt;/span&gt;
&lt;span class="c1"&gt;# Remove unused plugins&lt;/span&gt;

&lt;span class="c1"&gt;# Step 4: Enable caching&lt;/span&gt;
&lt;span class="c1"&gt;# Add to netlify.toml or CI config&lt;/span&gt;

&lt;span class="c1"&gt;# Step 5: Limit search index&lt;/span&gt;
&lt;span class="c1"&gt;# Exclude large content from search&lt;/span&gt;

&lt;span class="c1"&gt;# Step 6: Profile Zola build&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;--verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h4&gt;Issue 7: Deployment Fails&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Symptoms:&lt;/strong&gt;
- Build succeeds locally but fails on platform
- Deployment logs show errors
- Site not updating after push&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Step 1: Check deployment logs&lt;/span&gt;
&lt;span class="c1"&gt;# View full logs in Netlify/Cloudflare dashboard&lt;/span&gt;

&lt;span class="c1"&gt;# Step 2: Verify environment variables&lt;/span&gt;
&lt;span class="c1"&gt;# Check Zola version, Node version set correctly&lt;/span&gt;

&lt;span class="c1"&gt;# Step 3: Test build command locally&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build

&lt;span class="c1"&gt;# Step 4: Check for platform-specific issues&lt;/span&gt;
&lt;span class="c1"&gt;# File path case sensitivity (Mac/Linux vs production)&lt;/span&gt;
&lt;span class="c1"&gt;# Line endings (CRLF vs LF)&lt;/span&gt;

&lt;span class="c1"&gt;# Step 5: Verify netlify.toml or build config&lt;/span&gt;
&lt;span class="c1"&gt;# Ensure paths are correct&lt;/span&gt;
&lt;span class="c1"&gt;# Check publish directory set to &amp;#39;public&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Step 6: Clear build cache&lt;/span&gt;
&lt;span class="c1"&gt;# Most platforms have &amp;quot;Clear cache and retry&amp;quot; option&lt;/span&gt;

&lt;span class="c1"&gt;# Step 7: Check for large files&lt;/span&gt;
&lt;span class="c1"&gt;# Deployments may fail if repo too large&lt;/span&gt;
&lt;span class="c1"&gt;# Add large files to .gitignore&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h4&gt;Issue 8: RSS Feed Not Updating&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Symptoms:&lt;/strong&gt;
- RSS feed shows old content
- Feed not generated
- Invalid feed format&lt;/p&gt;
&lt;p _="%" raw&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Step 1: Enable RSS in config.toml&lt;/span&gt;
&lt;span class="c1"&gt;# generate_feed = true&lt;/span&gt;

&lt;span class="c1"&gt;# Step 2: Check feed template exists&lt;/span&gt;
&lt;span class="c1"&gt;# Should have: templates/rss.xml (if custom)&lt;/span&gt;

&lt;span class="c1"&gt;# Step 3: Rebuild site&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;build

&lt;span class="c1"&gt;# Step 4: Verify feed exists&lt;/span&gt;
ls&lt;span class="w"&gt; &lt;/span&gt;public/rss.xml

&lt;span class="c1"&gt;# Step 5: Validate RSS feed&lt;/span&gt;
&lt;span class="c1"&gt;# Use: https://validator.w3.org/feed/&lt;/span&gt;

&lt;span class="c1"&gt;# Step 6: Check feed URL in templates&lt;/span&gt;
&lt;span class="c1"&gt;# Should be: {{ get_url(path=&amp;quot;rss.xml&amp;quot;, trailing_slash=false) }}&lt;/span&gt;

&lt;span class="c1"&gt;# Step 7: Clear CDN cache&lt;/span&gt;
&lt;span class="c1"&gt;# If using CDN, purge cache for rss.xml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Quality Control Checklist&lt;/h2&gt;
&lt;h3&gt;SOP-015: Pre-Deployment Quality Checklist&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Frequency:&lt;/strong&gt; Before every production deployment&lt;br&gt;
&lt;strong&gt;Responsible Role:&lt;/strong&gt; QA/Developer&lt;br&gt;
&lt;strong&gt;Estimated Time:&lt;/strong&gt; 20 minutes&lt;/p&gt;
&lt;h4&gt;Content Quality&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;General Content:&lt;/strong&gt;
- [ ] All page titles are descriptive and unique
- [ ] All meta descriptions are 150-160 characters
- [ ] No spelling or grammar errors
- [ ] All links work (internal and external)
- [ ] All images have alt text
- [ ] Content is up-to-date and accurate
- [ ] Copyright year is current&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blog Posts:&lt;/strong&gt;
- [ ] Post has proper front matter
- [ ] Date is correct
- [ ] Tags and categories assigned
- [ ] Reading time estimated (if used)
- [ ] Featured image set (if applicable)
- [ ] Author attribution correct
- [ ] Code blocks have language specified
- [ ] Internal links use proper syntax&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Technical Quality&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Build &amp;amp; Configuration:&lt;/strong&gt;
- [ ] &lt;code&gt;zola build&lt;/code&gt; completes without errors
- [ ] &lt;code&gt;npm run build:css&lt;/code&gt; completes successfully
- [ ] No broken links (run &lt;code&gt;zola check&lt;/code&gt;)
- [ ] &lt;code&gt;config.toml&lt;/code&gt; base_url is correct for environment
- [ ] All static assets exist in correct directories
- [ ] Generated files are in &lt;code&gt;public/&lt;/code&gt; directory&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Performance:&lt;/strong&gt;
- [ ] Lighthouse Performance score: 95+
- [ ] First Contentful Paint: &amp;lt; 1.0s
- [ ] Largest Contentful Paint: &amp;lt; 2.5s
- [ ] Cumulative Layout Shift: &amp;lt; 0.1
- [ ] Total page size: &amp;lt; 500KB (excluding images)
- [ ] Images optimized (WebP, compressed)
- [ ] CSS file minified
- [ ] HTML minified (if enabled)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Accessibility:&lt;/strong&gt;
- [ ] Lighthouse Accessibility score: 95+
- [ ] Proper heading hierarchy (only one h1 per page)
- [ ] All interactive elements keyboard accessible
- [ ] Color contrast ratios meet WCAG AA standards
- [ ] Forms have proper labels (if applicable)
- [ ] Focus indicators visible
- [ ] ARIA labels used appropriately
- [ ] Screen reader tested (if available)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SEO:&lt;/strong&gt;
- [ ] Lighthouse SEO score: 95+
- [ ] All pages have unique titles
- [ ] All pages have meta descriptions
- [ ] Open Graph tags present
- [ ] Twitter Card tags present
- [ ] Canonical URLs set correctly
- [ ] Sitemap generated (sitemap.xml exists)
- [ ] Robots.txt configured properly
- [ ] RSS feed generated
- [ ] Structured data added (if applicable)&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Visual Quality&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Layout &amp;amp; Design:&lt;/strong&gt;
- [ ] Layout consistent across all pages
- [ ] Navigation works on all pages
- [ ] Footer appears on all pages
- [ ] No broken layouts at any screen size
- [ ] Consistent spacing and alignment
- [ ] Typography hierarchy clear
- [ ] Brand colors used consistently&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Responsive Design:&lt;/strong&gt;
- [ ] Mobile (375px): All content readable and accessible
- [ ] Tablet (768px): Layout adjusts appropriately
- [ ] Desktop (1920px): Content not too wide, well-centered
- [ ] Navigation works on mobile (hamburger menu if used)
- [ ] Images scale properly at all sizes
- [ ] Touch targets at least 44x44px on mobile
- [ ] No horizontal scrolling (unless intentional)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dark Mode:&lt;/strong&gt;
- [ ] Dark mode toggle works
- [ ] All text readable in dark mode
- [ ] All images visible in dark mode
- [ ] Proper contrast in dark mode
- [ ] Syntax highlighting works in dark mode
- [ ] Theme preference persists&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Browser Compatibility&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Desktop Browsers:&lt;/strong&gt;
- [ ] Chrome (latest): Full functionality
- [ ] Firefox (latest): Full functionality
- [ ] Safari (latest): Full functionality
- [ ] Edge (latest): Full functionality&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mobile Browsers:&lt;/strong&gt;
- [ ] Safari iOS (latest): Full functionality
- [ ] Chrome Android (latest): Full functionality&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Functionality Testing&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Navigation:&lt;/strong&gt;
- [ ] All nav links work
- [ ] Breadcrumbs correct (if used)
- [ ] Pagination works on blog index
- [ ] Category/tag pages load correctly
- [ ] 404 page displays for invalid URLs&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Search:&lt;/strong&gt;
- [ ] Search functionality works
- [ ] Search returns relevant results
- [ ] Search handles no results gracefully
- [ ] Search index up-to-date&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Forms (if applicable):&lt;/strong&gt;
- [ ] All form fields validate correctly
- [ ] Form submissions work
- [ ] Error messages display properly
- [ ] Success messages display properly&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Security Checklist&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Headers:&lt;/strong&gt;
- [ ] Security headers configured (CSP, X-Frame-Options)
- [ ] HTTPS enforced
- [ ] HSTS enabled
- [ ] No mixed content warnings&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Privacy:&lt;/strong&gt;
- [ ] Privacy policy page exists (if collecting data)
- [ ] Cookie notice (if using cookies)
- [ ] Analytics configured properly
- [ ] External scripts from trusted sources only&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Deployment Checklist&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Pre-Deployment:&lt;/strong&gt;
- [ ] All changes committed to Git
- [ ] Version number updated (if applicable)
- [ ] Changelog updated
- [ ] Team notified of deployment&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deployment:&lt;/strong&gt;
- [ ] Production build created successfully
- [ ] Deployment completed without errors
- [ ] DNS records correct (if domain change)
- [ ] SSL certificate valid&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Post-Deployment:&lt;/strong&gt;
- [ ] Homepage loads correctly
- [ ] Sample blog post loads correctly
- [ ] Static page loads correctly
- [ ] Search works on production
- [ ] RSS feed accessible
- [ ] Sitemap accessible
- [ ] Analytics tracking (if used)&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Sign-Off&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Tested by:&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;_&lt;br&gt;
&lt;strong&gt;Date:&lt;/strong&gt; &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;____&lt;br&gt;
&lt;strong&gt;Environment:&lt;/strong&gt; [ ] Staging [ ] Production&lt;br&gt;
&lt;strong&gt;Status:&lt;/strong&gt; [ ] PASS [ ] FAIL [ ] PASS WITH NOTES&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[Any issues found or notes about the deployment]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;Appendix&lt;/h2&gt;
&lt;h3&gt;A. Useful Commands Reference&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Zola Commands&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;project-name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Create new Zola site&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;serve&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="c1"&gt;# Start development server&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;serve&lt;span class="w"&gt; &lt;/span&gt;--interface&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Serve on all interfaces&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;serve&lt;span class="w"&gt; &lt;/span&gt;--port&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;# Serve on custom port&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="c1"&gt;# Build production site&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;--base-url&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;url&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;# Build with custom base URL&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;check&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="c1"&gt;# Check for broken links&lt;/span&gt;
zola&lt;span class="w"&gt; &lt;/span&gt;--version&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="c1"&gt;# Show Zola version&lt;/span&gt;

&lt;span class="c1"&gt;# npm Commands&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="c1"&gt;# Install dependencies&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="c1"&gt;# Update dependencies&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;outdated&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="c1"&gt;# Check for outdated packages&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;audit&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="c1"&gt;# Check for vulnerabilities&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;audit&lt;span class="w"&gt; &lt;/span&gt;fix&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="c1"&gt;# Fix vulnerabilities&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dev:css&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="c1"&gt;# Build Tailwind (watch mode)&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build:css&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="c1"&gt;# Build Tailwind (production)&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;dev&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="c1"&gt;# Run both dev servers&lt;/span&gt;
npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="c1"&gt;# Full production build&lt;/span&gt;

&lt;span class="c1"&gt;# Git Commands&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;status&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="c1"&gt;# Check status&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="c1"&gt;# Stage all changes&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="c1"&gt;# Commit with message&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;# Push to main branch&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="c1"&gt;# Pull latest changes&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;--oneline&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="c1"&gt;# View commit history&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt;                          &lt;/span&gt;&lt;span class="c1"&gt;# View changes&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;branch-name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;# Create new branch&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;tag&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;v1.0.0&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Create tag&lt;/span&gt;

&lt;span class="c1"&gt;# File Operations&lt;/span&gt;
du&lt;span class="w"&gt; &lt;/span&gt;-sh&lt;span class="w"&gt; &lt;/span&gt;public/&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="c1"&gt;# Check build size&lt;/span&gt;
ls&lt;span class="w"&gt; &lt;/span&gt;-lh&lt;span class="w"&gt; &lt;/span&gt;static/css/&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;# List CSS files with sizes&lt;/span&gt;
find&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*.md&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;wc&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;# Count markdown files&lt;/span&gt;
grep&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;search-term&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;content/&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Search in content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h3&gt;B. File Templates&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Blog Post Template:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;+++
title = &amp;quot;&amp;quot;
date = 2025-10-06
description = &amp;quot;&amp;quot;
draft = true

[taxonomies]
tags = []
categories = []

[extra]
author = &amp;quot;&amp;quot;
featured_image = &amp;quot;&amp;quot;
+++

Write your content here...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Static Page Template:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;+++
title = &amp;quot;&amp;quot;
description = &amp;quot;&amp;quot;
template = &amp;quot;page.html&amp;quot;
date = 2025-10-06

[extra]
show_in_nav = true
nav_order = 1
+++

Page content...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h3&gt;C. Resources &amp;amp; Links&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Official Documentation:&lt;/strong&gt;
- Zola: https://www.getzola.org/documentation/
- Tailwind CSS v4: https://tailwindcss.com/docs
- Tera (Template Engine): https://keats.github.io/tera/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;
- Lighthouse: https://developers.google.com/web/tools/lighthouse
- W3C Validator: https://validator.w3.org/
- Image Optimization: https://squoosh.app/
- RSS Validator: https://validator.w3.org/feed/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Communities:&lt;/strong&gt;
- Zola Forum: https://zola.discourse.group/
- Tailwind Discord: https://discord.gg/tailwindcss&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;D. Contact &amp;amp; Support&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Project Lead:&lt;/strong&gt; [Name]&lt;br&gt;
&lt;strong&gt;Email:&lt;/strong&gt; [email]&lt;br&gt;
&lt;strong&gt;GitHub:&lt;/strong&gt; [repository URL]&lt;br&gt;
&lt;strong&gt;Documentation:&lt;/strong&gt; [wiki/docs URL]&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;E. Version History&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Changes&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1.0.0&lt;/td&gt;
&lt;td&gt;2025-10-06&lt;/td&gt;
&lt;td&gt;Initial SOP document&lt;/td&gt;
&lt;td&gt;[Author]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3&gt;F. Approval&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Reviewed by:&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;_&lt;br&gt;
&lt;strong&gt;Approved by:&lt;/strong&gt; &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;br&gt;
&lt;strong&gt;Date:&lt;/strong&gt; &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;___&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;End of Document&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This SOP should be reviewed and updated quarterly or when significant changes are made to the project structure, tools, or processes.&lt;/em&gt;
```&lt;/p&gt;</content><category term="posts"/></entry><entry><title>My First Blog Post</title><link href="https://yoloinfinity55.github.io/sparkpelican/my-first-post.html" rel="alternate"/><published>2025-01-15T10:00:00-05:00</published><updated>2025-01-15T10:00:00-05:00</updated><author><name>Infinity Spark</name></author><id>tag:yoloinfinity55.github.io,2025-01-15:/sparkpelican/my-first-post.html</id><summary type="html">&lt;p&gt;This is my very first blog post using Pelican and Tailwind CSS!&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Welcome to My Blog!&lt;/h1&gt;
&lt;p&gt;This is my first blog post created with &lt;strong&gt;Pelican&lt;/strong&gt; and styled with &lt;strong&gt;Tailwind CSS&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;What I'll Write About&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Technology&lt;/li&gt;
&lt;li&gt;Programming&lt;/li&gt;
&lt;li&gt;Life experiences&lt;/li&gt;
&lt;li&gt;And much more!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;I'm excited to share my journey with you. Stay tuned for more posts!&lt;/p&gt;</content><category term="General"/><category term="hello"/><category term="first-post"/></entry></feed>